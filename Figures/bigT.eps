%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (tE in Big Pulley.pdf)
%%Creator: (Adobe Acrobat 17.9.0)
%%For: rzha419
%%CreationDate: 6/09/18, 1:36 PM
%%BoundingBox: 0 0 592 686
%%HiResBoundingBox: 0 0 591.3801 685.9163
%%CropBox: 0 0 591.3801 685.9163
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 928 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2018-09-06T11:01:05"
   xmp:CreatorTool="R"
   xmp:ModifyDate="2018-09-06T13:24:14+12:00"
   xmp:MetadataDate="2018-09-06T13:24:14+12:00"
   pdf:Producer="R 3.5.0"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:dbf1d2f7-116b-604f-ae7d-cb17a01b51e2"
   xmpMM:InstanceID="uuid:c6864833-c09a-b946-bb80-de9aae21db14">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">R Graphics Output</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -685.916 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 685.916 li
591.38 685.916 li
591.38 0 li
cp
clp
0 722.673 mo
612 722.673 li
612 -69.327 li
0 -69.327 li
cp
false sop
0 0 0 0 cmyk
f
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 68 /D putdup 101 /e putdup 105 /i putdup 110 /n putdup 115 /s putdup 116 /t putdup 121 /y putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/D <1C60D8A8C9B6079F62ED4B3208AD694719329DB5FF23BCAF76D41058F7AAAFF2529AC265BA39C333293E127AD9C0A8013616ECDB9EC4B8FC987A3C84239B76F354F924D3BA3E82C9BA9779AE94CCE8ABEEADDA4A3C72DD0361E6B5DAAF6C5A39F74710AA0C4E1E> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/n <1C60D8A8C9B7EF3217E3BC2FA8BE5FFDDE7BA6B2BB97B82CAF2D20211744A627BCE3171C7124085EFB87C01551538DC74ADD76A4A469E736F37382A8E68FCF64FCF52E65C49BB3C47B4136748A05BC6A02EABE080CF030B375C809CD67343FEE2448D6> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/y <1C60D8A8C9B7A73DB9AA12572CE44B37D0759EC5FA4258DA87660F3841304B61A1A911D1876BE6D5484230C2A9DECADC4A3BB259186F9713382F53071656420086C18502612AEB2A0E39781AC31868BC5BE3AB2872591151CD2F994021F04AB4E3C05AD2A97CE0F737B6F0C53FBA3CB18D70D123> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/XLUSIL+Helvetica /Helvetica findfont ct_VMDictPut/XLUSIL+Helvetica*1 [68{/.notdef}rp /D 32{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 4{/.notdef}rp /s /t 4{/.notdef}rp /y 134{/.notdef}rp]XLUSIL+Helvetica nfXLUSIL+Helvetica*1 [0 -12 -12 0 0 0 ]msf12.96 339.473 mo(Density)[-8.66382 -6.672 -6.672 -6 -2.66382 -3.336 0 ]ysh.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
107.56 649.233 mo
574.06 649.233 li
@
107.56 649.233 mo
107.56 656.433 li
@
224.18 649.233 mo
224.18 656.433 li
@
340.81 649.233 mo
340.81 656.433 li
@
457.44 649.233 mo
457.44 656.433 li
@
574.06 649.233 mo
574.06 656.433 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.systemdict beginXLUSIL+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-systemdict /gcheck known {setglobal} if end {end} ifendXLUSIL+Helvetica /Encoding getdup 48 /zero putdup 49 /one putdup 50 /two putdup 52 /four putdup 54 /six putdup 56 /eight putpop%ADOEndSubsetFont
/XLUSIL+Helvetica*1 [48{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 11{/.notdef}rp /D 32{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 4{/.notdef}rp /s /t 4{/.notdef}rp /y 134{/.notdef}rp]XLUSIL+Helvetica nfXLUSIL+Helvetica*1 [12 0 0 -12 0 0 ]msf104.22 675.153 mo(2)sh220.848 675.153 mo(4)sh336.122 674.094 mo(6)sh454.1 675.153 mo(8)sh567.392 675.153 mo(10)[6.672 0 ]xsh59.04 624.803 mo
59.04 24.033 li
@
59.04 624.803 mo
51.84 624.803 li
@
59.04 524.673 mo
51.84 524.673 li
@
59.04 424.543 mo
51.84 424.543 li
@
59.04 324.423 mo
51.84 324.423 li
@
59.04 224.293 mo
51.84 224.293 li
@
59.04 124.163 mo
51.84 124.163 li
@
59.04 24.033 mo
51.84 24.033 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.systemdict beginXLUSIL+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-systemdict /gcheck known {setglobal} if end {end} ifendXLUSIL+Helvetica /Encoding getdup 46 /period putdup 51 /three putdup 53 /five putpop%ADOEndSubsetFont
/XLUSIL+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /.notdef /eight 11{/.notdef}rp /D 32{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 4{/.notdef}rp /s /t 4{/.notdef}rp /y 134{/.notdef}rp]XLUSIL+Helvetica nfXLUSIL+Helvetica*1 [0 -12 -12 0 0 0 ]msf41.76 633.143 mo(0.0)[-6.672 -3.336 0 ]ysh41.76 533.015 mo(0.1)[-6.672 -3.336 0 ]ysh41.76 432.887 mo(0.2)[-6.672 -3.336 0 ]ysh41.76 332.771 mo(0.3)[-6.672 -3.336 0 ]ysh41.76 232.643 mo(0.4)[-6.672 -3.336 0 ]ysh41.76 132.515 mo(0.5)[-6.672 -3.336 0 ]ysh41.76 32.387 mo(0.6)[-6.672 -3.336 0 ]ysh78.4 624.803 mo
84.23 624.803 li
84.23 620.803 li
78.4 620.803 li
cp
@
84.23 624.803 mo
90.06 624.803 li
90.06 614.793 li
84.23 614.793 li
cp
@
90.06 624.803 mo
95.89 624.803 li
95.89 596.773 li
90.06 596.773 li
cp
@
95.89 624.803 mo
101.72 624.803 li
101.72 590.763 li
95.89 590.763 li
cp
@
101.73 624.803 mo
107.56 624.803 li
107.56 564.733 li
101.73 564.733 li
cp
@
107.56 624.803 mo
113.39 624.803 li
113.39 530.703 li
107.56 530.703 li
cp
@
113.39 624.803 mo
119.22 624.803 li
119.22 492.663 li
113.39 492.663 li
cp
@
119.22 624.803 mo
125.05 624.803 li
125.05 448.613 li
119.22 448.613 li
cp
@
125.05 624.803 mo
130.88 624.803 li
130.88 334.483 li
125.05 334.483 li
cp
@
130.88 624.803 mo
136.71 624.803 li
136.71 302.453 li
130.88 302.453 li
cp
@
136.71 624.803 mo
142.54 624.803 li
142.54 224.363 li
136.71 224.363 li
cp
@
142.54 624.803 mo
148.37 624.803 li
148.37 146.283 li
142.54 146.283 li
cp
@
148.38 624.803 mo
154.21 624.803 li
154.21 180.313 li
148.38 180.313 li
cp
@
154.21 624.803 mo
160.04 624.803 li
160.04 122.253 li
154.21 122.253 li
cp
@
160.04 624.803 mo
165.87 624.803 li
165.87 34.163 li
160.04 34.163 li
cp
@
165.87 624.803 mo
171.7 624.803 li
171.7 56.183 li
165.87 56.183 li
cp
@
171.7 624.803 mo
177.53 624.803 li
177.53 14.133 li
171.7 14.133 li
cp
@
177.53 624.803 mo
183.36 624.803 li
183.36 28.153 li
177.53 28.153 li
cp
@
183.36 624.803 mo
189.19 624.803 li
189.19 60.183 li
183.36 60.183 li
cp
@
189.2 624.803 mo
195.03 624.803 li
195.03 132.263 li
189.2 132.263 li
cp
@
195.03 624.803 mo
200.86 624.803 li
200.86 160.293 li
195.03 160.293 li
cp
@
200.86 624.803 mo
206.69 624.803 li
206.69 136.273 li
200.86 136.273 li
cp
@
206.69 624.803 mo
212.52 624.803 li
212.52 178.313 li
206.69 178.313 li
cp
@
212.52 624.803 mo
218.35 624.803 li
218.35 280.423 li
212.52 280.423 li
cp
@
218.35 624.803 mo
224.18 624.803 li
224.18 322.473 li
218.35 322.473 li
cp
@
224.18 624.803 mo
230.01 624.803 li
230.01 358.513 li
224.18 358.513 li
cp
@
230.01 624.803 mo
235.84 624.803 li
235.84 382.543 li
230.01 382.543 li
cp
@
235.85 624.803 mo
241.68 624.803 li
241.68 392.553 li
235.85 392.553 li
cp
@
241.68 624.803 mo
247.51 624.803 li
247.51 470.633 li
241.68 470.633 li
cp
@
247.51 624.803 mo
253.34 624.803 li
253.34 470.633 li
247.51 470.633 li
cp
@
253.34 624.803 mo
259.17 624.803 li
259.17 536.703 li
253.34 536.703 li
cp
@
259.17 624.803 mo
265 624.803 li
265 526.693 li
259.17 526.693 li
cp
@
265 624.803 mo
270.83 624.803 li
270.83 556.733 li
265 556.733 li
cp
@
270.83 624.803 mo
276.66 624.803 li
276.66 568.743 li
270.83 568.743 li
cp
@
276.67 624.803 mo
282.5 624.803 li
282.5 568.743 li
276.67 568.743 li
cp
@
282.5 624.803 mo
288.33 624.803 li
288.33 594.773 li
282.5 594.773 li
cp
@
288.33 624.803 mo
294.16 624.803 li
294.16 608.783 li
288.33 608.783 li
cp
@
294.16 624.803 mo
299.99 624.803 li
299.99 602.783 li
294.16 602.783 li
cp
@
299.99 624.803 mo
305.82 624.803 li
305.82 602.783 li
299.99 602.783 li
cp
@
305.82 624.803 mo
311.65 624.803 li
311.65 612.793 li
305.82 612.793 li
cp
@
311.65 624.803 mo
317.48 624.803 li
317.48 612.793 li
311.65 612.793 li
cp
@
317.48 624.803 mo
323.31 624.803 li
323.31 620.803 li
317.48 620.803 li
cp
@
323.32 624.803 mo
329.15 624.803 li
329.15 618.793 li
323.32 618.793 li
cp
@
329.15 624.803 mo
334.98 624.803 li
334.98 618.793 li
329.15 618.793 li
cp
@
334.98 624.803 mo
340.81 624.803 li
340.81 622.803 li
334.98 622.803 li
cp
@
340.81 624.803 mo
346.64 624.803 li
346.64 620.803 li
340.81 620.803 li
cp
@
346.64 624.803 mo
352.47 624.803 li
352.47 620.803 li
346.64 620.803 li
cp
@
352.47 624.803 mo
358.3 624.803 li
352.47 624.803 li
cp
@
358.3 624.803 mo
364.13 624.803 li
364.13 620.803 li
358.3 620.803 li
cp
@
364.13 624.803 mo
369.96 624.803 li
369.96 622.803 li
364.13 622.803 li
cp
@
369.97 624.803 mo
375.8 624.803 li
375.8 622.803 li
369.97 622.803 li
cp
@
375.8 624.803 mo
381.63 624.803 li
375.8 624.803 li
cp
@
381.63 624.803 mo
387.46 624.803 li
381.63 624.803 li
cp
@
387.46 624.803 mo
393.29 624.803 li
387.46 624.803 li
cp
@
393.29 624.803 mo
399.12 624.803 li
393.29 624.803 li
cp
@
399.12 624.803 mo
404.95 624.803 li
399.12 624.803 li
cp
@
404.95 624.803 mo
410.78 624.803 li
404.95 624.803 li
cp
@
410.79 624.803 mo
416.62 624.803 li
410.79 624.803 li
cp
@
416.62 624.803 mo
422.45 624.803 li
416.62 624.803 li
cp
@
422.45 624.803 mo
428.28 624.803 li
422.45 624.803 li
cp
@
428.28 624.803 mo
434.11 624.803 li
428.28 624.803 li
cp
@
434.11 624.803 mo
439.94 624.803 li
434.11 624.803 li
cp
@
439.94 624.803 mo
445.77 624.803 li
439.94 624.803 li
cp
@
445.77 624.803 mo
451.6 624.803 li
445.77 624.803 li
cp
@
451.6 624.803 mo
457.43 624.803 li
451.6 624.803 li
cp
@
457.44 624.803 mo
463.27 624.803 li
457.44 624.803 li
cp
@
463.27 624.803 mo
469.1 624.803 li
463.27 624.803 li
cp
@
469.1 624.803 mo
474.93 624.803 li
469.1 624.803 li
cp
@
474.93 624.803 mo
480.76 624.803 li
474.93 624.803 li
cp
@
480.76 624.803 mo
486.59 624.803 li
480.76 624.803 li
cp
@
486.59 624.803 mo
492.42 624.803 li
486.59 624.803 li
cp
@
492.42 624.803 mo
498.25 624.803 li
492.42 624.803 li
cp
@
498.26 624.803 mo
504.09 624.803 li
498.26 624.803 li
cp
@
504.09 624.803 mo
509.92 624.803 li
504.09 624.803 li
cp
@
509.92 624.803 mo
515.75 624.803 li
509.92 624.803 li
cp
@
515.75 624.803 mo
521.58 624.803 li
515.75 624.803 li
cp
@
521.58 624.803 mo
527.41 624.803 li
521.58 624.803 li
cp
@
527.41 624.803 mo
533.24 624.803 li
527.41 624.803 li
cp
@
533.24 624.803 mo
539.07 624.803 li
533.24 624.803 li
cp
@
539.07 624.803 mo
544.9 624.803 li
539.07 624.803 li
cp
@
544.91 624.803 mo
550.74 624.803 li
544.91 624.803 li
cp
@
550.74 624.803 mo
556.57 624.803 li
550.74 624.803 li
cp
@
556.57 624.803 mo
562.4 624.803 li
562.4 622.803 li
556.57 622.803 li
cp
@
gsave
59.04 649.233 mo
581.76 649.233 li
581.76 -10.287 li
59.04 -10.287 li
cp
clp
-4.73 624.803 mo
-4.73 623.323 -3.52 622.103 -2.03 622.103 cv
-.55 622.103 .67 623.323 .67 624.803 cv
.67 626.293 -.55 627.503 -2.03 627.503 cv
-3.52 627.503 -4.73 626.293 -4.73 624.803 cv
0 .993988 1 0 cmyk
@
-3.56 624.803 mo
-3.56 623.323 -2.35 622.103 -.86 622.103 cv
.62 622.103 1.84 623.323 1.84 624.803 cv
1.84 626.293 .62 627.503 -.86 627.503 cv
-2.35 627.503 -3.56 626.293 -3.56 624.803 cv
@
-2.39 624.803 mo
-2.39 623.323 -1.18 622.103 .31 622.103 cv
1.79 622.103 3.01 623.323 3.01 624.803 cv
3.01 626.293 1.79 627.503 .31 627.503 cv
-1.18 627.503 -2.39 626.293 -2.39 624.803 cv
@
-1.22 624.803 mo
-1.22 623.323 -.00999999 622.103 1.48 622.103 cv
2.96 622.103 4.18 623.323 4.18 624.803 cv
4.18 626.293 2.96 627.503 1.48 627.503 cv
-.00999999 627.503 -1.22 626.293 -1.22 624.803 cv
@
-.05 624.803 mo
-.05 623.323 1.17 622.103 2.65 622.103 cv
4.14 622.103 5.35 623.323 5.35 624.803 cv
5.35 626.293 4.14 627.503 2.65 627.503 cv
1.17 627.503 -.05 626.293 -.05 624.803 cv
@
1.12 624.803 mo
1.12 623.323 2.34 622.103 3.82 622.103 cv
5.31 622.103 6.52 623.323 6.52 624.803 cv
6.52 626.293 5.31 627.503 3.82 627.503 cv
2.34 627.503 1.12 626.293 1.12 624.803 cv
@
2.29 624.803 mo
2.29 623.323 3.51 622.103 4.99 622.103 cv
6.48 622.103 7.69 623.323 7.69 624.803 cv
7.69 626.293 6.48 627.503 4.99 627.503 cv
3.51 627.503 2.29 626.293 2.29 624.803 cv
@
3.46 624.803 mo
3.46 623.323 4.68 622.103 6.16 622.103 cv
7.65 622.103 8.86 623.323 8.86 624.803 cv
8.86 626.293 7.65 627.503 6.16 627.503 cv
4.68 627.503 3.46 626.293 3.46 624.803 cv
@
4.63 624.803 mo
4.63 623.323 5.85 622.103 7.33 622.103 cv
8.82 622.103 10.03 623.323 10.03 624.803 cv
10.03 626.293 8.82 627.503 7.33 627.503 cv
5.85 627.503 4.63 626.293 4.63 624.803 cv
@
5.81 624.803 mo
5.81 623.323 7.02 622.103 8.51 622.103 cv
9.99 622.103 11.21 623.323 11.21 624.803 cv
11.21 626.293 9.99 627.503 8.51 627.503 cv
7.02 627.503 5.81 626.293 5.81 624.803 cv
@
6.98 624.803 mo
6.98 623.323 8.19 622.103 9.68 622.103 cv
11.16 622.103 12.38 623.323 12.38 624.803 cv
12.38 626.293 11.16 627.503 9.68 627.503 cv
8.19 627.503 6.98 626.293 6.98 624.803 cv
@
8.15 624.803 mo
8.15 623.323 9.36 622.103 10.85 622.103 cv
12.33 622.103 13.55 623.323 13.55 624.803 cv
13.55 626.293 12.33 627.503 10.85 627.503 cv
9.36 627.503 8.15 626.293 8.15 624.803 cv
@
9.32 624.803 mo
9.32 623.323 10.53 622.103 12.02 622.103 cv
13.5 622.103 14.72 623.323 14.72 624.803 cv
14.72 626.293 13.5 627.503 12.02 627.503 cv
10.53 627.503 9.32 626.293 9.32 624.803 cv
@
10.49 624.803 mo
10.49 623.323 11.7 622.103 13.19 622.103 cv
14.67 622.103 15.89 623.323 15.89 624.803 cv
15.89 626.293 14.67 627.503 13.19 627.503 cv
11.7 627.503 10.49 626.293 10.49 624.803 cv
@
11.66 624.803 mo
11.66 623.323 12.88 622.103 14.36 622.103 cv
15.85 622.103 17.06 623.323 17.06 624.803 cv
17.06 626.293 15.85 627.503 14.36 627.503 cv
12.88 627.503 11.66 626.293 11.66 624.803 cv
@
12.83 624.803 mo
12.83 623.323 14.05 622.103 15.53 622.103 cv
17.02 622.103 18.23 623.323 18.23 624.803 cv
18.23 626.293 17.02 627.503 15.53 627.503 cv
14.05 627.503 12.83 626.293 12.83 624.803 cv
@
14 624.803 mo
14 623.323 15.22 622.103 16.7 622.103 cv
18.19 622.103 19.4 623.323 19.4 624.803 cv
19.4 626.293 18.19 627.503 16.7 627.503 cv
15.22 627.503 14 626.293 14 624.803 cv
@
15.17 624.803 mo
15.17 623.323 16.39 622.103 17.87 622.103 cv
19.36 622.103 20.57 623.323 20.57 624.803 cv
20.57 626.293 19.36 627.503 17.87 627.503 cv
16.39 627.503 15.17 626.293 15.17 624.803 cv
@
16.34 624.803 mo
16.34 623.323 17.56 622.103 19.04 622.103 cv
20.53 622.103 21.74 623.323 21.74 624.803 cv
21.74 626.293 20.53 627.503 19.04 627.503 cv
17.56 627.503 16.34 626.293 16.34 624.803 cv
@
17.52 624.803 mo
17.52 623.323 18.73 622.103 20.22 622.103 cv
21.7 622.103 22.92 623.323 22.92 624.803 cv
22.92 626.293 21.7 627.503 20.22 627.503 cv
18.73 627.503 17.52 626.293 17.52 624.803 cv
@
18.69 624.803 mo
18.69 623.323 19.9 622.103 21.39 622.103 cv
22.87 622.103 24.09 623.323 24.09 624.803 cv
24.09 626.293 22.87 627.503 21.39 627.503 cv
19.9 627.503 18.69 626.293 18.69 624.803 cv
@
19.86 624.803 mo
19.86 623.323 21.07 622.103 22.56 622.103 cv
24.04 622.103 25.26 623.323 25.26 624.803 cv
25.26 626.293 24.04 627.503 22.56 627.503 cv
21.07 627.503 19.86 626.293 19.86 624.803 cv
@
21.03 624.803 mo
21.03 623.323 22.24 622.103 23.73 622.103 cv
25.21 622.103 26.43 623.323 26.43 624.803 cv
26.43 626.293 25.21 627.503 23.73 627.503 cv
22.24 627.503 21.03 626.293 21.03 624.803 cv
@
22.2 624.803 mo
22.2 623.323 23.41 622.103 24.9 622.103 cv
26.38 622.103 27.6 623.323 27.6 624.803 cv
27.6 626.293 26.38 627.503 24.9 627.503 cv
23.41 627.503 22.2 626.293 22.2 624.803 cv
@
23.37 624.803 mo
23.37 623.323 24.59 622.103 26.07 622.103 cv
27.56 622.103 28.77 623.323 28.77 624.803 cv
28.77 626.293 27.56 627.503 26.07 627.503 cv
24.59 627.503 23.37 626.293 23.37 624.803 cv
@
24.54 624.803 mo
24.54 623.323 25.76 622.103 27.24 622.103 cv
28.73 622.103 29.94 623.323 29.94 624.803 cv
29.94 626.293 28.73 627.503 27.24 627.503 cv
25.76 627.503 24.54 626.293 24.54 624.803 cv
@
25.71 624.803 mo
25.71 623.323 26.93 622.103 28.41 622.103 cv
29.9 622.103 31.11 623.323 31.11 624.803 cv
31.11 626.293 29.9 627.503 28.41 627.503 cv
26.93 627.503 25.71 626.293 25.71 624.803 cv
@
26.88 624.803 mo
26.88 623.323 28.1 622.103 29.58 622.103 cv
31.07 622.103 32.28 623.323 32.28 624.803 cv
32.28 626.293 31.07 627.503 29.58 627.503 cv
28.1 627.503 26.88 626.293 26.88 624.803 cv
@
28.05 624.803 mo
28.05 623.323 29.27 622.103 30.75 622.103 cv
32.24 622.103 33.45 623.323 33.45 624.803 cv
33.45 626.293 32.24 627.503 30.75 627.503 cv
29.27 627.503 28.05 626.293 28.05 624.803 cv
@
29.23 624.803 mo
29.23 623.323 30.44 622.103 31.93 622.103 cv
33.41 622.103 34.63 623.323 34.63 624.803 cv
34.63 626.293 33.41 627.503 31.93 627.503 cv
30.44 627.503 29.23 626.293 29.23 624.803 cv
@
30.4 624.803 mo
30.4 623.323 31.61 622.103 33.1 622.103 cv
34.58 622.103 35.8 623.323 35.8 624.803 cv
35.8 626.293 34.58 627.503 33.1 627.503 cv
31.61 627.503 30.4 626.293 30.4 624.803 cv
@
31.57 624.803 mo
31.57 623.323 32.78 622.103 34.27 622.103 cv
35.75 622.103 36.97 623.323 36.97 624.803 cv
36.97 626.293 35.75 627.503 34.27 627.503 cv
32.78 627.503 31.57 626.293 31.57 624.803 cv
@
32.74 624.803 mo
32.74 623.323 33.95 622.103 35.44 622.103 cv
36.92 622.103 38.14 623.323 38.14 624.803 cv
38.14 626.293 36.92 627.503 35.44 627.503 cv
33.95 627.503 32.74 626.293 32.74 624.803 cv
@
33.91 624.803 mo
33.91 623.323 35.12 622.103 36.61 622.103 cv
38.09 622.103 39.31 623.323 39.31 624.803 cv
39.31 626.293 38.09 627.503 36.61 627.503 cv
35.12 627.503 33.91 626.293 33.91 624.803 cv
@
35.08 624.803 mo
35.08 623.323 36.3 622.103 37.78 622.103 cv
39.27 622.103 40.48 623.323 40.48 624.803 cv
40.48 626.293 39.27 627.503 37.78 627.503 cv
36.3 627.503 35.08 626.293 35.08 624.803 cv
@
36.25 624.803 mo
36.25 623.323 37.47 622.103 38.95 622.103 cv
40.44 622.103 41.65 623.323 41.65 624.803 cv
41.65 626.293 40.44 627.503 38.95 627.503 cv
37.47 627.503 36.25 626.293 36.25 624.803 cv
@
37.42 624.803 mo
37.42 623.323 38.64 622.103 40.12 622.103 cv
41.61 622.103 42.82 623.323 42.82 624.803 cv
42.82 626.293 41.61 627.503 40.12 627.503 cv
38.64 627.503 37.42 626.293 37.42 624.803 cv
@
38.59 624.803 mo
38.59 623.323 39.81 622.103 41.29 622.103 cv
42.78 622.103 43.99 623.323 43.99 624.803 cv
43.99 626.293 42.78 627.503 41.29 627.503 cv
39.81 627.503 38.59 626.293 38.59 624.803 cv
@
39.76 624.803 mo
39.76 623.323 40.98 622.103 42.46 622.103 cv
43.95 622.103 45.16 623.323 45.16 624.803 cv
45.16 626.293 43.95 627.503 42.46 627.503 cv
40.98 627.503 39.76 626.293 39.76 624.803 cv
@
40.94 624.803 mo
40.94 623.323 42.15 622.103 43.64 622.103 cv
45.12 622.103 46.34 623.323 46.34 624.803 cv
46.34 626.293 45.12 627.503 43.64 627.503 cv
42.15 627.503 40.94 626.293 40.94 624.803 cv
@
42.11 624.803 mo
42.11 623.323 43.32 622.103 44.81 622.103 cv
46.29 622.103 47.51 623.323 47.51 624.803 cv
47.51 626.293 46.29 627.503 44.81 627.503 cv
43.32 627.503 42.11 626.293 42.11 624.803 cv
@
43.28 624.803 mo
43.28 623.313 44.49 622.103 45.98 622.103 cv
47.46 622.103 48.68 623.313 48.68 624.803 cv
48.68 626.283 47.46 627.503 45.98 627.503 cv
44.49 627.503 43.28 626.283 43.28 624.803 cv
@
44.45 624.803 mo
44.45 623.313 45.66 622.103 47.15 622.103 cv
48.63 622.103 49.85 623.313 49.85 624.803 cv
49.85 626.283 48.63 627.503 47.15 627.503 cv
45.66 627.503 44.45 626.283 44.45 624.803 cv
@
45.62 624.803 mo
45.62 623.313 46.84 622.103 48.32 622.103 cv
49.81 622.103 51.02 623.313 51.02 624.803 cv
51.02 626.283 49.81 627.503 48.32 627.503 cv
46.84 627.503 45.62 626.283 45.62 624.803 cv
@
46.79 624.793 mo
46.79 623.313 48.01 622.093 49.49 622.093 cv
50.98 622.093 52.19 623.313 52.19 624.793 cv
52.19 626.283 50.98 627.493 49.49 627.493 cv
48.01 627.493 46.79 626.283 46.79 624.793 cv
@
47.96 624.793 mo
47.96 623.303 49.18 622.093 50.66 622.093 cv
52.15 622.093 53.36 623.303 53.36 624.793 cv
53.36 626.273 52.15 627.493 50.66 627.493 cv
49.18 627.493 47.96 626.273 47.96 624.793 cv
@
49.13 624.783 mo
49.13 623.303 50.35 622.083 51.83 622.083 cv
53.32 622.083 54.53 623.303 54.53 624.783 cv
54.53 626.273 53.32 627.483 51.83 627.483 cv
50.35 627.483 49.13 626.273 49.13 624.783 cv
@
50.3 624.783 mo
50.3 623.293 51.52 622.083 53 622.083 cv
54.49 622.083 55.7 623.293 55.7 624.783 cv
55.7 626.263 54.49 627.483 53 627.483 cv
51.52 627.483 50.3 626.263 50.3 624.783 cv
@
51.48 624.773 mo
51.48 623.283 52.69 622.073 54.18 622.073 cv
55.66 622.073 56.88 623.283 56.88 624.773 cv
56.88 626.253 55.66 627.473 54.18 627.473 cv
52.69 627.473 51.48 626.253 51.48 624.773 cv
@
52.65 624.753 mo
52.65 623.273 53.86 622.053 55.35 622.053 cv
56.83 622.053 58.05 623.273 58.05 624.753 cv
58.05 626.243 56.83 627.453 55.35 627.453 cv
53.86 627.453 52.65 626.243 52.65 624.753 cv
@
53.82 624.743 mo
53.82 623.253 55.03 622.043 56.52 622.043 cv
58 622.043 59.22 623.253 59.22 624.743 cv
59.22 626.223 58 627.443 56.52 627.443 cv
55.03 627.443 53.82 626.223 53.82 624.743 cv
@
54.99 624.723 mo
54.99 623.233 56.2 622.023 57.69 622.023 cv
59.17 622.023 60.39 623.233 60.39 624.723 cv
60.39 626.203 59.17 627.423 57.69 627.423 cv
56.2 627.423 54.99 626.203 54.99 624.723 cv
@
56.16 624.693 mo
56.16 623.213 57.37 621.993 58.86 621.993 cv
60.34 621.993 61.56 623.213 61.56 624.693 cv
61.56 626.183 60.34 627.393 58.86 627.393 cv
57.37 627.393 56.16 626.183 56.16 624.693 cv
@
57.33 624.663 mo
57.33 623.173 58.55 621.963 60.03 621.963 cv
61.52 621.963 62.73 623.173 62.73 624.663 cv
62.73 626.143 61.52 627.363 60.03 627.363 cv
58.55 627.363 57.33 626.143 57.33 624.663 cv
@
58.5 624.623 mo
58.5 623.133 59.72 621.923 61.2 621.923 cv
62.69 621.923 63.9 623.133 63.9 624.623 cv
63.9 626.103 62.69 627.323 61.2 627.323 cv
59.72 627.323 58.5 626.103 58.5 624.623 cv
@
59.67 624.573 mo
59.67 623.083 60.89 621.873 62.37 621.873 cv
63.86 621.873 65.07 623.083 65.07 624.573 cv
65.07 626.053 63.86 627.273 62.37 627.273 cv
60.89 627.273 59.67 626.053 59.67 624.573 cv
@
60.84 624.503 mo
60.84 623.023 62.06 621.803 63.54 621.803 cv
65.03 621.803 66.24 623.023 66.24 624.503 cv
66.24 625.993 65.03 627.203 63.54 627.203 cv
62.06 627.203 60.84 625.993 60.84 624.503 cv
@
62.01 624.423 mo
62.01 622.943 63.23 621.723 64.71 621.723 cv
66.2 621.723 67.41 622.943 67.41 624.423 cv
67.41 625.913 66.2 627.123 64.71 627.123 cv
63.23 627.123 62.01 625.913 62.01 624.423 cv
@
63.19 624.333 mo
63.19 622.843 64.4 621.633 65.89 621.633 cv
67.37 621.633 68.59 622.843 68.59 624.333 cv
68.59 625.813 67.37 627.033 65.89 627.033 cv
64.4 627.033 63.19 625.813 63.19 624.333 cv
@
64.36 624.213 mo
64.36 622.723 65.57 621.513 67.06 621.513 cv
68.54 621.513 69.76 622.723 69.76 624.213 cv
69.76 625.693 68.54 626.913 67.06 626.913 cv
65.57 626.913 64.36 625.693 64.36 624.213 cv
@
65.53 624.073 mo
65.53 622.583 66.74 621.373 68.23 621.373 cv
69.71 621.373 70.93 622.583 70.93 624.073 cv
70.93 625.553 69.71 626.773 68.23 626.773 cv
66.74 626.773 65.53 625.553 65.53 624.073 cv
@
66.7 623.903 mo
66.7 622.413 67.91 621.203 69.4 621.203 cv
70.88 621.203 72.1 622.413 72.1 623.903 cv
72.1 625.383 70.88 626.603 69.4 626.603 cv
67.91 626.603 66.7 625.383 66.7 623.903 cv
@
67.87 623.693 mo
67.87 622.213 69.08 620.993 70.57 620.993 cv
72.05 620.993 73.27 622.213 73.27 623.693 cv
73.27 625.183 72.05 626.393 70.57 626.393 cv
69.08 626.393 67.87 625.183 67.87 623.693 cv
@
69.04 623.453 mo
69.04 621.973 70.26 620.753 71.74 620.753 cv
73.23 620.753 74.44 621.973 74.44 623.453 cv
74.44 624.943 73.23 626.153 71.74 626.153 cv
70.26 626.153 69.04 624.943 69.04 623.453 cv
@
70.21 623.163 mo
70.21 621.683 71.43 620.463 72.91 620.463 cv
74.4 620.463 75.61 621.683 75.61 623.163 cv
75.61 624.653 74.4 625.863 72.91 625.863 cv
71.43 625.863 70.21 624.653 70.21 623.163 cv
@
71.38 622.833 mo
71.38 621.343 72.6 620.133 74.08 620.133 cv
75.57 620.133 76.78 621.343 76.78 622.833 cv
76.78 624.313 75.57 625.533 74.08 625.533 cv
72.6 625.533 71.38 624.313 71.38 622.833 cv
@
72.55 622.443 mo
72.55 620.953 73.77 619.743 75.25 619.743 cv
76.74 619.743 77.95 620.953 77.95 622.443 cv
77.95 623.923 76.74 625.143 75.25 625.143 cv
73.77 625.143 72.55 623.923 72.55 622.443 cv
@
73.72 621.983 mo
73.72 620.493 74.94 619.283 76.42 619.283 cv
77.91 619.283 79.12 620.493 79.12 621.983 cv
79.12 623.463 77.91 624.683 76.42 624.683 cv
74.94 624.683 73.72 623.463 73.72 621.983 cv
@
74.9 621.453 mo
74.9 619.963 76.11 618.753 77.6 618.753 cv
79.08 618.753 80.3 619.963 80.3 621.453 cv
80.3 622.933 79.08 624.153 77.6 624.153 cv
76.11 624.153 74.9 622.933 74.9 621.453 cv
@
76.07 620.843 mo
76.07 619.353 77.28 618.143 78.77 618.143 cv
80.25 618.143 81.47 619.353 81.47 620.843 cv
81.47 622.323 80.25 623.543 78.77 623.543 cv
77.28 623.543 76.07 622.323 76.07 620.843 cv
@
77.24 620.133 mo
77.24 618.653 78.45 617.433 79.94 617.433 cv
81.42 617.433 82.64 618.653 82.64 620.133 cv
82.64 621.623 81.42 622.833 79.94 622.833 cv
78.45 622.833 77.24 621.623 77.24 620.133 cv
@
78.41 619.333 mo
78.41 617.853 79.62 616.633 81.11 616.633 cv
82.59 616.633 83.81 617.853 83.81 619.333 cv
83.81 620.823 82.59 622.033 81.11 622.033 cv
79.62 622.033 78.41 620.823 78.41 619.333 cv
@
79.58 618.423 mo
79.58 616.943 80.79 615.723 82.28 615.723 cv
83.76 615.723 84.98 616.943 84.98 618.423 cv
84.98 619.913 83.76 621.123 82.28 621.123 cv
80.79 621.123 79.58 619.913 79.58 618.423 cv
@
80.75 617.393 mo
80.75 615.903 81.97 614.693 83.45 614.693 cv
84.94 614.693 86.15 615.903 86.15 617.393 cv
86.15 618.873 84.94 620.093 83.45 620.093 cv
81.97 620.093 80.75 618.873 80.75 617.393 cv
@
81.92 616.223 mo
81.92 614.733 83.14 613.523 84.62 613.523 cv
86.11 613.523 87.32 614.733 87.32 616.223 cv
87.32 617.703 86.11 618.923 84.62 618.923 cv
83.14 618.923 81.92 617.703 81.92 616.223 cv
@
83.09 614.913 mo
83.09 613.423 84.31 612.213 85.79 612.213 cv
87.28 612.213 88.49 613.423 88.49 614.913 cv
88.49 616.393 87.28 617.613 85.79 617.613 cv
84.31 617.613 83.09 616.393 83.09 614.913 cv
@
84.26 613.443 mo
84.26 611.953 85.48 610.743 86.96 610.743 cv
88.45 610.743 89.66 611.953 89.66 613.443 cv
89.66 614.923 88.45 616.143 86.96 616.143 cv
85.48 616.143 84.26 614.923 84.26 613.443 cv
@
85.43 611.793 mo
85.43 610.313 86.65 609.093 88.13 609.093 cv
89.62 609.093 90.83 610.313 90.83 611.793 cv
90.83 613.283 89.62 614.493 88.13 614.493 cv
86.65 614.493 85.43 613.283 85.43 611.793 cv
@
86.61 609.973 mo
86.61 608.483 87.82 607.273 89.31 607.273 cv
90.79 607.273 92.01 608.483 92.01 609.973 cv
92.01 611.453 90.79 612.673 89.31 612.673 cv
87.82 612.673 86.61 611.453 86.61 609.973 cv
@
87.78 607.953 mo
87.78 606.463 88.99 605.253 90.48 605.253 cv
91.96 605.253 93.18 606.463 93.18 607.953 cv
93.18 609.433 91.96 610.653 90.48 610.653 cv
88.99 610.653 87.78 609.433 87.78 607.953 cv
@
88.95 605.723 mo
88.95 604.233 90.16 603.023 91.65 603.023 cv
93.13 603.023 94.35 604.233 94.35 605.723 cv
94.35 607.203 93.13 608.423 91.65 608.423 cv
90.16 608.423 88.95 607.203 88.95 605.723 cv
@
90.12 603.263 mo
90.12 601.773 91.33 600.563 92.82 600.563 cv
94.3 600.563 95.52 601.773 95.52 603.263 cv
95.52 604.743 94.3 605.963 92.82 605.963 cv
91.33 605.963 90.12 604.743 90.12 603.263 cv
@
91.29 600.563 mo
91.29 599.083 92.51 597.863 93.99 597.863 cv
95.48 597.863 96.69 599.083 96.69 600.563 cv
96.69 602.053 95.48 603.263 93.99 603.263 cv
92.51 603.263 91.29 602.053 91.29 600.563 cv
@
92.46 597.623 mo
92.46 596.133 93.68 594.923 95.16 594.923 cv
96.65 594.923 97.86 596.133 97.86 597.623 cv
97.86 599.103 96.65 600.323 95.16 600.323 cv
93.68 600.323 92.46 599.103 92.46 597.623 cv
@
93.63 594.403 mo
93.63 592.923 94.85 591.703 96.33 591.703 cv
97.82 591.703 99.03 592.923 99.03 594.403 cv
99.03 595.893 97.82 597.103 96.33 597.103 cv
94.85 597.103 93.63 595.893 93.63 594.403 cv
@
94.8 590.913 mo
94.8 589.433 96.02 588.213 97.5 588.213 cv
98.99 588.213 100.2 589.433 100.2 590.913 cv
100.2 592.403 98.99 593.613 97.5 593.613 cv
96.02 593.613 94.8 592.403 94.8 590.913 cv
@
95.97 587.133 mo
95.97 585.653 97.19 584.433 98.67 584.433 cv
100.16 584.433 101.37 585.653 101.37 587.133 cv
101.37 588.623 100.16 589.833 98.67 589.833 cv
97.19 589.833 95.97 588.623 95.97 587.133 cv
@
97.15 583.053 mo
97.15 581.563 98.36 580.353 99.85 580.353 cv
101.33 580.353 102.55 581.563 102.55 583.053 cv
102.55 584.533 101.33 585.753 99.85 585.753 cv
98.36 585.753 97.15 584.533 97.15 583.053 cv
@
98.32 578.653 mo
98.32 577.163 99.53 575.953 101.02 575.953 cv
102.5 575.953 103.72 577.163 103.72 578.653 cv
103.72 580.133 102.5 581.353 101.02 581.353 cv
99.53 581.353 98.32 580.133 98.32 578.653 cv
@
99.49 573.923 mo
99.49 572.443 100.7 571.223 102.19 571.223 cv
103.67 571.223 104.89 572.443 104.89 573.923 cv
104.89 575.413 103.67 576.623 102.19 576.623 cv
100.7 576.623 99.49 575.413 99.49 573.923 cv
@
100.66 568.863 mo
100.66 567.383 101.87 566.163 103.36 566.163 cv
104.84 566.163 106.06 567.383 106.06 568.863 cv
106.06 570.353 104.84 571.563 103.36 571.563 cv
101.87 571.563 100.66 570.353 100.66 568.863 cv
@
101.83 563.453 mo
101.83 561.973 103.04 560.753 104.53 560.753 cv
106.01 560.753 107.23 561.973 107.23 563.453 cv
107.23 564.943 106.01 566.153 104.53 566.153 cv
103.04 566.153 101.83 564.943 101.83 563.453 cv
@
103 557.693 mo
103 556.213 104.22 554.993 105.7 554.993 cv
107.19 554.993 108.4 556.213 108.4 557.693 cv
108.4 559.183 107.19 560.393 105.7 560.393 cv
104.22 560.393 103 559.183 103 557.693 cv
@
104.17 551.583 mo
104.17 550.093 105.39 548.883 106.87 548.883 cv
108.36 548.883 109.57 550.093 109.57 551.583 cv
109.57 553.063 108.36 554.283 106.87 554.283 cv
105.39 554.283 104.17 553.063 104.17 551.583 cv
@
105.34 545.093 mo
105.34 543.603 106.56 542.393 108.04 542.393 cv
109.53 542.393 110.74 543.603 110.74 545.093 cv
110.74 546.573 109.53 547.793 108.04 547.793 cv
106.56 547.793 105.34 546.573 105.34 545.093 cv
@
106.51 538.233 mo
106.51 536.753 107.73 535.533 109.21 535.533 cv
110.7 535.533 111.91 536.753 111.91 538.233 cv
111.91 539.723 110.7 540.933 109.21 540.933 cv
107.73 540.933 106.51 539.723 106.51 538.233 cv
@
107.68 531.003 mo
107.68 529.523 108.9 528.303 110.38 528.303 cv
111.87 528.303 113.08 529.523 113.08 531.003 cv
113.08 532.493 111.87 533.703 110.38 533.703 cv
108.9 533.703 107.68 532.493 107.68 531.003 cv
@
108.86 523.403 mo
108.86 521.913 110.07 520.703 111.56 520.703 cv
113.04 520.703 114.26 521.913 114.26 523.403 cv
114.26 524.883 113.04 526.103 111.56 526.103 cv
110.07 526.103 108.86 524.883 108.86 523.403 cv
@
110.03 515.423 mo
110.03 513.933 111.24 512.723 112.73 512.723 cv
114.21 512.723 115.43 513.933 115.43 515.423 cv
115.43 516.903 114.21 518.123 112.73 518.123 cv
111.24 518.123 110.03 516.903 110.03 515.423 cv
@
111.2 507.073 mo
111.2 505.583 112.41 504.373 113.9 504.373 cv
115.38 504.373 116.6 505.583 116.6 507.073 cv
116.6 508.553 115.38 509.773 113.9 509.773 cv
112.41 509.773 111.2 508.553 111.2 507.073 cv
@
112.37 498.343 mo
112.37 496.863 113.58 495.643 115.07 495.643 cv
116.55 495.643 117.77 496.863 117.77 498.343 cv
117.77 499.833 116.55 501.043 115.07 501.043 cv
113.58 501.043 112.37 499.833 112.37 498.343 cv
@
113.54 489.253 mo
113.54 487.773 114.75 486.553 116.24 486.553 cv
117.72 486.553 118.94 487.773 118.94 489.253 cv
118.94 490.743 117.72 491.953 116.24 491.953 cv
114.75 491.953 113.54 490.743 113.54 489.253 cv
@
114.71 479.803 mo
114.71 478.323 115.93 477.103 117.41 477.103 cv
118.9 477.103 120.11 478.323 120.11 479.803 cv
120.11 481.293 118.9 482.503 117.41 482.503 cv
115.93 482.503 114.71 481.293 114.71 479.803 cv
@
115.88 470.003 mo
115.88 468.523 117.1 467.303 118.58 467.303 cv
120.07 467.303 121.28 468.523 121.28 470.003 cv
121.28 471.493 120.07 472.703 118.58 472.703 cv
117.1 472.703 115.88 471.493 115.88 470.003 cv
@
117.05 459.863 mo
117.05 458.383 118.27 457.163 119.75 457.163 cv
121.24 457.163 122.45 458.383 122.45 459.863 cv
122.45 461.353 121.24 462.563 119.75 462.563 cv
118.27 462.563 117.05 461.353 117.05 459.863 cv
@
118.22 449.393 mo
118.22 447.913 119.44 446.693 120.92 446.693 cv
122.41 446.693 123.62 447.913 123.62 449.393 cv
123.62 450.883 122.41 452.093 120.92 452.093 cv
119.44 452.093 118.22 450.883 118.22 449.393 cv
@
119.39 438.613 mo
119.39 437.123 120.61 435.913 122.09 435.913 cv
123.58 435.913 124.79 437.123 124.79 438.613 cv
124.79 440.093 123.58 441.313 122.09 441.313 cv
120.61 441.313 119.39 440.093 119.39 438.613 cv
@
120.57 427.523 mo
120.57 426.043 121.78 424.823 123.27 424.823 cv
124.75 424.823 125.97 426.043 125.97 427.523 cv
125.97 429.013 124.75 430.223 123.27 430.223 cv
121.78 430.223 120.57 429.013 120.57 427.523 cv
@
121.74 416.153 mo
121.74 414.663 122.95 413.453 124.44 413.453 cv
125.92 413.453 127.14 414.663 127.14 416.153 cv
127.14 417.633 125.92 418.853 124.44 418.853 cv
122.95 418.853 121.74 417.633 121.74 416.153 cv
@
122.91 404.513 mo
122.91 403.033 124.12 401.813 125.61 401.813 cv
127.09 401.813 128.31 403.033 128.31 404.513 cv
128.31 406.003 127.09 407.213 125.61 407.213 cv
124.12 407.213 122.91 406.003 122.91 404.513 cv
@
124.08 392.633 mo
124.08 391.153 125.29 389.933 126.78 389.933 cv
128.26 389.933 129.48 391.153 129.48 392.633 cv
129.48 394.123 128.26 395.333 126.78 395.333 cv
125.29 395.333 124.08 394.123 124.08 392.633 cv
@
125.25 380.523 mo
125.25 379.043 126.46 377.823 127.95 377.823 cv
129.43 377.823 130.65 379.043 130.65 380.523 cv
130.65 382.013 129.43 383.223 127.95 383.223 cv
126.46 383.223 125.25 382.013 125.25 380.523 cv
@
126.42 368.213 mo
126.42 366.733 127.64 365.513 129.12 365.513 cv
130.61 365.513 131.82 366.733 131.82 368.213 cv
131.82 369.703 130.61 370.913 129.12 370.913 cv
127.64 370.913 126.42 369.703 126.42 368.213 cv
@
127.59 355.733 mo
127.59 354.243 128.81 353.033 130.29 353.033 cv
131.78 353.033 132.99 354.243 132.99 355.733 cv
132.99 357.213 131.78 358.433 130.29 358.433 cv
128.81 358.433 127.59 357.213 127.59 355.733 cv
@
128.76 343.083 mo
128.76 341.603 129.98 340.383 131.46 340.383 cv
132.95 340.383 134.16 341.603 134.16 343.083 cv
134.16 344.573 132.95 345.783 131.46 345.783 cv
129.98 345.783 128.76 344.573 128.76 343.083 cv
@
129.93 330.323 mo
129.93 328.833 131.15 327.623 132.63 327.623 cv
134.12 327.623 135.33 328.833 135.33 330.323 cv
135.33 331.803 134.12 333.023 132.63 333.023 cv
131.15 333.023 129.93 331.803 129.93 330.323 cv
@
131.1 317.453 mo
131.1 315.963 132.32 314.753 133.8 314.753 cv
135.29 314.753 136.5 315.963 136.5 317.453 cv
136.5 318.933 135.29 320.153 133.8 320.153 cv
132.32 320.153 131.1 318.933 131.1 317.453 cv
@
132.28 304.513 mo
132.28 303.023 133.49 301.813 134.98 301.813 cv
136.46 301.813 137.68 303.023 137.68 304.513 cv
137.68 305.993 136.46 307.213 134.98 307.213 cv
133.49 307.213 132.28 305.993 132.28 304.513 cv
@
133.45 291.523 mo
133.45 290.043 134.66 288.823 136.15 288.823 cv
137.63 288.823 138.85 290.043 138.85 291.523 cv
138.85 293.013 137.63 294.223 136.15 294.223 cv
134.66 294.223 133.45 293.013 133.45 291.523 cv
@
134.62 278.533 mo
134.62 277.043 135.83 275.833 137.32 275.833 cv
138.8 275.833 140.02 277.043 140.02 278.533 cv
140.02 280.013 138.8 281.233 137.32 281.233 cv
135.83 281.233 134.62 280.013 134.62 278.533 cv
@
135.79 265.553 mo
135.79 264.063 137 262.853 138.49 262.853 cv
139.97 262.853 141.19 264.063 141.19 265.553 cv
141.19 267.033 139.97 268.253 138.49 268.253 cv
137 268.253 135.79 267.033 135.79 265.553 cv
@
136.96 252.613 mo
136.96 251.133 138.17 249.913 139.66 249.913 cv
141.14 249.913 142.36 251.133 142.36 252.613 cv
142.36 254.103 141.14 255.313 139.66 255.313 cv
138.17 255.313 136.96 254.103 136.96 252.613 cv
@
138.13 239.753 mo
138.13 238.273 139.35 237.053 140.83 237.053 cv
142.32 237.053 143.53 238.273 143.53 239.753 cv
143.53 241.243 142.32 242.453 140.83 242.453 cv
139.35 242.453 138.13 241.243 138.13 239.753 cv
@
139.3 227.003 mo
139.3 225.523 140.52 224.303 142 224.303 cv
143.49 224.303 144.7 225.523 144.7 227.003 cv
144.7 228.493 143.49 229.703 142 229.703 cv
140.52 229.703 139.3 228.493 139.3 227.003 cv
@
140.47 214.393 mo
140.47 212.903 141.69 211.693 143.17 211.693 cv
144.66 211.693 145.87 212.903 145.87 214.393 cv
145.87 215.873 144.66 217.093 143.17 217.093 cv
141.69 217.093 140.47 215.873 140.47 214.393 cv
@
141.64 201.943 mo
141.64 200.453 142.86 199.243 144.34 199.243 cv
145.83 199.243 147.04 200.453 147.04 201.943 cv
147.04 203.423 145.83 204.643 144.34 204.643 cv
142.86 204.643 141.64 203.423 141.64 201.943 cv
@
142.82 189.693 mo
142.82 188.203 144.03 186.993 145.52 186.993 cv
147 186.993 148.22 188.203 148.22 189.693 cv
148.22 191.173 147 192.393 145.52 192.393 cv
144.03 192.393 142.82 191.173 142.82 189.693 cv
@
143.99 177.663 mo
143.99 176.183 145.2 174.963 146.69 174.963 cv
148.17 174.963 149.39 176.183 149.39 177.663 cv
149.39 179.153 148.17 180.363 146.69 180.363 cv
145.2 180.363 143.99 179.153 143.99 177.663 cv
@
145.16 165.893 mo
145.16 164.403 146.37 163.193 147.86 163.193 cv
149.34 163.193 150.56 164.403 150.56 165.893 cv
150.56 167.373 149.34 168.593 147.86 168.593 cv
146.37 168.593 145.16 167.373 145.16 165.893 cv
@
146.33 154.403 mo
146.33 152.923 147.54 151.703 149.03 151.703 cv
150.51 151.703 151.73 152.923 151.73 154.403 cv
151.73 155.893 150.51 157.103 149.03 157.103 cv
147.54 157.103 146.33 155.893 146.33 154.403 cv
@
147.5 143.223 mo
147.5 141.743 148.71 140.523 150.2 140.523 cv
151.68 140.523 152.9 141.743 152.9 143.223 cv
152.9 144.713 151.68 145.923 150.2 145.923 cv
148.71 145.923 147.5 144.713 147.5 143.223 cv
@
148.67 132.383 mo
148.67 130.893 149.89 129.683 151.37 129.683 cv
152.86 129.683 154.07 130.893 154.07 132.383 cv
154.07 133.863 152.86 135.083 151.37 135.083 cv
149.89 135.083 148.67 133.863 148.67 132.383 cv
@
149.84 121.903 mo
149.84 120.413 151.06 119.203 152.54 119.203 cv
154.03 119.203 155.24 120.413 155.24 121.903 cv
155.24 123.383 154.03 124.603 152.54 124.603 cv
151.06 124.603 149.84 123.383 149.84 121.903 cv
@
151.01 111.803 mo
151.01 110.313 152.23 109.103 153.71 109.103 cv
155.2 109.103 156.41 110.313 156.41 111.803 cv
156.41 113.283 155.2 114.503 153.71 114.503 cv
152.23 114.503 151.01 113.283 151.01 111.803 cv
@
152.18 102.113 mo
152.18 100.623 153.4 99.413 154.88 99.413 cv
156.37 99.413 157.58 100.623 157.58 102.113 cv
157.58 103.593 156.37 104.813 154.88 104.813 cv
153.4 104.813 152.18 103.593 152.18 102.113 cv
@
153.35 92.853 mo
153.35 91.363 154.57 90.153 156.05 90.153 cv
157.54 90.153 158.75 91.363 158.75 92.853 cv
158.75 94.333 157.54 95.553 156.05 95.553 cv
154.57 95.553 153.35 94.333 153.35 92.853 cv
@
154.53 84.033 mo
154.53 82.553 155.74 81.333 157.23 81.333 cv
158.71 81.333 159.93 82.553 159.93 84.033 cv
159.93 85.523 158.71 86.733 157.23 86.733 cv
155.74 86.733 154.53 85.523 154.53 84.033 cv
@
155.7 75.683 mo
155.7 74.203 156.91 72.983 158.4 72.983 cv
159.88 72.983 161.1 74.203 161.1 75.683 cv
161.1 77.173 159.88 78.383 158.4 78.383 cv
156.91 78.383 155.7 77.173 155.7 75.683 cv
@
156.87 67.823 mo
156.87 66.343 158.08 65.123 159.57 65.123 cv
161.05 65.123 162.27 66.343 162.27 67.823 cv
162.27 69.313 161.05 70.523 159.57 70.523 cv
158.08 70.523 156.87 69.313 156.87 67.823 cv
@
158.04 60.463 mo
158.04 58.973 159.25 57.763 160.74 57.763 cv
162.22 57.763 163.44 58.973 163.44 60.463 cv
163.44 61.943 162.22 63.163 160.74 63.163 cv
159.25 63.163 158.04 61.943 158.04 60.463 cv
@
159.21 53.613 mo
159.21 52.123 160.42 50.913 161.91 50.913 cv
163.39 50.913 164.61 52.123 164.61 53.613 cv
164.61 55.093 163.39 56.313 161.91 56.313 cv
160.42 56.313 159.21 55.093 159.21 53.613 cv
@
160.38 47.283 mo
160.38 45.793 161.6 44.583 163.08 44.583 cv
164.57 44.583 165.78 45.793 165.78 47.283 cv
165.78 48.763 164.57 49.983 163.08 49.983 cv
161.6 49.983 160.38 48.763 160.38 47.283 cv
@
161.55 41.493 mo
161.55 40.003 162.77 38.793 164.25 38.793 cv
165.74 38.793 166.95 40.003 166.95 41.493 cv
166.95 42.973 165.74 44.193 164.25 44.193 cv
162.77 44.193 161.55 42.973 161.55 41.493 cv
@
162.72 36.243 mo
162.72 34.763 163.94 33.543 165.42 33.543 cv
166.91 33.543 168.12 34.763 168.12 36.243 cv
168.12 37.733 166.91 38.943 165.42 38.943 cv
163.94 38.943 162.72 37.733 162.72 36.243 cv
@
163.89 31.553 mo
163.89 30.063 165.11 28.853 166.59 28.853 cv
168.08 28.853 169.29 30.063 169.29 31.553 cv
169.29 33.033 168.08 34.253 166.59 34.253 cv
165.11 34.253 163.89 33.033 163.89 31.553 cv
@
165.06 27.413 mo
165.06 25.923 166.28 24.713 167.76 24.713 cv
169.25 24.713 170.46 25.923 170.46 27.413 cv
170.46 28.893 169.25 30.113 167.76 30.113 cv
166.28 30.113 165.06 28.893 165.06 27.413 cv
@
166.24 23.8329 mo
166.24 22.343 167.45 21.133 168.94 21.133 cv
170.42 21.133 171.64 22.343 171.64 23.8329 cv
171.64 25.313 170.42 26.533 168.94 26.533 cv
167.45 26.533 166.24 25.313 166.24 23.8329 cv
@
167.41 20.813 mo
167.41 19.333 168.62 18.113 170.11 18.113 cv
171.59 18.113 172.81 19.333 172.81 20.813 cv
172.81 22.303 171.59 23.513 170.11 23.513 cv
168.62 23.513 167.41 22.303 167.41 20.813 cv
@
168.58 18.363 mo
168.58 16.883 169.79 15.663 171.28 15.663 cv
172.76 15.663 173.98 16.883 173.98 18.363 cv
173.98 19.853 172.76 21.063 171.28 21.063 cv
169.79 21.063 168.58 19.853 168.58 18.363 cv
@
169.75 16.473 mo
169.75 14.983 170.96 13.773 172.45 13.773 cv
173.93 13.773 175.15 14.983 175.15 16.473 cv
175.15 17.953 173.93 19.173 172.45 19.173 cv
170.96 19.173 169.75 17.953 169.75 16.473 cv
@
170.92 15.1429 mo
170.92 13.653 172.13 12.443 173.62 12.443 cv
175.1 12.443 176.32 13.653 176.32 15.1429 cv
176.32 16.623 175.1 17.843 173.62 17.843 cv
172.13 17.843 170.92 16.623 170.92 15.1429 cv
@
172.09 14.363 mo
172.09 12.883 173.31 11.663 174.79 11.663 cv
176.28 11.663 177.49 12.883 177.49 14.363 cv
177.49 15.853 176.28 17.063 174.79 17.063 cv
173.31 17.063 172.09 15.853 172.09 14.363 cv
@
173.26 14.1429 mo
173.26 12.653 174.48 11.443 175.96 11.443 cv
177.45 11.443 178.66 12.653 178.66 14.1429 cv
178.66 15.623 177.45 16.843 175.96 16.843 cv
174.48 16.843 173.26 15.623 173.26 14.1429 cv
@
174.43 14.453 mo
174.43 12.973 175.65 11.7531 177.13 11.7531 cv
178.62 11.7531 179.83 12.973 179.83 14.453 cv
179.83 15.9431 178.62 17.153 177.13 17.153 cv
175.65 17.153 174.43 15.9431 174.43 14.453 cv
@
175.6 15.303 mo
175.6 13.823 176.82 12.603 178.3 12.603 cv
179.79 12.603 181 13.823 181 15.303 cv
181 16.793 179.79 18.003 178.3 18.003 cv
176.82 18.003 175.6 16.793 175.6 15.303 cv
@
176.77 16.683 mo
176.77 15.203 177.99 13.983 179.47 13.983 cv
180.96 13.983 182.17 15.203 182.17 16.683 cv
182.17 18.173 180.96 19.383 179.47 19.383 cv
177.99 19.383 176.77 18.173 176.77 16.683 cv
@
177.95 18.573 mo
177.95 17.093 179.16 15.873 180.65 15.873 cv
182.13 15.873 183.35 17.093 183.35 18.573 cv
183.35 20.063 182.13 21.273 180.65 21.273 cv
179.16 21.273 177.95 20.063 177.95 18.573 cv
@
179.12 20.973 mo
179.12 19.483 180.33 18.273 181.82 18.273 cv
183.3 18.273 184.52 19.483 184.52 20.973 cv
184.52 22.453 183.3 23.673 181.82 23.673 cv
180.33 23.673 179.12 22.453 179.12 20.973 cv
@
180.29 23.853 mo
180.29 22.363 181.5 21.153 182.99 21.153 cv
184.47 21.153 185.69 22.363 185.69 23.853 cv
185.69 25.333 184.47 26.553 182.99 26.553 cv
181.5 26.553 180.29 25.333 180.29 23.853 cv
@
181.46 27.213 mo
181.46 25.723 182.67 24.513 184.16 24.513 cv
185.64 24.513 186.86 25.723 186.86 27.213 cv
186.86 28.693 185.64 29.913 184.16 29.913 cv
182.67 29.913 181.46 28.693 181.46 27.213 cv
@
182.63 31.033 mo
182.63 29.543 183.84 28.333 185.33 28.333 cv
186.81 28.333 188.03 29.543 188.03 31.033 cv
188.03 32.513 186.81 33.733 185.33 33.733 cv
183.84 33.733 182.63 32.513 182.63 31.033 cv
@
183.8 35.303 mo
183.8 33.813 185.02 32.603 186.5 32.603 cv
187.99 32.603 189.2 33.813 189.2 35.303 cv
189.2 36.783 187.99 38.003 186.5 38.003 cv
185.02 38.003 183.8 36.783 183.8 35.303 cv
@
184.97 39.993 mo
184.97 38.513 186.19 37.293 187.67 37.293 cv
189.16 37.293 190.37 38.513 190.37 39.993 cv
190.37 41.483 189.16 42.693 187.67 42.693 cv
186.19 42.693 184.97 41.483 184.97 39.993 cv
@
186.14 45.103 mo
186.14 43.623 187.36 42.403 188.84 42.403 cv
190.33 42.403 191.54 43.623 191.54 45.103 cv
191.54 46.593 190.33 47.803 188.84 47.803 cv
187.36 47.803 186.14 46.593 186.14 45.103 cv
@
187.31 50.613 mo
187.31 49.123 188.53 47.913 190.01 47.913 cv
191.5 47.913 192.71 49.123 192.71 50.613 cv
192.71 52.093 191.5 53.313 190.01 53.313 cv
188.53 53.313 187.31 52.093 187.31 50.613 cv
@
188.49 56.493 mo
188.49 55.003 189.7 53.793 191.19 53.793 cv
192.67 53.793 193.89 55.003 193.89 56.493 cv
193.89 57.973 192.67 59.193 191.19 59.193 cv
189.7 59.193 188.49 57.973 188.49 56.493 cv
@
189.66 62.733 mo
189.66 61.243 190.87 60.033 192.36 60.033 cv
193.84 60.033 195.06 61.243 195.06 62.733 cv
195.06 64.213 193.84 65.433 192.36 65.433 cv
190.87 65.433 189.66 64.213 189.66 62.733 cv
@
190.83 69.313 mo
190.83 67.823 192.04 66.613 193.53 66.613 cv
195.01 66.613 196.23 67.823 196.23 69.313 cv
196.23 70.793 195.01 72.013 193.53 72.013 cv
192.04 72.013 190.83 70.793 190.83 69.313 cv
@
192 76.213 mo
192 74.733 193.21 73.513 194.7 73.513 cv
196.18 73.513 197.4 74.733 197.4 76.213 cv
197.4 77.703 196.18 78.913 194.7 78.913 cv
193.21 78.913 192 77.703 192 76.213 cv
@
193.17 83.423 mo
193.17 81.933 194.38 80.723 195.87 80.723 cv
197.35 80.723 198.57 81.933 198.57 83.423 cv
198.57 84.903 197.35 86.123 195.87 86.123 cv
194.38 86.123 193.17 84.903 193.17 83.423 cv
@
194.34 90.903 mo
194.34 89.423 195.56 88.203 197.04 88.203 cv
198.53 88.203 199.74 89.423 199.74 90.903 cv
199.74 92.393 198.53 93.603 197.04 93.603 cv
195.56 93.603 194.34 92.393 194.34 90.903 cv
@
195.51 98.663 mo
195.51 97.173 196.73 95.963 198.21 95.963 cv
199.7 95.963 200.91 97.173 200.91 98.663 cv
200.91 100.143 199.7 101.363 198.21 101.363 cv
196.73 101.363 195.51 100.143 195.51 98.663 cv
@
196.68 106.653 mo
196.68 105.173 197.9 103.953 199.38 103.953 cv
200.87 103.953 202.08 105.173 202.08 106.653 cv
202.08 108.143 200.87 109.353 199.38 109.353 cv
197.9 109.353 196.68 108.143 196.68 106.653 cv
@
197.85 114.873 mo
197.85 113.393 199.07 112.173 200.55 112.173 cv
202.04 112.173 203.25 113.393 203.25 114.873 cv
203.25 116.363 202.04 117.573 200.55 117.573 cv
199.07 117.573 197.85 116.363 197.85 114.873 cv
@
199.02 123.303 mo
199.02 121.813 200.24 120.603 201.72 120.603 cv
203.21 120.603 204.42 121.813 204.42 123.303 cv
204.42 124.783 203.21 126.003 201.72 126.003 cv
200.24 126.003 199.02 124.783 199.02 123.303 cv
@
200.2 131.913 mo
200.2 130.433 201.41 129.213 202.9 129.213 cv
204.38 129.213 205.6 130.433 205.6 131.913 cv
205.6 133.403 204.38 134.613 202.9 134.613 cv
201.41 134.613 200.2 133.403 200.2 131.913 cv
@
201.37 140.703 mo
201.37 139.213 202.58 138.003 204.07 138.003 cv
205.55 138.003 206.77 139.213 206.77 140.703 cv
206.77 142.183 205.55 143.403 204.07 143.403 cv
202.58 143.403 201.37 142.183 201.37 140.703 cv
@
202.54 149.633 mo
202.54 148.143 203.75 146.933 205.24 146.933 cv
206.72 146.933 207.94 148.143 207.94 149.633 cv
207.94 151.113 206.72 152.333 205.24 152.333 cv
203.75 152.333 202.54 151.113 202.54 149.633 cv
@
203.71 158.693 mo
203.71 157.213 204.92 155.993 206.41 155.993 cv
207.89 155.993 209.11 157.213 209.11 158.693 cv
209.11 160.183 207.89 161.393 206.41 161.393 cv
204.92 161.393 203.71 160.183 203.71 158.693 cv
@
204.88 167.873 mo
204.88 166.393 206.09 165.173 207.58 165.173 cv
209.06 165.173 210.28 166.393 210.28 167.873 cv
210.28 169.363 209.06 170.573 207.58 170.573 cv
206.09 170.573 204.88 169.363 204.88 167.873 cv
@
206.05 177.153 mo
206.05 175.663 207.27 174.453 208.75 174.453 cv
210.24 174.453 211.45 175.663 211.45 177.153 cv
211.45 178.633 210.24 179.853 208.75 179.853 cv
207.27 179.853 206.05 178.633 206.05 177.153 cv
@
207.22 186.503 mo
207.22 185.023 208.44 183.803 209.92 183.803 cv
211.41 183.803 212.62 185.023 212.62 186.503 cv
212.62 187.993 211.41 189.203 209.92 189.203 cv
208.44 189.203 207.22 187.993 207.22 186.503 cv
@
208.39 195.923 mo
208.39 194.443 209.61 193.223 211.09 193.223 cv
212.58 193.223 213.79 194.443 213.79 195.923 cv
213.79 197.413 212.58 198.623 211.09 198.623 cv
209.61 198.623 208.39 197.413 208.39 195.923 cv
@
209.56 205.393 mo
209.56 203.903 210.78 202.693 212.26 202.693 cv
213.75 202.693 214.96 203.903 214.96 205.393 cv
214.96 206.873 213.75 208.093 212.26 208.093 cv
210.78 208.093 209.56 206.873 209.56 205.393 cv
@
210.73 214.893 mo
210.73 213.403 211.95 212.193 213.43 212.193 cv
214.92 212.193 216.13 213.403 216.13 214.893 cv
216.13 216.373 214.92 217.593 213.43 217.593 cv
211.95 217.593 210.73 216.373 210.73 214.893 cv
@
211.91 224.413 mo
211.91 222.923 213.12 221.713 214.61 221.713 cv
216.09 221.713 217.31 222.923 217.31 224.413 cv
217.31 225.893 216.09 227.113 214.61 227.113 cv
213.12 227.113 211.91 225.893 211.91 224.413 cv
@
213.08 233.933 mo
213.08 232.443 214.29 231.233 215.78 231.233 cv
217.26 231.233 218.48 232.443 218.48 233.933 cv
218.48 235.413 217.26 236.633 215.78 236.633 cv
214.29 236.633 213.08 235.413 213.08 233.933 cv
@
214.25 243.443 mo
214.25 241.953 215.46 240.743 216.95 240.743 cv
218.43 240.743 219.65 241.953 219.65 243.443 cv
219.65 244.923 218.43 246.143 216.95 246.143 cv
215.46 246.143 214.25 244.923 214.25 243.443 cv
@
215.42 252.923 mo
215.42 251.443 216.63 250.223 218.12 250.223 cv
219.6 250.223 220.82 251.443 220.82 252.923 cv
220.82 254.413 219.6 255.623 218.12 255.623 cv
216.63 255.623 215.42 254.413 215.42 252.923 cv
@
216.59 262.373 mo
216.59 260.893 217.8 259.673 219.29 259.673 cv
220.77 259.673 221.99 260.893 221.99 262.373 cv
221.99 263.863 220.77 265.073 219.29 265.073 cv
217.8 265.073 216.59 263.863 216.59 262.373 cv
@
217.76 271.783 mo
217.76 270.293 218.98 269.083 220.46 269.083 cv
221.95 269.083 223.16 270.293 223.16 271.783 cv
223.16 273.263 221.95 274.483 220.46 274.483 cv
218.98 274.483 217.76 273.263 217.76 271.783 cv
@
218.93 281.123 mo
218.93 279.643 220.15 278.423 221.63 278.423 cv
223.12 278.423 224.33 279.643 224.33 281.123 cv
224.33 282.613 223.12 283.823 221.63 283.823 cv
220.15 283.823 218.93 282.613 218.93 281.123 cv
@
220.1 290.403 mo
220.1 288.913 221.32 287.703 222.8 287.703 cv
224.29 287.703 225.5 288.913 225.5 290.403 cv
225.5 291.883 224.29 293.103 222.8 293.103 cv
221.32 293.103 220.1 291.883 220.1 290.403 cv
@
221.27 299.593 mo
221.27 298.103 222.49 296.893 223.97 296.893 cv
225.46 296.893 226.67 298.103 226.67 299.593 cv
226.67 301.073 225.46 302.293 223.97 302.293 cv
222.49 302.293 221.27 301.073 221.27 299.593 cv
@
222.44 308.703 mo
222.44 307.213 223.66 306.003 225.14 306.003 cv
226.63 306.003 227.84 307.213 227.84 308.703 cv
227.84 310.183 226.63 311.403 225.14 311.403 cv
223.66 311.403 222.44 310.183 222.44 308.703 cv
@
223.62 317.703 mo
223.62 316.223 224.83 315.003 226.32 315.003 cv
227.8 315.003 229.02 316.223 229.02 317.703 cv
229.02 319.193 227.8 320.403 226.32 320.403 cv
224.83 320.403 223.62 319.193 223.62 317.703 cv
@
224.79 326.603 mo
224.79 325.123 226 323.903 227.49 323.903 cv
228.97 323.903 230.19 325.123 230.19 326.603 cv
230.19 328.093 228.97 329.303 227.49 329.303 cv
226 329.303 224.79 328.093 224.79 326.603 cv
@
225.96 335.393 mo
225.96 333.913 227.17 332.693 228.66 332.693 cv
230.14 332.693 231.36 333.913 231.36 335.393 cv
231.36 336.883 230.14 338.093 228.66 338.093 cv
227.17 338.093 225.96 336.883 225.96 335.393 cv
@
227.13 344.063 mo
227.13 342.573 228.34 341.363 229.83 341.363 cv
231.31 341.363 232.53 342.573 232.53 344.063 cv
232.53 345.543 231.31 346.763 229.83 346.763 cv
228.34 346.763 227.13 345.543 227.13 344.063 cv
@
228.3 352.603 mo
228.3 351.113 229.51 349.903 231 349.903 cv
232.48 349.903 233.7 351.113 233.7 352.603 cv
233.7 354.083 232.48 355.303 231 355.303 cv
229.51 355.303 228.3 354.083 228.3 352.603 cv
@
229.47 361.003 mo
229.47 359.523 230.69 358.303 232.17 358.303 cv
233.66 358.303 234.87 359.523 234.87 361.003 cv
234.87 362.493 233.66 363.703 232.17 363.703 cv
230.69 363.703 229.47 362.493 229.47 361.003 cv
@
230.64 369.273 mo
230.64 367.793 231.86 366.573 233.34 366.573 cv
234.83 366.573 236.04 367.793 236.04 369.273 cv
236.04 370.763 234.83 371.973 233.34 371.973 cv
231.86 371.973 230.64 370.763 230.64 369.273 cv
@
231.81 377.403 mo
231.81 375.913 233.03 374.703 234.51 374.703 cv
236 374.703 237.21 375.913 237.21 377.403 cv
237.21 378.883 236 380.103 234.51 380.103 cv
233.03 380.103 231.81 378.883 231.81 377.403 cv
@
232.98 385.373 mo
232.98 383.893 234.2 382.673 235.68 382.673 cv
237.17 382.673 238.38 383.893 238.38 385.373 cv
238.38 386.863 237.17 388.073 235.68 388.073 cv
234.2 388.073 232.98 386.863 232.98 385.373 cv
@
234.16 393.203 mo
234.16 391.713 235.37 390.503 236.86 390.503 cv
238.34 390.503 239.56 391.713 239.56 393.203 cv
239.56 394.683 238.34 395.903 236.86 395.903 cv
235.37 395.903 234.16 394.683 234.16 393.203 cv
@
235.33 400.873 mo
235.33 399.383 236.54 398.173 238.03 398.173 cv
239.51 398.173 240.73 399.383 240.73 400.873 cv
240.73 402.353 239.51 403.573 238.03 403.573 cv
236.54 403.573 235.33 402.353 235.33 400.873 cv
@
236.5 408.383 mo
236.5 406.893 237.71 405.683 239.2 405.683 cv
240.68 405.683 241.9 406.893 241.9 408.383 cv
241.9 409.863 240.68 411.083 239.2 411.083 cv
237.71 411.083 236.5 409.863 236.5 408.383 cv
@
237.67 415.733 mo
237.67 414.253 238.88 413.033 240.37 413.033 cv
241.85 413.033 243.07 414.253 243.07 415.733 cv
243.07 417.223 241.85 418.433 240.37 418.433 cv
238.88 418.433 237.67 417.223 237.67 415.733 cv
@
238.84 422.923 mo
238.84 421.443 240.05 420.223 241.54 420.223 cv
243.02 420.223 244.24 421.443 244.24 422.923 cv
244.24 424.413 243.02 425.623 241.54 425.623 cv
240.05 425.623 238.84 424.413 238.84 422.923 cv
@
240.01 429.953 mo
240.01 428.463 241.23 427.253 242.71 427.253 cv
244.2 427.253 245.41 428.463 245.41 429.953 cv
245.41 431.433 244.2 432.653 242.71 432.653 cv
241.23 432.653 240.01 431.433 240.01 429.953 cv
@
241.18 436.813 mo
241.18 435.323 242.4 434.113 243.88 434.113 cv
245.37 434.113 246.58 435.323 246.58 436.813 cv
246.58 438.293 245.37 439.513 243.88 439.513 cv
242.4 439.513 241.18 438.293 241.18 436.813 cv
@
242.35 443.503 mo
242.35 442.023 243.57 440.803 245.05 440.803 cv
246.54 440.803 247.75 442.023 247.75 443.503 cv
247.75 444.993 246.54 446.203 245.05 446.203 cv
243.57 446.203 242.35 444.993 242.35 443.503 cv
@
243.52 450.033 mo
243.52 448.553 244.74 447.333 246.22 447.333 cv
247.71 447.333 248.92 448.553 248.92 450.033 cv
248.92 451.523 247.71 452.733 246.22 452.733 cv
244.74 452.733 243.52 451.523 243.52 450.033 cv
@
244.69 456.403 mo
244.69 454.913 245.91 453.703 247.39 453.703 cv
248.88 453.703 250.09 454.913 250.09 456.403 cv
250.09 457.883 248.88 459.103 247.39 459.103 cv
245.91 459.103 244.69 457.883 244.69 456.403 cv
@
245.87 462.593 mo
245.87 461.113 247.08 459.893 248.57 459.893 cv
250.05 459.893 251.27 461.113 251.27 462.593 cv
251.27 464.083 250.05 465.293 248.57 465.293 cv
247.08 465.293 245.87 464.083 245.87 462.593 cv
@
247.04 468.623 mo
247.04 467.143 248.25 465.923 249.74 465.923 cv
251.22 465.923 252.44 467.143 252.44 468.623 cv
252.44 470.113 251.22 471.323 249.74 471.323 cv
248.25 471.323 247.04 470.113 247.04 468.623 cv
@
248.21 474.493 mo
248.21 473.003 249.42 471.793 250.91 471.793 cv
252.39 471.793 253.61 473.003 253.61 474.493 cv
253.61 475.973 252.39 477.193 250.91 477.193 cv
249.42 477.193 248.21 475.973 248.21 474.493 cv
@
249.38 480.193 mo
249.38 478.703 250.59 477.493 252.08 477.493 cv
253.56 477.493 254.78 478.703 254.78 480.193 cv
254.78 481.673 253.56 482.893 252.08 482.893 cv
250.59 482.893 249.38 481.673 249.38 480.193 cv
@
250.55 485.733 mo
250.55 484.243 251.76 483.033 253.25 483.033 cv
254.73 483.033 255.95 484.243 255.95 485.733 cv
255.95 487.213 254.73 488.433 253.25 488.433 cv
251.76 488.433 250.55 487.213 250.55 485.733 cv
@
251.72 491.103 mo
251.72 489.623 252.94 488.403 254.42 488.403 cv
255.91 488.403 257.12 489.623 257.12 491.103 cv
257.12 492.593 255.91 493.803 254.42 493.803 cv
252.94 493.803 251.72 492.593 251.72 491.103 cv
@
252.89 496.323 mo
252.89 494.843 254.11 493.623 255.59 493.623 cv
257.08 493.623 258.29 494.843 258.29 496.323 cv
258.29 497.813 257.08 499.023 255.59 499.023 cv
254.11 499.023 252.89 497.813 252.89 496.323 cv
@
254.06 501.383 mo
254.06 499.903 255.28 498.683 256.76 498.683 cv
258.25 498.683 259.46 499.903 259.46 501.383 cv
259.46 502.873 258.25 504.083 256.76 504.083 cv
255.28 504.083 254.06 502.873 254.06 501.383 cv
@
255.23 506.283 mo
255.23 504.803 256.45 503.583 257.93 503.583 cv
259.42 503.583 260.63 504.803 260.63 506.283 cv
260.63 507.773 259.42 508.983 257.93 508.983 cv
256.45 508.983 255.23 507.773 255.23 506.283 cv
@
256.4 511.033 mo
256.4 509.553 257.62 508.333 259.1 508.333 cv
260.59 508.333 261.8 509.553 261.8 511.033 cv
261.8 512.523 260.59 513.733 259.1 513.733 cv
257.62 513.733 256.4 512.523 256.4 511.033 cv
@
257.58 515.633 mo
257.58 514.153 258.79 512.933 260.28 512.933 cv
261.76 512.933 262.98 514.153 262.98 515.633 cv
262.98 517.123 261.76 518.333 260.28 518.333 cv
258.79 518.333 257.58 517.123 257.58 515.633 cv
@
258.75 520.083 mo
258.75 518.593 259.96 517.383 261.45 517.383 cv
262.93 517.383 264.15 518.593 264.15 520.083 cv
264.15 521.563 262.93 522.783 261.45 522.783 cv
259.96 522.783 258.75 521.563 258.75 520.083 cv
@
259.92 524.383 mo
259.92 522.903 261.13 521.683 262.62 521.683 cv
264.1 521.683 265.32 522.903 265.32 524.383 cv
265.32 525.873 264.1 527.083 262.62 527.083 cv
261.13 527.083 259.92 525.873 259.92 524.383 cv
@
261.09 528.543 mo
261.09 527.063 262.3 525.843 263.79 525.843 cv
265.27 525.843 266.49 527.063 266.49 528.543 cv
266.49 530.033 265.27 531.243 263.79 531.243 cv
262.3 531.243 261.09 530.033 261.09 528.543 cv
@
262.26 532.563 mo
262.26 531.073 263.47 529.863 264.96 529.863 cv
266.44 529.863 267.66 531.073 267.66 532.563 cv
267.66 534.043 266.44 535.263 264.96 535.263 cv
263.47 535.263 262.26 534.043 262.26 532.563 cv
@
263.43 536.443 mo
263.43 534.953 264.65 533.743 266.13 533.743 cv
267.62 533.743 268.83 534.953 268.83 536.443 cv
268.83 537.923 267.62 539.143 266.13 539.143 cv
264.65 539.143 263.43 537.923 263.43 536.443 cv
@
264.6 540.183 mo
264.6 538.703 265.82 537.483 267.3 537.483 cv
268.79 537.483 270 538.703 270 540.183 cv
270 541.673 268.79 542.883 267.3 542.883 cv
265.82 542.883 264.6 541.673 264.6 540.183 cv
@
265.77 543.793 mo
265.77 542.313 266.99 541.093 268.47 541.093 cv
269.96 541.093 271.17 542.313 271.17 543.793 cv
271.17 545.283 269.96 546.493 268.47 546.493 cv
266.99 546.493 265.77 545.283 265.77 543.793 cv
@
266.94 547.283 mo
266.94 545.793 268.16 544.583 269.64 544.583 cv
271.13 544.583 272.34 545.793 272.34 547.283 cv
272.34 548.763 271.13 549.983 269.64 549.983 cv
268.16 549.983 266.94 548.763 266.94 547.283 cv
@
268.11 550.633 mo
268.11 549.153 269.33 547.933 270.81 547.933 cv
272.3 547.933 273.51 549.153 273.51 550.633 cv
273.51 552.123 272.3 553.333 270.81 553.333 cv
269.33 553.333 268.11 552.123 268.11 550.633 cv
@
269.29 553.873 mo
269.29 552.383 270.5 551.173 271.99 551.173 cv
273.47 551.173 274.69 552.383 274.69 553.873 cv
274.69 555.353 273.47 556.573 271.99 556.573 cv
270.5 556.573 269.29 555.353 269.29 553.873 cv
@
270.46 556.983 mo
270.46 555.503 271.67 554.283 273.16 554.283 cv
274.64 554.283 275.86 555.503 275.86 556.983 cv
275.86 558.473 274.64 559.683 273.16 559.683 cv
271.67 559.683 270.46 558.473 270.46 556.983 cv
@
271.63 559.983 mo
271.63 558.503 272.84 557.283 274.33 557.283 cv
275.81 557.283 277.03 558.503 277.03 559.983 cv
277.03 561.473 275.81 562.683 274.33 562.683 cv
272.84 562.683 271.63 561.473 271.63 559.983 cv
@
272.8 562.863 mo
272.8 561.383 274.01 560.163 275.5 560.163 cv
276.98 560.163 278.2 561.383 278.2 562.863 cv
278.2 564.353 276.98 565.563 275.5 565.563 cv
274.01 565.563 272.8 564.353 272.8 562.863 cv
@
273.97 565.643 mo
273.97 564.153 275.18 562.943 276.67 562.943 cv
278.15 562.943 279.37 564.153 279.37 565.643 cv
279.37 567.123 278.15 568.343 276.67 568.343 cv
275.18 568.343 273.97 567.123 273.97 565.643 cv
@
275.14 568.303 mo
275.14 566.823 276.36 565.603 277.84 565.603 cv
279.33 565.603 280.54 566.823 280.54 568.303 cv
280.54 569.793 279.33 571.003 277.84 571.003 cv
276.36 571.003 275.14 569.793 275.14 568.303 cv
@
276.31 570.873 mo
276.31 569.383 277.53 568.173 279.01 568.173 cv
280.5 568.173 281.71 569.383 281.71 570.873 cv
281.71 572.353 280.5 573.573 279.01 573.573 cv
277.53 573.573 276.31 572.353 276.31 570.873 cv
@
277.48 573.333 mo
277.48 571.843 278.7 570.633 280.18 570.633 cv
281.67 570.633 282.88 571.843 282.88 573.333 cv
282.88 574.813 281.67 576.033 280.18 576.033 cv
278.7 576.033 277.48 574.813 277.48 573.333 cv
@
278.65 575.693 mo
278.65 574.203 279.87 572.993 281.35 572.993 cv
282.84 572.993 284.05 574.203 284.05 575.693 cv
284.05 577.173 282.84 578.393 281.35 578.393 cv
279.87 578.393 278.65 577.173 278.65 575.693 cv
@
279.83 577.963 mo
279.83 576.473 281.04 575.263 282.53 575.263 cv
284.01 575.263 285.23 576.473 285.23 577.963 cv
285.23 579.443 284.01 580.663 282.53 580.663 cv
281.04 580.663 279.83 579.443 279.83 577.963 cv
@
281 580.133 mo
281 578.653 282.21 577.433 283.7 577.433 cv
285.18 577.433 286.4 578.653 286.4 580.133 cv
286.4 581.623 285.18 582.833 283.7 582.833 cv
282.21 582.833 281 581.623 281 580.133 cv
@
282.17 582.223 mo
282.17 580.733 283.38 579.523 284.87 579.523 cv
286.35 579.523 287.57 580.733 287.57 582.223 cv
287.57 583.703 286.35 584.923 284.87 584.923 cv
283.38 584.923 282.17 583.703 282.17 582.223 cv
@
283.34 584.223 mo
283.34 582.733 284.55 581.523 286.04 581.523 cv
287.52 581.523 288.74 582.733 288.74 584.223 cv
288.74 585.703 287.52 586.923 286.04 586.923 cv
284.55 586.923 283.34 585.703 283.34 584.223 cv
@
284.51 586.133 mo
284.51 584.653 285.72 583.433 287.21 583.433 cv
288.69 583.433 289.91 584.653 289.91 586.133 cv
289.91 587.623 288.69 588.833 287.21 588.833 cv
285.72 588.833 284.51 587.623 284.51 586.133 cv
@
285.68 587.973 mo
285.68 586.483 286.9 585.273 288.38 585.273 cv
289.87 585.273 291.08 586.483 291.08 587.973 cv
291.08 589.453 289.87 590.673 288.38 590.673 cv
286.9 590.673 285.68 589.453 285.68 587.973 cv
@
286.85 589.733 mo
286.85 588.243 288.07 587.033 289.55 587.033 cv
291.04 587.033 292.25 588.243 292.25 589.733 cv
292.25 591.213 291.04 592.433 289.55 592.433 cv
288.07 592.433 286.85 591.213 286.85 589.733 cv
@
288.02 591.413 mo
288.02 589.923 289.24 588.713 290.72 588.713 cv
292.21 588.713 293.42 589.923 293.42 591.413 cv
293.42 592.893 292.21 594.113 290.72 594.113 cv
289.24 594.113 288.02 592.893 288.02 591.413 cv
@
289.19 593.023 mo
289.19 591.533 290.41 590.323 291.89 590.323 cv
293.38 590.323 294.59 591.533 294.59 593.023 cv
294.59 594.503 293.38 595.723 291.89 595.723 cv
290.41 595.723 289.19 594.503 289.19 593.023 cv
@
290.36 594.563 mo
290.36 593.073 291.58 591.863 293.06 591.863 cv
294.55 591.863 295.76 593.073 295.76 594.563 cv
295.76 596.043 294.55 597.263 293.06 597.263 cv
291.58 597.263 290.36 596.043 290.36 594.563 cv
@
291.54 596.033 mo
291.54 594.553 292.75 593.333 294.24 593.333 cv
295.72 593.333 296.94 594.553 296.94 596.033 cv
296.94 597.523 295.72 598.733 294.24 598.733 cv
292.75 598.733 291.54 597.523 291.54 596.033 cv
@
292.71 597.443 mo
292.71 595.953 293.92 594.743 295.41 594.743 cv
296.89 594.743 298.11 595.953 298.11 597.443 cv
298.11 598.923 296.89 600.143 295.41 600.143 cv
293.92 600.143 292.71 598.923 292.71 597.443 cv
@
293.88 598.783 mo
293.88 597.303 295.09 596.083 296.58 596.083 cv
298.06 596.083 299.28 597.303 299.28 598.783 cv
299.28 600.273 298.06 601.483 296.58 601.483 cv
295.09 601.483 293.88 600.273 293.88 598.783 cv
@
295.05 600.073 mo
295.05 598.593 296.26 597.373 297.75 597.373 cv
299.23 597.373 300.45 598.593 300.45 600.073 cv
300.45 601.563 299.23 602.773 297.75 602.773 cv
296.26 602.773 295.05 601.563 295.05 600.073 cv
@
296.22 601.303 mo
296.22 599.813 297.43 598.603 298.92 598.603 cv
300.4 598.603 301.62 599.813 301.62 601.303 cv
301.62 602.783 300.4 604.003 298.92 604.003 cv
297.43 604.003 296.22 602.783 296.22 601.303 cv
@
297.39 602.473 mo
297.39 600.983 298.61 599.773 300.09 599.773 cv
301.58 599.773 302.79 600.983 302.79 602.473 cv
302.79 603.953 301.58 605.173 300.09 605.173 cv
298.61 605.173 297.39 603.953 297.39 602.473 cv
@
298.56 603.593 mo
298.56 602.103 299.78 600.893 301.26 600.893 cv
302.75 600.893 303.96 602.103 303.96 603.593 cv
303.96 605.073 302.75 606.293 301.26 606.293 cv
299.78 606.293 298.56 605.073 298.56 603.593 cv
@
299.73 604.663 mo
299.73 603.173 300.95 601.963 302.43 601.963 cv
303.92 601.963 305.13 603.173 305.13 604.663 cv
305.13 606.143 303.92 607.363 302.43 607.363 cv
300.95 607.363 299.73 606.143 299.73 604.663 cv
@
300.9 605.673 mo
300.9 604.193 302.12 602.973 303.6 602.973 cv
305.09 602.973 306.3 604.193 306.3 605.673 cv
306.3 607.163 305.09 608.373 303.6 608.373 cv
302.12 608.373 300.9 607.163 300.9 605.673 cv
@
302.07 606.643 mo
302.07 605.163 303.29 603.943 304.77 603.943 cv
306.26 603.943 307.47 605.163 307.47 606.643 cv
307.47 608.133 306.26 609.343 304.77 609.343 cv
303.29 609.343 302.07 608.133 302.07 606.643 cv
@
303.25 607.573 mo
303.25 606.083 304.46 604.873 305.95 604.873 cv
307.43 604.873 308.65 606.083 308.65 607.573 cv
308.65 609.053 307.43 610.273 305.95 610.273 cv
304.46 610.273 303.25 609.053 303.25 607.573 cv
@
304.42 608.453 mo
304.42 606.973 305.63 605.753 307.12 605.753 cv
308.6 605.753 309.82 606.973 309.82 608.453 cv
309.82 609.943 308.6 611.153 307.12 611.153 cv
305.63 611.153 304.42 609.943 304.42 608.453 cv
@
305.59 609.293 mo
305.59 607.813 306.8 606.593 308.29 606.593 cv
309.77 606.593 310.99 607.813 310.99 609.293 cv
310.99 610.783 309.77 611.993 308.29 611.993 cv
306.8 611.993 305.59 610.783 305.59 609.293 cv
@
306.76 610.093 mo
306.76 608.613 307.97 607.393 309.46 607.393 cv
310.94 607.393 312.16 608.613 312.16 610.093 cv
312.16 611.583 310.94 612.793 309.46 612.793 cv
307.97 612.793 306.76 611.583 306.76 610.093 cv
@
307.93 610.853 mo
307.93 609.373 309.14 608.153 310.63 608.153 cv
312.11 608.153 313.33 609.373 313.33 610.853 cv
313.33 612.343 312.11 613.553 310.63 613.553 cv
309.14 613.553 307.93 612.343 307.93 610.853 cv
@
309.1 611.583 mo
309.1 610.093 310.32 608.883 311.8 608.883 cv
313.29 608.883 314.5 610.093 314.5 611.583 cv
314.5 613.063 313.29 614.283 311.8 614.283 cv
310.32 614.283 309.1 613.063 309.1 611.583 cv
@
310.27 612.273 mo
310.27 610.783 311.49 609.573 312.97 609.573 cv
314.46 609.573 315.67 610.783 315.67 612.273 cv
315.67 613.753 314.46 614.973 312.97 614.973 cv
311.49 614.973 310.27 613.753 310.27 612.273 cv
@
311.44 612.923 mo
311.44 611.443 312.66 610.223 314.14 610.223 cv
315.63 610.223 316.84 611.443 316.84 612.923 cv
316.84 614.413 315.63 615.623 314.14 615.623 cv
312.66 615.623 311.44 614.413 311.44 612.923 cv
@
312.61 613.553 mo
312.61 612.063 313.83 610.853 315.31 610.853 cv
316.8 610.853 318.01 612.063 318.01 613.553 cv
318.01 615.033 316.8 616.253 315.31 616.253 cv
313.83 616.253 312.61 615.033 312.61 613.553 cv
@
313.78 614.143 mo
313.78 612.663 315 611.443 316.48 611.443 cv
317.97 611.443 319.18 612.663 319.18 614.143 cv
319.18 615.633 317.97 616.843 316.48 616.843 cv
315 616.843 313.78 615.633 313.78 614.143 cv
@
314.96 614.713 mo
314.96 613.223 316.17 612.013 317.66 612.013 cv
319.14 612.013 320.36 613.223 320.36 614.713 cv
320.36 616.193 319.14 617.413 317.66 617.413 cv
316.17 617.413 314.96 616.193 314.96 614.713 cv
@
316.13 615.243 mo
316.13 613.763 317.34 612.543 318.83 612.543 cv
320.31 612.543 321.53 613.763 321.53 615.243 cv
321.53 616.733 320.31 617.943 318.83 617.943 cv
317.34 617.943 316.13 616.733 316.13 615.243 cv
@
317.3 615.753 mo
317.3 614.273 318.51 613.053 320 613.053 cv
321.48 613.053 322.7 614.273 322.7 615.753 cv
322.7 617.243 321.48 618.453 320 618.453 cv
318.51 618.453 317.3 617.243 317.3 615.753 cv
@
318.47 616.243 mo
318.47 614.753 319.68 613.543 321.17 613.543 cv
322.65 613.543 323.87 614.753 323.87 616.243 cv
323.87 617.723 322.65 618.943 321.17 618.943 cv
319.68 618.943 318.47 617.723 318.47 616.243 cv
@
319.64 616.703 mo
319.64 615.213 320.85 614.003 322.34 614.003 cv
323.82 614.003 325.04 615.213 325.04 616.703 cv
325.04 618.183 323.82 619.403 322.34 619.403 cv
320.85 619.403 319.64 618.183 319.64 616.703 cv
@
320.81 617.133 mo
320.81 615.653 322.03 614.433 323.51 614.433 cv
325 614.433 326.21 615.653 326.21 617.133 cv
326.21 618.623 325 619.833 323.51 619.833 cv
322.03 619.833 320.81 618.623 320.81 617.133 cv
@
321.98 617.553 mo
321.98 616.063 323.2 614.853 324.68 614.853 cv
326.17 614.853 327.38 616.063 327.38 617.553 cv
327.38 619.033 326.17 620.253 324.68 620.253 cv
323.2 620.253 321.98 619.033 321.98 617.553 cv
@
323.15 617.943 mo
323.15 616.463 324.37 615.243 325.85 615.243 cv
327.34 615.243 328.55 616.463 328.55 617.943 cv
328.55 619.433 327.34 620.643 325.85 620.643 cv
324.37 620.643 323.15 619.433 323.15 617.943 cv
@
324.32 618.323 mo
324.32 616.833 325.54 615.623 327.02 615.623 cv
328.51 615.623 329.72 616.833 329.72 618.323 cv
329.72 619.803 328.51 621.023 327.02 621.023 cv
325.54 621.023 324.32 619.803 324.32 618.323 cv
@
325.5 618.673 mo
325.5 617.183 326.71 615.973 328.2 615.973 cv
329.68 615.973 330.9 617.183 330.9 618.673 cv
330.9 620.153 329.68 621.373 328.2 621.373 cv
326.71 621.373 325.5 620.153 325.5 618.673 cv
@
326.67 619.013 mo
326.67 617.523 327.88 616.313 329.37 616.313 cv
330.85 616.313 332.07 617.523 332.07 619.013 cv
332.07 620.493 330.85 621.713 329.37 621.713 cv
327.88 621.713 326.67 620.493 326.67 619.013 cv
@
327.84 619.323 mo
327.84 617.843 329.05 616.623 330.54 616.623 cv
332.02 616.623 333.24 617.843 333.24 619.323 cv
333.24 620.813 332.02 622.023 330.54 622.023 cv
329.05 622.023 327.84 620.813 327.84 619.323 cv
@
329.01 619.633 mo
329.01 618.143 330.22 616.933 331.71 616.933 cv
333.19 616.933 334.41 618.143 334.41 619.633 cv
334.41 621.113 333.19 622.333 331.71 622.333 cv
330.22 622.333 329.01 621.113 329.01 619.633 cv
@
330.18 619.913 mo
330.18 618.433 331.39 617.213 332.88 617.213 cv
334.36 617.213 335.58 618.433 335.58 619.913 cv
335.58 621.403 334.36 622.613 332.88 622.613 cv
331.39 622.613 330.18 621.403 330.18 619.913 cv
@
331.35 620.183 mo
331.35 618.703 332.57 617.483 334.05 617.483 cv
335.54 617.483 336.75 618.703 336.75 620.183 cv
336.75 621.673 335.54 622.883 334.05 622.883 cv
332.57 622.883 331.35 621.673 331.35 620.183 cv
@
332.52 620.443 mo
332.52 618.953 333.74 617.743 335.22 617.743 cv
336.71 617.743 337.92 618.953 337.92 620.443 cv
337.92 621.923 336.71 623.143 335.22 623.143 cv
333.74 623.143 332.52 621.923 332.52 620.443 cv
@
333.69 620.683 mo
333.69 619.203 334.91 617.983 336.39 617.983 cv
337.88 617.983 339.09 619.203 339.09 620.683 cv
339.09 622.173 337.88 623.383 336.39 623.383 cv
334.91 623.383 333.69 622.173 333.69 620.683 cv
@
334.86 620.913 mo
334.86 619.433 336.08 618.213 337.56 618.213 cv
339.05 618.213 340.26 619.433 340.26 620.913 cv
340.26 622.403 339.05 623.613 337.56 623.613 cv
336.08 623.613 334.86 622.403 334.86 620.913 cv
@
336.03 621.133 mo
336.03 619.653 337.25 618.433 338.73 618.433 cv
340.22 618.433 341.43 619.653 341.43 621.133 cv
341.43 622.623 340.22 623.833 338.73 623.833 cv
337.25 623.833 336.03 622.623 336.03 621.133 cv
@
337.21 621.343 mo
337.21 619.853 338.42 618.643 339.91 618.643 cv
341.39 618.643 342.61 619.853 342.61 621.343 cv
342.61 622.823 341.39 624.043 339.91 624.043 cv
338.42 624.043 337.21 622.823 337.21 621.343 cv
@
338.38 621.533 mo
338.38 620.053 339.59 618.833 341.08 618.833 cv
342.56 618.833 343.78 620.053 343.78 621.533 cv
343.78 623.023 342.56 624.233 341.08 624.233 cv
339.59 624.233 338.38 623.023 338.38 621.533 cv
@
339.55 621.723 mo
339.55 620.233 340.76 619.023 342.25 619.023 cv
343.73 619.023 344.95 620.233 344.95 621.723 cv
344.95 623.203 343.73 624.423 342.25 624.423 cv
340.76 624.423 339.55 623.203 339.55 621.723 cv
@
340.72 621.893 mo
340.72 620.413 341.93 619.193 343.42 619.193 cv
344.9 619.193 346.12 620.413 346.12 621.893 cv
346.12 623.383 344.9 624.593 343.42 624.593 cv
341.93 624.593 340.72 623.383 340.72 621.893 cv
@
341.89 622.063 mo
341.89 620.573 343.1 619.363 344.59 619.363 cv
346.07 619.363 347.29 620.573 347.29 622.063 cv
347.29 623.543 346.07 624.763 344.59 624.763 cv
343.1 624.763 341.89 623.543 341.89 622.063 cv
@
343.06 622.213 mo
343.06 620.733 344.28 619.513 345.76 619.513 cv
347.25 619.513 348.46 620.733 348.46 622.213 cv
348.46 623.703 347.25 624.913 345.76 624.913 cv
344.28 624.913 343.06 623.703 343.06 622.213 cv
@
344.23 622.363 mo
344.23 620.883 345.45 619.663 346.93 619.663 cv
348.42 619.663 349.63 620.883 349.63 622.363 cv
349.63 623.853 348.42 625.063 346.93 625.063 cv
345.45 625.063 344.23 623.853 344.23 622.363 cv
@
345.4 622.503 mo
345.4 621.023 346.62 619.803 348.1 619.803 cv
349.59 619.803 350.8 621.023 350.8 622.503 cv
350.8 623.993 349.59 625.203 348.1 625.203 cv
346.62 625.203 345.4 623.993 345.4 622.503 cv
@
346.57 622.633 mo
346.57 621.153 347.79 619.933 349.27 619.933 cv
350.76 619.933 351.97 621.153 351.97 622.633 cv
351.97 624.123 350.76 625.333 349.27 625.333 cv
347.79 625.333 346.57 624.123 346.57 622.633 cv
@
347.74 622.763 mo
347.74 621.273 348.96 620.063 350.44 620.063 cv
351.93 620.063 353.14 621.273 353.14 622.763 cv
353.14 624.243 351.93 625.463 350.44 625.463 cv
348.96 625.463 347.74 624.243 347.74 622.763 cv
@
348.92 622.883 mo
348.92 621.393 350.13 620.183 351.62 620.183 cv
353.1 620.183 354.32 621.393 354.32 622.883 cv
354.32 624.363 353.1 625.583 351.62 625.583 cv
350.13 625.583 348.92 624.363 348.92 622.883 cv
@
350.09 622.993 mo
350.09 621.503 351.3 620.293 352.79 620.293 cv
354.27 620.293 355.49 621.503 355.49 622.993 cv
355.49 624.473 354.27 625.693 352.79 625.693 cv
351.3 625.693 350.09 624.473 350.09 622.993 cv
@
351.26 623.093 mo
351.26 621.613 352.47 620.393 353.96 620.393 cv
355.44 620.393 356.66 621.613 356.66 623.093 cv
356.66 624.583 355.44 625.793 353.96 625.793 cv
352.47 625.793 351.26 624.583 351.26 623.093 cv
@
352.43 623.193 mo
352.43 621.713 353.64 620.493 355.13 620.493 cv
356.61 620.493 357.83 621.713 357.83 623.193 cv
357.83 624.683 356.61 625.893 355.13 625.893 cv
353.64 625.893 352.43 624.683 352.43 623.193 cv
@
353.6 623.293 mo
353.6 621.803 354.81 620.593 356.3 620.593 cv
357.78 620.593 359 621.803 359 623.293 cv
359 624.773 357.78 625.993 356.3 625.993 cv
354.81 625.993 353.6 624.773 353.6 623.293 cv
@
354.77 623.373 mo
354.77 621.893 355.99 620.673 357.47 620.673 cv
358.96 620.673 360.17 621.893 360.17 623.373 cv
360.17 624.863 358.96 626.073 357.47 626.073 cv
355.99 626.073 354.77 624.863 354.77 623.373 cv
@
355.94 623.463 mo
355.94 621.973 357.16 620.763 358.64 620.763 cv
360.13 620.763 361.34 621.973 361.34 623.463 cv
361.34 624.943 360.13 626.163 358.64 626.163 cv
357.16 626.163 355.94 624.943 355.94 623.463 cv
@
357.11 623.543 mo
357.11 622.053 358.33 620.843 359.81 620.843 cv
361.3 620.843 362.51 622.053 362.51 623.543 cv
362.51 625.023 361.3 626.243 359.81 626.243 cv
358.33 626.243 357.11 625.023 357.11 623.543 cv
@
358.28 623.613 mo
358.28 622.133 359.5 620.913 360.98 620.913 cv
362.47 620.913 363.68 622.133 363.68 623.613 cv
363.68 625.103 362.47 626.313 360.98 626.313 cv
359.5 626.313 358.28 625.103 358.28 623.613 cv
@
359.45 623.683 mo
359.45 622.203 360.67 620.983 362.15 620.983 cv
363.64 620.983 364.85 622.203 364.85 623.683 cv
364.85 625.173 363.64 626.383 362.15 626.383 cv
360.67 626.383 359.45 625.173 359.45 623.683 cv
@
360.63 623.753 mo
360.63 622.263 361.84 621.053 363.33 621.053 cv
364.81 621.053 366.03 622.263 366.03 623.753 cv
366.03 625.233 364.81 626.453 363.33 626.453 cv
361.84 626.453 360.63 625.233 360.63 623.753 cv
@
361.8 623.813 mo
361.8 622.323 363.01 621.113 364.5 621.113 cv
365.98 621.113 367.2 622.323 367.2 623.813 cv
367.2 625.293 365.98 626.513 364.5 626.513 cv
363.01 626.513 361.8 625.293 361.8 623.813 cv
@
362.97 623.873 mo
362.97 622.383 364.18 621.173 365.67 621.173 cv
367.15 621.173 368.37 622.383 368.37 623.873 cv
368.37 625.353 367.15 626.573 365.67 626.573 cv
364.18 626.573 362.97 625.353 362.97 623.873 cv
@
364.14 623.923 mo
364.14 622.443 365.35 621.223 366.84 621.223 cv
368.32 621.223 369.54 622.443 369.54 623.923 cv
369.54 625.413 368.32 626.623 366.84 626.623 cv
365.35 626.623 364.14 625.413 364.14 623.923 cv
@
365.31 623.983 mo
365.31 622.493 366.52 621.283 368.01 621.283 cv
369.49 621.283 370.71 622.493 370.71 623.983 cv
370.71 625.463 369.49 626.683 368.01 626.683 cv
366.52 626.683 365.31 625.463 365.31 623.983 cv
@
366.48 624.033 mo
366.48 622.543 367.7 621.333 369.18 621.333 cv
370.67 621.333 371.88 622.543 371.88 624.033 cv
371.88 625.513 370.67 626.733 369.18 626.733 cv
367.7 626.733 366.48 625.513 366.48 624.033 cv
@
367.65 624.073 mo
367.65 622.593 368.87 621.373 370.35 621.373 cv
371.84 621.373 373.05 622.593 373.05 624.073 cv
373.05 625.563 371.84 626.773 370.35 626.773 cv
368.87 626.773 367.65 625.563 367.65 624.073 cv
@
368.82 624.123 mo
368.82 622.633 370.04 621.423 371.52 621.423 cv
373.01 621.423 374.22 622.633 374.22 624.123 cv
374.22 625.603 373.01 626.823 371.52 626.823 cv
370.04 626.823 368.82 625.603 368.82 624.123 cv
@
369.99 624.163 mo
369.99 622.673 371.21 621.463 372.69 621.463 cv
374.18 621.463 375.39 622.673 375.39 624.163 cv
375.39 625.643 374.18 626.863 372.69 626.863 cv
371.21 626.863 369.99 625.643 369.99 624.163 cv
@
371.16 624.203 mo
371.16 622.713 372.38 621.503 373.86 621.503 cv
375.35 621.503 376.56 622.713 376.56 624.203 cv
376.56 625.683 375.35 626.903 373.86 626.903 cv
372.38 626.903 371.16 625.683 371.16 624.203 cv
@
372.34 624.233 mo
372.34 622.753 373.55 621.533 375.04 621.533 cv
376.52 621.533 377.74 622.753 377.74 624.233 cv
377.74 625.723 376.52 626.933 375.04 626.933 cv
373.55 626.933 372.34 625.723 372.34 624.233 cv
@
373.51 624.273 mo
373.51 622.783 374.72 621.573 376.21 621.573 cv
377.69 621.573 378.91 622.783 378.91 624.273 cv
378.91 625.753 377.69 626.973 376.21 626.973 cv
374.72 626.973 373.51 625.753 373.51 624.273 cv
@
374.68 624.303 mo
374.68 622.813 375.89 621.603 377.38 621.603 cv
378.86 621.603 380.08 622.813 380.08 624.303 cv
380.08 625.783 378.86 627.003 377.38 627.003 cv
375.89 627.003 374.68 625.783 374.68 624.303 cv
@
375.85 624.333 mo
375.85 622.843 377.06 621.633 378.55 621.633 cv
380.03 621.633 381.25 622.843 381.25 624.333 cv
381.25 625.813 380.03 627.033 378.55 627.033 cv
377.06 627.033 375.85 625.813 375.85 624.333 cv
@
377.02 624.363 mo
377.02 622.873 378.24 621.663 379.72 621.663 cv
381.21 621.663 382.42 622.873 382.42 624.363 cv
382.42 625.843 381.21 627.063 379.72 627.063 cv
378.24 627.063 377.02 625.843 377.02 624.363 cv
@
378.19 624.393 mo
378.19 622.903 379.41 621.693 380.89 621.693 cv
382.38 621.693 383.59 622.903 383.59 624.393 cv
383.59 625.873 382.38 627.093 380.89 627.093 cv
379.41 627.093 378.19 625.873 378.19 624.393 cv
@
379.36 624.413 mo
379.36 622.933 380.58 621.713 382.06 621.713 cv
383.55 621.713 384.76 622.933 384.76 624.413 cv
384.76 625.903 383.55 627.113 382.06 627.113 cv
380.58 627.113 379.36 625.903 379.36 624.413 cv
@
380.53 624.433 mo
380.53 622.953 381.75 621.733 383.23 621.733 cv
384.72 621.733 385.93 622.953 385.93 624.433 cv
385.93 625.923 384.72 627.133 383.23 627.133 cv
381.75 627.133 380.53 625.923 380.53 624.433 cv
@
381.7 624.463 mo
381.7 622.973 382.92 621.763 384.4 621.763 cv
385.89 621.763 387.1 622.973 387.1 624.463 cv
387.1 625.943 385.89 627.163 384.4 627.163 cv
382.92 627.163 381.7 625.943 381.7 624.463 cv
@
382.88 624.483 mo
382.88 622.993 384.09 621.783 385.58 621.783 cv
387.06 621.783 388.28 622.993 388.28 624.483 cv
388.28 625.963 387.06 627.183 385.58 627.183 cv
384.09 627.183 382.88 625.963 382.88 624.483 cv
@
384.05 624.503 mo
384.05 623.013 385.26 621.803 386.75 621.803 cv
388.23 621.803 389.45 623.013 389.45 624.503 cv
389.45 625.983 388.23 627.203 386.75 627.203 cv
385.26 627.203 384.05 625.983 384.05 624.503 cv
@
385.22 624.523 mo
385.22 623.033 386.43 621.823 387.92 621.823 cv
389.4 621.823 390.62 623.033 390.62 624.523 cv
390.62 626.003 389.4 627.223 387.92 627.223 cv
386.43 627.223 385.22 626.003 385.22 624.523 cv
@
386.39 624.533 mo
386.39 623.053 387.6 621.833 389.09 621.833 cv
390.57 621.833 391.79 623.053 391.79 624.533 cv
391.79 626.023 390.57 627.233 389.09 627.233 cv
387.6 627.233 386.39 626.023 386.39 624.533 cv
@
387.56 624.553 mo
387.56 623.073 388.77 621.853 390.26 621.853 cv
391.74 621.853 392.96 623.073 392.96 624.553 cv
392.96 626.043 391.74 627.253 390.26 627.253 cv
388.77 627.253 387.56 626.043 387.56 624.553 cv
@
388.73 624.573 mo
388.73 623.083 389.95 621.873 391.43 621.873 cv
392.92 621.873 394.13 623.083 394.13 624.573 cv
394.13 626.053 392.92 627.273 391.43 627.273 cv
389.95 627.273 388.73 626.053 388.73 624.573 cv
@
389.9 624.583 mo
389.9 623.103 391.12 621.883 392.6 621.883 cv
394.09 621.883 395.3 623.103 395.3 624.583 cv
395.3 626.073 394.09 627.283 392.6 627.283 cv
391.12 627.283 389.9 626.073 389.9 624.583 cv
@
391.07 624.593 mo
391.07 623.113 392.29 621.893 393.77 621.893 cv
395.26 621.893 396.47 623.113 396.47 624.593 cv
396.47 626.083 395.26 627.293 393.77 627.293 cv
392.29 627.293 391.07 626.083 391.07 624.593 cv
@
392.24 624.613 mo
392.24 623.123 393.46 621.913 394.94 621.913 cv
396.43 621.913 397.64 623.123 397.64 624.613 cv
397.64 626.093 396.43 627.313 394.94 627.313 cv
393.46 627.313 392.24 626.093 392.24 624.613 cv
@
393.41 624.623 mo
393.41 623.133 394.63 621.923 396.11 621.923 cv
397.6 621.923 398.81 623.133 398.81 624.623 cv
398.81 626.103 397.6 627.323 396.11 627.323 cv
394.63 627.323 393.41 626.103 393.41 624.623 cv
@
394.59 624.633 mo
394.59 623.153 395.8 621.933 397.29 621.933 cv
398.77 621.933 399.99 623.153 399.99 624.633 cv
399.99 626.123 398.77 627.333 397.29 627.333 cv
395.8 627.333 394.59 626.123 394.59 624.633 cv
@
395.76 624.643 mo
395.76 623.163 396.97 621.943 398.46 621.943 cv
399.94 621.943 401.16 623.163 401.16 624.643 cv
401.16 626.133 399.94 627.343 398.46 627.343 cv
396.97 627.343 395.76 626.133 395.76 624.643 cv
@
396.93 624.653 mo
396.93 623.173 398.14 621.953 399.63 621.953 cv
401.11 621.953 402.33 623.173 402.33 624.653 cv
402.33 626.143 401.11 627.353 399.63 627.353 cv
398.14 627.353 396.93 626.143 396.93 624.653 cv
@
398.1 624.663 mo
398.1 623.183 399.31 621.963 400.8 621.963 cv
402.28 621.963 403.5 623.183 403.5 624.663 cv
403.5 626.153 402.28 627.363 400.8 627.363 cv
399.31 627.363 398.1 626.153 398.1 624.663 cv
@
399.27 624.673 mo
399.27 623.193 400.48 621.973 401.97 621.973 cv
403.45 621.973 404.67 623.193 404.67 624.673 cv
404.67 626.163 403.45 627.373 401.97 627.373 cv
400.48 627.373 399.27 626.163 399.27 624.673 cv
@
400.44 624.683 mo
400.44 623.193 401.66 621.983 403.14 621.983 cv
404.63 621.983 405.84 623.193 405.84 624.683 cv
405.84 626.163 404.63 627.383 403.14 627.383 cv
401.66 627.383 400.44 626.163 400.44 624.683 cv
@
401.61 624.693 mo
401.61 623.203 402.83 621.993 404.31 621.993 cv
405.8 621.993 407.01 623.203 407.01 624.693 cv
407.01 626.173 405.8 627.393 404.31 627.393 cv
402.83 627.393 401.61 626.173 401.61 624.693 cv
@
402.78 624.693 mo
402.78 623.213 404 621.993 405.48 621.993 cv
406.97 621.993 408.18 623.213 408.18 624.693 cv
408.18 626.183 406.97 627.393 405.48 627.393 cv
404 627.393 402.78 626.183 402.78 624.693 cv
@
403.95 624.703 mo
403.95 623.223 405.17 622.003 406.65 622.003 cv
408.14 622.003 409.35 623.223 409.35 624.703 cv
409.35 626.193 408.14 627.403 406.65 627.403 cv
405.17 627.403 403.95 626.193 403.95 624.703 cv
@
405.12 624.713 mo
405.12 623.223 406.34 622.013 407.82 622.013 cv
409.31 622.013 410.52 623.223 410.52 624.713 cv
410.52 626.193 409.31 627.413 407.82 627.413 cv
406.34 627.413 405.12 626.193 405.12 624.713 cv
@
406.3 624.713 mo
406.3 623.233 407.51 622.013 409 622.013 cv
410.48 622.013 411.7 623.233 411.7 624.713 cv
411.7 626.203 410.48 627.413 409 627.413 cv
407.51 627.413 406.3 626.203 406.3 624.713 cv
@
407.47 624.723 mo
407.47 623.233 408.68 622.023 410.17 622.023 cv
411.65 622.023 412.87 623.233 412.87 624.723 cv
412.87 626.203 411.65 627.423 410.17 627.423 cv
408.68 627.423 407.47 626.203 407.47 624.723 cv
@
408.64 624.723 mo
408.64 623.243 409.85 622.023 411.34 622.023 cv
412.82 622.023 414.04 623.243 414.04 624.723 cv
414.04 626.213 412.82 627.423 411.34 627.423 cv
409.85 627.423 408.64 626.213 408.64 624.723 cv
@
409.81 624.733 mo
409.81 623.243 411.02 622.033 412.51 622.033 cv
413.99 622.033 415.21 623.243 415.21 624.733 cv
415.21 626.213 413.99 627.433 412.51 627.433 cv
411.02 627.433 409.81 626.213 409.81 624.733 cv
@
410.98 624.733 mo
410.98 623.253 412.19 622.033 413.68 622.033 cv
415.16 622.033 416.38 623.253 416.38 624.733 cv
416.38 626.223 415.16 627.433 413.68 627.433 cv
412.19 627.433 410.98 626.223 410.98 624.733 cv
@
412.15 624.743 mo
412.15 623.253 413.37 622.043 414.85 622.043 cv
416.34 622.043 417.55 623.253 417.55 624.743 cv
417.55 626.223 416.34 627.443 414.85 627.443 cv
413.37 627.443 412.15 626.223 412.15 624.743 cv
@
413.32 624.743 mo
413.32 623.263 414.54 622.043 416.02 622.043 cv
417.51 622.043 418.72 623.263 418.72 624.743 cv
418.72 626.233 417.51 627.443 416.02 627.443 cv
414.54 627.443 413.32 626.233 413.32 624.743 cv
@
414.49 624.753 mo
414.49 623.263 415.71 622.053 417.19 622.053 cv
418.68 622.053 419.89 623.263 419.89 624.753 cv
419.89 626.233 418.68 627.453 417.19 627.453 cv
415.71 627.453 414.49 626.233 414.49 624.753 cv
@
415.66 624.753 mo
415.66 623.263 416.88 622.053 418.36 622.053 cv
419.85 622.053 421.06 623.263 421.06 624.753 cv
421.06 626.233 419.85 627.453 418.36 627.453 cv
416.88 627.453 415.66 626.233 415.66 624.753 cv
@
416.83 624.753 mo
416.83 623.273 418.05 622.053 419.53 622.053 cv
421.02 622.053 422.23 623.273 422.23 624.753 cv
422.23 626.243 421.02 627.453 419.53 627.453 cv
418.05 627.453 416.83 626.243 416.83 624.753 cv
@
418.01 624.763 mo
418.01 623.273 419.22 622.063 420.71 622.063 cv
422.19 622.063 423.41 623.273 423.41 624.763 cv
423.41 626.243 422.19 627.463 420.71 627.463 cv
419.22 627.463 418.01 626.243 418.01 624.763 cv
@
419.18 624.763 mo
419.18 623.273 420.39 622.063 421.88 622.063 cv
423.36 622.063 424.58 623.273 424.58 624.763 cv
424.58 626.243 423.36 627.463 421.88 627.463 cv
420.39 627.463 419.18 626.243 419.18 624.763 cv
@
420.35 624.763 mo
420.35 623.283 421.56 622.063 423.05 622.063 cv
424.53 622.063 425.75 623.283 425.75 624.763 cv
425.75 626.253 424.53 627.463 423.05 627.463 cv
421.56 627.463 420.35 626.253 420.35 624.763 cv
@
421.52 624.763 mo
421.52 623.283 422.73 622.063 424.22 622.063 cv
425.7 622.063 426.92 623.283 426.92 624.763 cv
426.92 626.253 425.7 627.463 424.22 627.463 cv
422.73 627.463 421.52 626.253 421.52 624.763 cv
@
422.69 624.773 mo
422.69 623.283 423.91 622.073 425.39 622.073 cv
426.88 622.073 428.09 623.283 428.09 624.773 cv
428.09 626.253 426.88 627.473 425.39 627.473 cv
423.91 627.473 422.69 626.253 422.69 624.773 cv
@
423.86 624.773 mo
423.86 623.283 425.08 622.073 426.56 622.073 cv
428.05 622.073 429.26 623.283 429.26 624.773 cv
429.26 626.253 428.05 627.473 426.56 627.473 cv
425.08 627.473 423.86 626.253 423.86 624.773 cv
@
425.03 624.773 mo
425.03 623.293 426.25 622.073 427.73 622.073 cv
429.22 622.073 430.43 623.293 430.43 624.773 cv
430.43 626.263 429.22 627.473 427.73 627.473 cv
426.25 627.473 425.03 626.263 425.03 624.773 cv
@
426.2 624.773 mo
426.2 623.293 427.42 622.073 428.9 622.073 cv
430.39 622.073 431.6 623.293 431.6 624.773 cv
431.6 626.263 430.39 627.473 428.9 627.473 cv
427.42 627.473 426.2 626.263 426.2 624.773 cv
@
427.37 624.783 mo
427.37 623.293 428.59 622.083 430.07 622.083 cv
431.56 622.083 432.77 623.293 432.77 624.783 cv
432.77 626.263 431.56 627.483 430.07 627.483 cv
428.59 627.483 427.37 626.263 427.37 624.783 cv
@
428.55 624.783 mo
428.55 623.293 429.76 622.083 431.25 622.083 cv
432.73 622.083 433.95 623.293 433.95 624.783 cv
433.95 626.263 432.73 627.483 431.25 627.483 cv
429.76 627.483 428.55 626.263 428.55 624.783 cv
@
429.72 624.783 mo
429.72 623.293 430.93 622.083 432.42 622.083 cv
433.9 622.083 435.12 623.293 435.12 624.783 cv
435.12 626.263 433.9 627.483 432.42 627.483 cv
430.93 627.483 429.72 626.263 429.72 624.783 cv
@
430.89 624.783 mo
430.89 623.303 432.1 622.083 433.59 622.083 cv
435.07 622.083 436.29 623.303 436.29 624.783 cv
436.29 626.273 435.07 627.483 433.59 627.483 cv
432.1 627.483 430.89 626.273 430.89 624.783 cv
@
432.06 624.783 mo
432.06 623.303 433.27 622.083 434.76 622.083 cv
436.24 622.083 437.46 623.303 437.46 624.783 cv
437.46 626.273 436.24 627.483 434.76 627.483 cv
433.27 627.483 432.06 626.273 432.06 624.783 cv
@
433.23 624.783 mo
433.23 623.303 434.44 622.083 435.93 622.083 cv
437.41 622.083 438.63 623.303 438.63 624.783 cv
438.63 626.273 437.41 627.483 435.93 627.483 cv
434.44 627.483 433.23 626.273 433.23 624.783 cv
@
434.4 624.783 mo
434.4 623.303 435.62 622.083 437.1 622.083 cv
438.59 622.083 439.8 623.303 439.8 624.783 cv
439.8 626.273 438.59 627.483 437.1 627.483 cv
435.62 627.483 434.4 626.273 434.4 624.783 cv
@
435.57 624.793 mo
435.57 623.303 436.79 622.093 438.27 622.093 cv
439.76 622.093 440.97 623.303 440.97 624.793 cv
440.97 626.273 439.76 627.493 438.27 627.493 cv
436.79 627.493 435.57 626.273 435.57 624.793 cv
@
436.74 624.793 mo
436.74 623.303 437.96 622.093 439.44 622.093 cv
440.93 622.093 442.14 623.303 442.14 624.793 cv
442.14 626.273 440.93 627.493 439.44 627.493 cv
437.96 627.493 436.74 626.273 436.74 624.793 cv
@
437.91 624.793 mo
437.91 623.303 439.13 622.093 440.61 622.093 cv
442.1 622.093 443.31 623.303 443.31 624.793 cv
443.31 626.273 442.1 627.493 440.61 627.493 cv
439.13 627.493 437.91 626.273 437.91 624.793 cv
@
439.08 624.793 mo
439.08 623.303 440.3 622.093 441.78 622.093 cv
443.27 622.093 444.48 623.303 444.48 624.793 cv
444.48 626.273 443.27 627.493 441.78 627.493 cv
440.3 627.493 439.08 626.273 439.08 624.793 cv
@
440.26 624.793 mo
440.26 623.313 441.47 622.093 442.96 622.093 cv
444.44 622.093 445.66 623.313 445.66 624.793 cv
445.66 626.283 444.44 627.493 442.96 627.493 cv
441.47 627.493 440.26 626.283 440.26 624.793 cv
@
441.43 624.793 mo
441.43 623.313 442.64 622.093 444.13 622.093 cv
445.61 622.093 446.83 623.313 446.83 624.793 cv
446.83 626.283 445.61 627.493 444.13 627.493 cv
442.64 627.493 441.43 626.283 441.43 624.793 cv
@
442.6 624.793 mo
442.6 623.313 443.81 622.093 445.3 622.093 cv
446.78 622.093 448 623.313 448 624.793 cv
448 626.283 446.78 627.493 445.3 627.493 cv
443.81 627.493 442.6 626.283 442.6 624.793 cv
@
443.77 624.793 mo
443.77 623.313 444.98 622.093 446.47 622.093 cv
447.95 622.093 449.17 623.313 449.17 624.793 cv
449.17 626.283 447.95 627.493 446.47 627.493 cv
444.98 627.493 443.77 626.283 443.77 624.793 cv
@
444.94 624.793 mo
444.94 623.313 446.15 622.093 447.64 622.093 cv
449.12 622.093 450.34 623.313 450.34 624.793 cv
450.34 626.283 449.12 627.493 447.64 627.493 cv
446.15 627.493 444.94 626.283 444.94 624.793 cv
@
446.11 624.793 mo
446.11 623.313 447.33 622.093 448.81 622.093 cv
450.3 622.093 451.51 623.313 451.51 624.793 cv
451.51 626.283 450.3 627.493 448.81 627.493 cv
447.33 627.493 446.11 626.283 446.11 624.793 cv
@
447.28 624.793 mo
447.28 623.313 448.5 622.093 449.98 622.093 cv
451.47 622.093 452.68 623.313 452.68 624.793 cv
452.68 626.283 451.47 627.493 449.98 627.493 cv
448.5 627.493 447.28 626.283 447.28 624.793 cv
@
448.45 624.803 mo
448.45 623.313 449.67 622.103 451.15 622.103 cv
452.64 622.103 453.85 623.313 453.85 624.803 cv
453.85 626.283 452.64 627.503 451.15 627.503 cv
449.67 627.503 448.45 626.283 448.45 624.803 cv
@
449.62 624.803 mo
449.62 623.313 450.84 622.103 452.32 622.103 cv
453.81 622.103 455.02 623.313 455.02 624.803 cv
455.02 626.283 453.81 627.503 452.32 627.503 cv
450.84 627.503 449.62 626.283 449.62 624.803 cv
@
450.79 624.803 mo
450.79 623.313 452.01 622.103 453.49 622.103 cv
454.98 622.103 456.19 623.313 456.19 624.803 cv
456.19 626.283 454.98 627.503 453.49 627.503 cv
452.01 627.503 450.79 626.283 450.79 624.803 cv
@
451.97 624.803 mo
451.97 623.313 453.18 622.103 454.67 622.103 cv
456.15 622.103 457.37 623.313 457.37 624.803 cv
457.37 626.283 456.15 627.503 454.67 627.503 cv
453.18 627.503 451.97 626.283 451.97 624.803 cv
@
453.14 624.803 mo
453.14 623.313 454.35 622.103 455.84 622.103 cv
457.32 622.103 458.54 623.313 458.54 624.803 cv
458.54 626.283 457.32 627.503 455.84 627.503 cv
454.35 627.503 453.14 626.283 453.14 624.803 cv
@
454.31 624.803 mo
454.31 623.313 455.52 622.103 457.01 622.103 cv
458.49 622.103 459.71 623.313 459.71 624.803 cv
459.71 626.283 458.49 627.503 457.01 627.503 cv
455.52 627.503 454.31 626.283 454.31 624.803 cv
@
455.48 624.803 mo
455.48 623.313 456.69 622.103 458.18 622.103 cv
459.66 622.103 460.88 623.313 460.88 624.803 cv
460.88 626.283 459.66 627.503 458.18 627.503 cv
456.69 627.503 455.48 626.283 455.48 624.803 cv
@
456.65 624.803 mo
456.65 623.313 457.86 622.103 459.35 622.103 cv
460.83 622.103 462.05 623.313 462.05 624.803 cv
462.05 626.283 460.83 627.503 459.35 627.503 cv
457.86 627.503 456.65 626.283 456.65 624.803 cv
@
457.82 624.803 mo
457.82 623.313 459.04 622.103 460.52 622.103 cv
462.01 622.103 463.22 623.313 463.22 624.803 cv
463.22 626.283 462.01 627.503 460.52 627.503 cv
459.04 627.503 457.82 626.283 457.82 624.803 cv
@
458.99 624.803 mo
458.99 623.313 460.21 622.103 461.69 622.103 cv
463.18 622.103 464.39 623.313 464.39 624.803 cv
464.39 626.283 463.18 627.503 461.69 627.503 cv
460.21 627.503 458.99 626.283 458.99 624.803 cv
@
460.16 624.803 mo
460.16 623.313 461.38 622.103 462.86 622.103 cv
464.35 622.103 465.56 623.313 465.56 624.803 cv
465.56 626.283 464.35 627.503 462.86 627.503 cv
461.38 627.503 460.16 626.283 460.16 624.803 cv
@
461.33 624.803 mo
461.33 623.313 462.55 622.103 464.03 622.103 cv
465.52 622.103 466.73 623.313 466.73 624.803 cv
466.73 626.283 465.52 627.503 464.03 627.503 cv
462.55 627.503 461.33 626.283 461.33 624.803 cv
@
462.5 624.803 mo
462.5 623.313 463.72 622.103 465.2 622.103 cv
466.69 622.103 467.9 623.313 467.9 624.803 cv
467.9 626.283 466.69 627.503 465.2 627.503 cv
463.72 627.503 462.5 626.283 462.5 624.803 cv
@
463.68 624.803 mo
463.68 623.313 464.89 622.103 466.38 622.103 cv
467.86 622.103 469.08 623.313 469.08 624.803 cv
469.08 626.283 467.86 627.503 466.38 627.503 cv
464.89 627.503 463.68 626.283 463.68 624.803 cv
@
464.85 624.803 mo
464.85 623.323 466.06 622.103 467.55 622.103 cv
469.03 622.103 470.25 623.323 470.25 624.803 cv
470.25 626.293 469.03 627.503 467.55 627.503 cv
466.06 627.503 464.85 626.293 464.85 624.803 cv
@
466.02 624.803 mo
466.02 623.323 467.23 622.103 468.72 622.103 cv
470.2 622.103 471.42 623.323 471.42 624.803 cv
471.42 626.293 470.2 627.503 468.72 627.503 cv
467.23 627.503 466.02 626.293 466.02 624.803 cv
@
467.19 624.803 mo
467.19 623.323 468.4 622.103 469.89 622.103 cv
471.37 622.103 472.59 623.323 472.59 624.803 cv
472.59 626.293 471.37 627.503 469.89 627.503 cv
468.4 627.503 467.19 626.293 467.19 624.803 cv
@
468.36 624.803 mo
468.36 623.323 469.58 622.103 471.06 622.103 cv
472.55 622.103 473.76 623.323 473.76 624.803 cv
473.76 626.293 472.55 627.503 471.06 627.503 cv
469.58 627.503 468.36 626.293 468.36 624.803 cv
@
469.53 624.803 mo
469.53 623.323 470.75 622.103 472.23 622.103 cv
473.72 622.103 474.93 623.323 474.93 624.803 cv
474.93 626.293 473.72 627.503 472.23 627.503 cv
470.75 627.503 469.53 626.293 469.53 624.803 cv
@
470.7 624.803 mo
470.7 623.323 471.92 622.103 473.4 622.103 cv
474.89 622.103 476.1 623.323 476.1 624.803 cv
476.1 626.293 474.89 627.503 473.4 627.503 cv
471.92 627.503 470.7 626.293 470.7 624.803 cv
@
471.87 624.803 mo
471.87 623.323 473.09 622.103 474.57 622.103 cv
476.06 622.103 477.27 623.323 477.27 624.803 cv
477.27 626.293 476.06 627.503 474.57 627.503 cv
473.09 627.503 471.87 626.293 471.87 624.803 cv
@
473.04 624.803 mo
473.04 623.323 474.26 622.103 475.74 622.103 cv
477.23 622.103 478.44 623.323 478.44 624.803 cv
478.44 626.293 477.23 627.503 475.74 627.503 cv
474.26 627.503 473.04 626.293 473.04 624.803 cv
@
474.22 624.803 mo
474.22 623.323 475.43 622.103 476.92 622.103 cv
478.4 622.103 479.62 623.323 479.62 624.803 cv
479.62 626.293 478.4 627.503 476.92 627.503 cv
475.43 627.503 474.22 626.293 474.22 624.803 cv
@
475.39 624.803 mo
475.39 623.323 476.6 622.103 478.09 622.103 cv
479.57 622.103 480.79 623.323 480.79 624.803 cv
480.79 626.293 479.57 627.503 478.09 627.503 cv
476.6 627.503 475.39 626.293 475.39 624.803 cv
@
476.56 624.803 mo
476.56 623.323 477.77 622.103 479.26 622.103 cv
480.74 622.103 481.96 623.323 481.96 624.803 cv
481.96 626.293 480.74 627.503 479.26 627.503 cv
477.77 627.503 476.56 626.293 476.56 624.803 cv
@
477.73 624.803 mo
477.73 623.323 478.94 622.103 480.43 622.103 cv
481.91 622.103 483.13 623.323 483.13 624.803 cv
483.13 626.293 481.91 627.503 480.43 627.503 cv
478.94 627.503 477.73 626.293 477.73 624.803 cv
@
478.9 624.803 mo
478.9 623.323 480.11 622.103 481.6 622.103 cv
483.08 622.103 484.3 623.323 484.3 624.803 cv
484.3 626.293 483.08 627.503 481.6 627.503 cv
480.11 627.503 478.9 626.293 478.9 624.803 cv
@
480.07 624.803 mo
480.07 623.323 481.29 622.103 482.77 622.103 cv
484.26 622.103 485.47 623.323 485.47 624.803 cv
485.47 626.293 484.26 627.503 482.77 627.503 cv
481.29 627.503 480.07 626.293 480.07 624.803 cv
@
481.24 624.803 mo
481.24 623.323 482.46 622.103 483.94 622.103 cv
485.43 622.103 486.64 623.323 486.64 624.803 cv
486.64 626.293 485.43 627.503 483.94 627.503 cv
482.46 627.503 481.24 626.293 481.24 624.803 cv
@
482.41 624.803 mo
482.41 623.323 483.63 622.103 485.11 622.103 cv
486.6 622.103 487.81 623.323 487.81 624.803 cv
487.81 626.293 486.6 627.503 485.11 627.503 cv
483.63 627.503 482.41 626.293 482.41 624.803 cv
@
483.58 624.803 mo
483.58 623.323 484.8 622.103 486.28 622.103 cv
487.77 622.103 488.98 623.323 488.98 624.803 cv
488.98 626.293 487.77 627.503 486.28 627.503 cv
484.8 627.503 483.58 626.293 483.58 624.803 cv
@
484.75 624.803 mo
484.75 623.323 485.97 622.103 487.45 622.103 cv
488.94 622.103 490.15 623.323 490.15 624.803 cv
490.15 626.293 488.94 627.503 487.45 627.503 cv
485.97 627.503 484.75 626.293 484.75 624.803 cv
@
485.93 624.803 mo
485.93 623.323 487.14 622.103 488.63 622.103 cv
490.11 622.103 491.33 623.323 491.33 624.803 cv
491.33 626.293 490.11 627.503 488.63 627.503 cv
487.14 627.503 485.93 626.293 485.93 624.803 cv
@
487.1 624.803 mo
487.1 623.323 488.31 622.103 489.8 622.103 cv
491.28 622.103 492.5 623.323 492.5 624.803 cv
492.5 626.293 491.28 627.503 489.8 627.503 cv
488.31 627.503 487.1 626.293 487.1 624.803 cv
@
488.27 624.803 mo
488.27 623.323 489.48 622.103 490.97 622.103 cv
492.45 622.103 493.67 623.323 493.67 624.803 cv
493.67 626.293 492.45 627.503 490.97 627.503 cv
489.48 627.503 488.27 626.293 488.27 624.803 cv
@
489.44 624.803 mo
489.44 623.323 490.65 622.103 492.14 622.103 cv
493.62 622.103 494.84 623.323 494.84 624.803 cv
494.84 626.293 493.62 627.503 492.14 627.503 cv
490.65 627.503 489.44 626.293 489.44 624.803 cv
@
490.61 624.803 mo
490.61 623.323 491.82 622.103 493.31 622.103 cv
494.79 622.103 496.01 623.323 496.01 624.803 cv
496.01 626.293 494.79 627.503 493.31 627.503 cv
491.82 627.503 490.61 626.293 490.61 624.803 cv
@
491.78 624.803 mo
491.78 623.323 493 622.103 494.48 622.103 cv
495.97 622.103 497.18 623.323 497.18 624.803 cv
497.18 626.293 495.97 627.503 494.48 627.503 cv
493 627.503 491.78 626.293 491.78 624.803 cv
@
492.95 624.803 mo
492.95 623.323 494.17 622.103 495.65 622.103 cv
497.14 622.103 498.35 623.323 498.35 624.803 cv
498.35 626.293 497.14 627.503 495.65 627.503 cv
494.17 627.503 492.95 626.293 492.95 624.803 cv
@
494.12 624.803 mo
494.12 623.323 495.34 622.103 496.82 622.103 cv
498.31 622.103 499.52 623.323 499.52 624.803 cv
499.52 626.293 498.31 627.503 496.82 627.503 cv
495.34 627.503 494.12 626.293 494.12 624.803 cv
@
495.29 624.803 mo
495.29 623.323 496.51 622.103 497.99 622.103 cv
499.48 622.103 500.69 623.323 500.69 624.803 cv
500.69 626.293 499.48 627.503 497.99 627.503 cv
496.51 627.503 495.29 626.293 495.29 624.803 cv
@
496.46 624.803 mo
496.46 623.323 497.68 622.103 499.16 622.103 cv
500.65 622.103 501.86 623.323 501.86 624.803 cv
501.86 626.293 500.65 627.503 499.16 627.503 cv
497.68 627.503 496.46 626.293 496.46 624.803 cv
@
497.64 624.803 mo
497.64 623.323 498.85 622.103 500.34 622.103 cv
501.82 622.103 503.04 623.323 503.04 624.803 cv
503.04 626.293 501.82 627.503 500.34 627.503 cv
498.85 627.503 497.64 626.293 497.64 624.803 cv
@
498.81 624.803 mo
498.81 623.323 500.02 622.103 501.51 622.103 cv
502.99 622.103 504.21 623.323 504.21 624.803 cv
504.21 626.293 502.99 627.503 501.51 627.503 cv
500.02 627.503 498.81 626.293 498.81 624.803 cv
@
499.98 624.803 mo
499.98 623.323 501.19 622.103 502.68 622.103 cv
504.16 622.103 505.38 623.323 505.38 624.803 cv
505.38 626.293 504.16 627.503 502.68 627.503 cv
501.19 627.503 499.98 626.293 499.98 624.803 cv
@
501.15 624.803 mo
501.15 623.323 502.36 622.103 503.85 622.103 cv
505.33 622.103 506.55 623.323 506.55 624.803 cv
506.55 626.293 505.33 627.503 503.85 627.503 cv
502.36 627.503 501.15 626.293 501.15 624.803 cv
@
502.32 624.803 mo
502.32 623.323 503.53 622.103 505.02 622.103 cv
506.5 622.103 507.72 623.323 507.72 624.803 cv
507.72 626.293 506.5 627.503 505.02 627.503 cv
503.53 627.503 502.32 626.293 502.32 624.803 cv
@
503.49 624.803 mo
503.49 623.323 504.71 622.103 506.19 622.103 cv
507.68 622.103 508.89 623.323 508.89 624.803 cv
508.89 626.293 507.68 627.503 506.19 627.503 cv
504.71 627.503 503.49 626.293 503.49 624.803 cv
@
504.66 624.803 mo
504.66 623.323 505.88 622.103 507.36 622.103 cv
508.85 622.103 510.06 623.323 510.06 624.803 cv
510.06 626.293 508.85 627.503 507.36 627.503 cv
505.88 627.503 504.66 626.293 504.66 624.803 cv
@
505.83 624.803 mo
505.83 623.323 507.05 622.103 508.53 622.103 cv
510.02 622.103 511.23 623.323 511.23 624.803 cv
511.23 626.293 510.02 627.503 508.53 627.503 cv
507.05 627.503 505.83 626.293 505.83 624.803 cv
@
507 624.803 mo
507 623.323 508.22 622.103 509.7 622.103 cv
511.19 622.103 512.4 623.323 512.4 624.803 cv
512.4 626.293 511.19 627.503 509.7 627.503 cv
508.22 627.503 507 626.293 507 624.803 cv
@
508.17 624.803 mo
508.17 623.323 509.39 622.103 510.87 622.103 cv
512.36 622.103 513.57 623.323 513.57 624.803 cv
513.57 626.293 512.36 627.503 510.87 627.503 cv
509.39 627.503 508.17 626.293 508.17 624.803 cv
@
509.35 624.803 mo
509.35 623.323 510.56 622.103 512.05 622.103 cv
513.53 622.103 514.75 623.323 514.75 624.803 cv
514.75 626.293 513.53 627.503 512.05 627.503 cv
510.56 627.503 509.35 626.293 509.35 624.803 cv
@
510.52 624.803 mo
510.52 623.323 511.73 622.103 513.22 622.103 cv
514.7 622.103 515.92 623.323 515.92 624.803 cv
515.92 626.293 514.7 627.503 513.22 627.503 cv
511.73 627.503 510.52 626.293 510.52 624.803 cv
@
511.69 624.803 mo
511.69 623.323 512.9 622.103 514.39 622.103 cv
515.87 622.103 517.09 623.323 517.09 624.803 cv
517.09 626.293 515.87 627.503 514.39 627.503 cv
512.9 627.503 511.69 626.293 511.69 624.803 cv
@
512.86 624.803 mo
512.86 623.323 514.07 622.103 515.56 622.103 cv
517.04 622.103 518.26 623.323 518.26 624.803 cv
518.26 626.293 517.04 627.503 515.56 627.503 cv
514.07 627.503 512.86 626.293 512.86 624.803 cv
@
514.03 624.803 mo
514.03 623.323 515.25 622.103 516.73 622.103 cv
518.22 622.103 519.43 623.323 519.43 624.803 cv
519.43 626.293 518.22 627.503 516.73 627.503 cv
515.25 627.503 514.03 626.293 514.03 624.803 cv
@
515.2 624.803 mo
515.2 623.323 516.42 622.103 517.9 622.103 cv
519.39 622.103 520.6 623.323 520.6 624.803 cv
520.6 626.293 519.39 627.503 517.9 627.503 cv
516.42 627.503 515.2 626.293 515.2 624.803 cv
@
516.37 624.803 mo
516.37 623.323 517.59 622.103 519.07 622.103 cv
520.56 622.103 521.77 623.323 521.77 624.803 cv
521.77 626.293 520.56 627.503 519.07 627.503 cv
517.59 627.503 516.37 626.293 516.37 624.803 cv
@
517.54 624.803 mo
517.54 623.323 518.76 622.103 520.24 622.103 cv
521.73 622.103 522.94 623.323 522.94 624.803 cv
522.94 626.293 521.73 627.503 520.24 627.503 cv
518.76 627.503 517.54 626.293 517.54 624.803 cv
@
518.71 624.803 mo
518.71 623.323 519.93 622.103 521.41 622.103 cv
522.9 622.103 524.11 623.323 524.11 624.803 cv
524.11 626.293 522.9 627.503 521.41 627.503 cv
519.93 627.503 518.71 626.293 518.71 624.803 cv
@
519.89 624.803 mo
519.89 623.323 521.1 622.103 522.59 622.103 cv
524.07 622.103 525.29 623.323 525.29 624.803 cv
525.29 626.293 524.07 627.503 522.59 627.503 cv
521.1 627.503 519.89 626.293 519.89 624.803 cv
@
521.06 624.803 mo
521.06 623.323 522.27 622.103 523.76 622.103 cv
525.24 622.103 526.46 623.323 526.46 624.803 cv
526.46 626.293 525.24 627.503 523.76 627.503 cv
522.27 627.503 521.06 626.293 521.06 624.803 cv
@
522.23 624.803 mo
522.23 623.323 523.44 622.103 524.93 622.103 cv
526.41 622.103 527.63 623.323 527.63 624.803 cv
527.63 626.293 526.41 627.503 524.93 627.503 cv
523.44 627.503 522.23 626.293 522.23 624.803 cv
@
523.4 624.803 mo
523.4 623.323 524.61 622.103 526.1 622.103 cv
527.58 622.103 528.8 623.323 528.8 624.803 cv
528.8 626.293 527.58 627.503 526.1 627.503 cv
524.61 627.503 523.4 626.293 523.4 624.803 cv
@
524.57 624.803 mo
524.57 623.323 525.78 622.103 527.27 622.103 cv
528.75 622.103 529.97 623.323 529.97 624.803 cv
529.97 626.293 528.75 627.503 527.27 627.503 cv
525.78 627.503 524.57 626.293 524.57 624.803 cv
@
525.74 624.803 mo
525.74 623.323 526.96 622.103 528.44 622.103 cv
529.93 622.103 531.14 623.323 531.14 624.803 cv
531.14 626.293 529.93 627.503 528.44 627.503 cv
526.96 627.503 525.74 626.293 525.74 624.803 cv
@
526.91 624.803 mo
526.91 623.323 528.13 622.103 529.61 622.103 cv
531.1 622.103 532.31 623.323 532.31 624.803 cv
532.31 626.293 531.1 627.503 529.61 627.503 cv
528.13 627.503 526.91 626.293 526.91 624.803 cv
@
528.08 624.803 mo
528.08 623.323 529.3 622.103 530.78 622.103 cv
532.27 622.103 533.48 623.323 533.48 624.803 cv
533.48 626.293 532.27 627.503 530.78 627.503 cv
529.3 627.503 528.08 626.293 528.08 624.803 cv
@
529.25 624.803 mo
529.25 623.323 530.47 622.103 531.95 622.103 cv
533.44 622.103 534.65 623.323 534.65 624.803 cv
534.65 626.293 533.44 627.503 531.95 627.503 cv
530.47 627.503 529.25 626.293 529.25 624.803 cv
@
530.42 624.803 mo
530.42 623.323 531.64 622.103 533.12 622.103 cv
534.61 622.103 535.82 623.323 535.82 624.803 cv
535.82 626.293 534.61 627.503 533.12 627.503 cv
531.64 627.503 530.42 626.293 530.42 624.803 cv
@
531.6 624.803 mo
531.6 623.323 532.81 622.103 534.3 622.103 cv
535.78 622.103 537 623.323 537 624.803 cv
537 626.293 535.78 627.503 534.3 627.503 cv
532.81 627.503 531.6 626.293 531.6 624.803 cv
@
532.77 624.803 mo
532.77 623.323 533.98 622.103 535.47 622.103 cv
536.95 622.103 538.17 623.323 538.17 624.803 cv
538.17 626.293 536.95 627.503 535.47 627.503 cv
533.98 627.503 532.77 626.293 532.77 624.803 cv
@
533.94 624.803 mo
533.94 623.323 535.15 622.103 536.64 622.103 cv
538.12 622.103 539.34 623.323 539.34 624.803 cv
539.34 626.293 538.12 627.503 536.64 627.503 cv
535.15 627.503 533.94 626.293 533.94 624.803 cv
@
535.11 624.803 mo
535.11 623.323 536.32 622.103 537.81 622.103 cv
539.29 622.103 540.51 623.323 540.51 624.803 cv
540.51 626.293 539.29 627.503 537.81 627.503 cv
536.32 627.503 535.11 626.293 535.11 624.803 cv
@
536.28 624.803 mo
536.28 623.323 537.49 622.103 538.98 622.103 cv
540.46 622.103 541.68 623.323 541.68 624.803 cv
541.68 626.293 540.46 627.503 538.98 627.503 cv
537.49 627.503 536.28 626.293 536.28 624.803 cv
@
537.45 624.803 mo
537.45 623.323 538.67 622.103 540.15 622.103 cv
541.64 622.103 542.85 623.323 542.85 624.803 cv
542.85 626.293 541.64 627.503 540.15 627.503 cv
538.67 627.503 537.45 626.293 537.45 624.803 cv
@
538.62 624.803 mo
538.62 623.323 539.84 622.103 541.32 622.103 cv
542.81 622.103 544.02 623.323 544.02 624.803 cv
544.02 626.293 542.81 627.503 541.32 627.503 cv
539.84 627.503 538.62 626.293 538.62 624.803 cv
@
539.79 624.803 mo
539.79 623.323 541.01 622.103 542.49 622.103 cv
543.98 622.103 545.19 623.323 545.19 624.803 cv
545.19 626.293 543.98 627.503 542.49 627.503 cv
541.01 627.503 539.79 626.293 539.79 624.803 cv
@
540.96 624.803 mo
540.96 623.323 542.18 622.103 543.66 622.103 cv
545.15 622.103 546.36 623.323 546.36 624.803 cv
546.36 626.293 545.15 627.503 543.66 627.503 cv
542.18 627.503 540.96 626.293 540.96 624.803 cv
@
542.13 624.803 mo
542.13 623.323 543.35 622.103 544.83 622.103 cv
546.32 622.103 547.53 623.323 547.53 624.803 cv
547.53 626.293 546.32 627.503 544.83 627.503 cv
543.35 627.503 542.13 626.293 542.13 624.803 cv
@
543.31 624.803 mo
543.31 623.323 544.52 622.103 546.01 622.103 cv
547.49 622.103 548.71 623.323 548.71 624.803 cv
548.71 626.293 547.49 627.503 546.01 627.503 cv
544.52 627.503 543.31 626.293 543.31 624.803 cv
@
544.48 624.803 mo
544.48 623.323 545.69 622.103 547.18 622.103 cv
548.66 622.103 549.88 623.323 549.88 624.803 cv
549.88 626.293 548.66 627.503 547.18 627.503 cv
545.69 627.503 544.48 626.293 544.48 624.803 cv
@
545.65 624.803 mo
545.65 623.323 546.86 622.103 548.35 622.103 cv
549.83 622.103 551.05 623.323 551.05 624.803 cv
551.05 626.293 549.83 627.503 548.35 627.503 cv
546.86 627.503 545.65 626.293 545.65 624.803 cv
@
546.82 624.803 mo
546.82 623.323 548.03 622.103 549.52 622.103 cv
551 622.103 552.22 623.323 552.22 624.803 cv
552.22 626.293 551 627.503 549.52 627.503 cv
548.03 627.503 546.82 626.293 546.82 624.803 cv
@
547.99 624.803 mo
547.99 623.323 549.2 622.103 550.69 622.103 cv
552.17 622.103 553.39 623.323 553.39 624.803 cv
553.39 626.293 552.17 627.503 550.69 627.503 cv
549.2 627.503 547.99 626.293 547.99 624.803 cv
@
549.16 624.803 mo
549.16 623.323 550.38 622.103 551.86 622.103 cv
553.35 622.103 554.56 623.323 554.56 624.803 cv
554.56 626.293 553.35 627.503 551.86 627.503 cv
550.38 627.503 549.16 626.293 549.16 624.803 cv
@
550.33 624.803 mo
550.33 623.323 551.55 622.103 553.03 622.103 cv
554.52 622.103 555.73 623.323 555.73 624.803 cv
555.73 626.293 554.52 627.503 553.03 627.503 cv
551.55 627.503 550.33 626.293 550.33 624.803 cv
@
551.5 624.803 mo
551.5 623.323 552.72 622.103 554.2 622.103 cv
555.69 622.103 556.9 623.323 556.9 624.803 cv
556.9 626.293 555.69 627.503 554.2 627.503 cv
552.72 627.503 551.5 626.293 551.5 624.803 cv
@
552.67 624.803 mo
552.67 623.323 553.89 622.103 555.37 622.103 cv
556.86 622.103 558.07 623.323 558.07 624.803 cv
558.07 626.293 556.86 627.503 555.37 627.503 cv
553.89 627.503 552.67 626.293 552.67 624.803 cv
@
553.84 624.803 mo
553.84 623.323 555.06 622.103 556.54 622.103 cv
558.03 622.103 559.24 623.323 559.24 624.803 cv
559.24 626.293 558.03 627.503 556.54 627.503 cv
555.06 627.503 553.84 626.293 553.84 624.803 cv
@
555.02 624.803 mo
555.02 623.323 556.23 622.103 557.72 622.103 cv
559.2 622.103 560.42 623.323 560.42 624.803 cv
560.42 626.293 559.2 627.503 557.72 627.503 cv
556.23 627.503 555.02 626.293 555.02 624.803 cv
@
556.19 624.803 mo
556.19 623.323 557.4 622.103 558.89 622.103 cv
560.37 622.103 561.59 623.323 561.59 624.803 cv
561.59 626.293 560.37 627.503 558.89 627.503 cv
557.4 627.503 556.19 626.293 556.19 624.803 cv
@
557.36 624.803 mo
557.36 623.323 558.57 622.103 560.06 622.103 cv
561.54 622.103 562.76 623.323 562.76 624.803 cv
562.76 626.293 561.54 627.503 560.06 627.503 cv
558.57 627.503 557.36 626.293 557.36 624.803 cv
@
558.53 624.803 mo
558.53 623.323 559.74 622.103 561.23 622.103 cv
562.71 622.103 563.93 623.323 563.93 624.803 cv
563.93 626.293 562.71 627.503 561.23 627.503 cv
559.74 627.503 558.53 626.293 558.53 624.803 cv
@
559.7 624.803 mo
559.7 623.323 560.92 622.103 562.4 622.103 cv
563.89 622.103 565.1 623.323 565.1 624.803 cv
565.1 626.293 563.89 627.503 562.4 627.503 cv
560.92 627.503 559.7 626.293 559.7 624.803 cv
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/XLUSIL+Helvetica*1 uf/XLUSIL+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
