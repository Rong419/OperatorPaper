%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (di in Big Pulley.pdf)
%%Creator: (Adobe Acrobat 17.9.0)
%%For: rzha419
%%CreationDate: 6/09/18, 1:36 PM
%%BoundingBox: 0 0 579 693
%%HiResBoundingBox: 0 0 578.7751 692.2190
%%CropBox: 0 0 578.7751 692.2190
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 928 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2018-09-06T12:03:57"
   xmp:CreatorTool="R"
   xmp:ModifyDate="2018-09-06T13:25:29+12:00"
   xmp:MetadataDate="2018-09-06T13:25:29+12:00"
   pdf:Producer="R 3.5.0"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:9d1a81ad-08bb-41f8-bf9b-6ea48781ae1e"
   xmpMM:InstanceID="uuid:5de9d14b-42ea-5040-8116-2dfb4c7f6013">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">R Graphics Output</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -692.219 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 692.219 li
578.775 692.219 li
578.775 0 li
cp
clp
0 732.127 mo
612 732.127 li
612 -59.873 li
0 -59.873 li
cp
false sop
0 0 0 0 cmyk
f
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 68 /D putdup 101 /e putdup 105 /i putdup 110 /n putdup 115 /s putdup 116 /t putdup 121 /y putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/D <1C60D8A8C9B6079F62ED4B3208AD694719329DB5FF23BCAF76D41058F7AAAFF2529AC265BA39C333293E127AD9C0A8013616ECDB9EC4B8FC987A3C84239B76F354F924D3BA3E82C9BA9779AE94CCE8ABEEADDA4A3C72DD0361E6B5DAAF6C5A39F74710AA0C4E1E> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/n <1C60D8A8C9B7EF3217E3BC2FA8BE5FFDDE7BA6B2BB97B82CAF2D20211744A627BCE3171C7124085EFB87C01551538DC74ADD76A4A469E736F37382A8E68FCF64FCF52E65C49BB3C47B4136748A05BC6A02EABE080CF030B375C809CD67343FEE2448D6> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-/y <1C60D8A8C9B7A73DB9AA12572CE44B37D0759EC5FA4258DA87660F3841304B61A1A911D1876BE6D5484230C2A9DECADC4A3BB259186F9713382F53071656420086C18502612AEB2A0E39781AC31868BC5BE3AB2872591151CD2F994021F04AB4E3C05AD2A97CE0F737B6F0C53FBA3CB18D70D123> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/XLUSIK+Helvetica /Helvetica findfont ct_VMDictPut/XLUSIK+Helvetica*1 [68{/.notdef}rp /D 32{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 4{/.notdef}rp /s /t 4{/.notdef}rp /y 134{/.notdef}rp]XLUSIK+Helvetica nfXLUSIK+Helvetica*1 [0 -12 -12 0 0 0 ]msf12.96 348.927 mo(Density)[-8.66382 -6.672 -6.672 -6 -2.66382 -3.336 0 ]ysh.75 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
78.4 658.687 mo
562.4 658.687 li
@
78.4 658.687 mo
78.4 665.887 li
@
175.2 658.687 mo
175.2 665.887 li
@
272 658.687 mo
272 665.887 li
@
368.8 658.687 mo
368.8 665.887 li
@
465.6 658.687 mo
465.6 665.887 li
@
562.4 658.687 mo
562.4 665.887 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.systemdict beginXLUSIK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-systemdict /gcheck known {setglobal} if end {end} ifendXLUSIK+Helvetica /Encoding getdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putpop%ADOEndSubsetFont
/XLUSIK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five 14{/.notdef}rp /D 32{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 4{/.notdef}rp /s /t 4{/.notdef}rp /y 134{/.notdef}rp]XLUSIK+Helvetica nfXLUSIK+Helvetica*1 [12 0 0 -12 0 0 ]msf70.06 684.607 mo(0.0)[6.672 3.336 0 ]xsh166.864 684.607 mo(0.1)[6.672 3.336 0 ]xsh263.668 684.607 mo(0.2)[6.672 3.336 0 ]xsh360.472 684.607 mo(0.3)[6.672 3.336 0 ]xsh457.276 684.607 mo(0.4)[6.672 3.336 0 ]xsh554.08 684.607 mo(0.5)[6.672 3.336 0 ]xsh59.04 634.257 mo
59.04 11.007 li
@
59.04 634.257 mo
51.84 634.257 li
@
59.04 530.387 mo
51.84 530.387 li
@
59.04 426.507 mo
51.84 426.507 li
@
59.04 322.637 mo
51.84 322.637 li
@
59.04 218.757 mo
51.84 218.757 li
@
59.04 114.887 mo
51.84 114.887 li
@
59.04 11.007 mo
51.84 11.007 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.systemdict beginXLUSIK+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-systemdict /gcheck known {setglobal} if end {end} ifendXLUSIK+Helvetica /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/XLUSIK+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six 13{/.notdef}rp /D 32{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 4{/.notdef}rp /s /t 4{/.notdef}rp /y 134{/.notdef}rp]XLUSIK+Helvetica nfXLUSIK+Helvetica*1 [0 -12 -12 0 0 0 ]msf41.76 637.597 mo(0)sh41.76 533.713 mo(1)sh41.76 429.841 mo(2)sh41.76 325.957 mo(3)sh41.76 222.085 mo(4)sh41.76 118.201 mo(5)sh41.76 14.329 mo(6)sh78.4 634.257 mo
83.24 634.257 li
83.24 555.327 li
78.4 555.327 li
cp
@
83.24 634.257 mo
88.08 634.257 li
88.08 439.007 li
83.24 439.007 li
cp
@
88.08 634.257 mo
92.92 634.257 li
92.92 376.697 li
88.08 376.697 li
cp
@
92.92 634.257 mo
97.76 634.257 li
97.76 214.687 li
92.92 214.687 li
cp
@
97.76 634.257 mo
102.6 634.257 li
102.6 231.297 li
97.76 231.297 li
cp
@
102.6 634.257 mo
107.44 634.257 li
107.44 152.367 li
102.6 152.367 li
cp
@
107.44 634.257 mo
112.28 634.257 li
112.28 144.057 li
107.44 144.057 li
cp
@
112.28 634.257 mo
117.12 634.257 li
117.12 44.357 li
112.28 44.357 li
cp
@
117.12 634.257 mo
121.96 634.257 li
121.96 23.587 li
117.12 23.587 li
cp
@
121.96 634.257 mo
126.8 634.257 li
126.8 252.067 li
121.96 252.067 li
cp
@
126.8 634.257 mo
131.64 634.257 li
131.64 110.827 li
126.8 110.827 li
cp
@
131.64 634.257 mo
136.48 634.257 li
136.48 102.517 li
131.64 102.517 li
cp
@
136.48 634.257 mo
141.32 634.257 li
141.32 164.837 li
136.48 164.837 li
cp
@
141.32 634.257 mo
146.16 634.257 li
146.16 160.677 li
141.32 160.677 li
cp
@
146.16 634.257 mo
151 634.257 li
151 260.377 li
146.16 260.377 li
cp
@
151 634.257 mo
155.84 634.257 li
155.84 173.137 li
151 173.137 li
cp
@
155.84 634.257 mo
160.68 634.257 li
160.68 222.987 li
155.84 222.987 li
cp
@
160.68 634.257 mo
165.52 634.257 li
165.52 243.767 li
160.68 243.767 li
cp
@
165.52 634.257 mo
170.36 634.257 li
170.36 206.377 li
165.52 206.377 li
cp
@
170.36 634.257 mo
175.2 634.257 li
175.2 368.387 li
170.36 368.387 li
cp
@
175.2 634.257 mo
180.04 634.257 li
180.04 343.467 li
175.2 343.467 li
cp
@
180.04 634.257 mo
184.88 634.257 li
184.88 268.687 li
180.04 268.687 li
cp
@
184.88 634.257 mo
189.72 634.257 li
189.72 364.237 li
184.88 364.237 li
cp
@
189.72 634.257 mo
194.56 634.257 li
194.56 439.007 li
189.72 439.007 li
cp
@
194.56 634.257 mo
199.4 634.257 li
199.4 364.237 li
194.56 364.237 li
cp
@
199.4 634.257 mo
204.24 634.257 li
204.24 351.767 li
199.4 351.767 li
cp
@
204.24 634.257 mo
209.08 634.257 li
209.08 430.697 li
204.24 430.697 li
cp
@
209.08 634.257 mo
213.92 634.257 li
213.92 405.777 li
209.08 405.777 li
cp
@
213.92 634.257 mo
218.76 634.257 li
218.76 434.857 li
213.92 434.857 li
cp
@
218.76 634.257 mo
223.6 634.257 li
223.6 434.857 li
218.76 434.857 li
cp
@
223.6 634.257 mo
228.44 634.257 li
228.44 447.317 li
223.6 447.317 li
cp
@
228.451 634.743 mo
233.32 634.743 li
233.32 468.646 li
228.451 468.646 li
cp
gsave
[1.00591 0 0 -.740417 -1.33791 707.208 ]ct
@
grestore newpath
233.28 634.257 mo
238.12 634.257 li
238.12 517.937 li
233.28 517.937 li
cp
@
238.12 634.257 mo
242.96 634.257 li
242.96 493.017 li
238.12 493.017 li
cp
@
242.96 634.257 mo
247.8 634.257 li
247.8 472.247 li
242.96 472.247 li
cp
@
247.8 634.257 mo
252.64 634.257 li
252.64 484.707 li
247.8 484.707 li
cp
@
252.64 634.257 mo
257.48 634.257 li
257.48 472.247 li
252.64 472.247 li
cp
@
257.48 634.257 mo
262.32 634.257 li
262.32 497.167 li
257.48 497.167 li
cp
@
262.32 634.257 mo
267.16 634.257 li
267.16 522.097 li
262.32 522.097 li
cp
@
267.16 634.743 mo
272 634.743 li
272 517.844 li
267.16 517.844 li
cp
gsave
[1 0 0 -.740524 0 707.219 ]ct
@
grestore newpath
272 635.014 mo
276.84 635.014 li
276.84 535.955 li
272 535.955 li
cp
gsave
[1 0 0 -.59613 0 693.358 ]ct
@
grestore newpath
276.84 634.963 mo
281.68 634.963 li
281.68 536.546 li
276.84 536.546 li
cp
gsave
[1 0 0 -.623444 0 695.979 ]ct
@
grestore newpath
281.68 634.257 mo
286.52 634.257 li
286.52 522.097 li
281.68 522.097 li
cp
@
286.52 634.369 mo
291.36 634.369 li
291.36 532.816 li
286.52 532.816 li
cp
gsave
[1 0 0 -.940216 0 726.388 ]ct
@
grestore newpath
291.36 634.257 mo
296.2 634.257 li
296.2 542.867 li
291.36 542.867 li
cp
@
296.2 634.861 mo
301.04 634.861 li
301.04 558.815 li
296.2 558.815 li
cp
gsave
[1 0 0 -.678009 0 701.217 ]ct
@
grestore newpath
301.04 634.257 mo
305.88 634.257 li
305.88 551.177 li
301.04 551.177 li
cp
@
305.88 634.474 mo
310.72 634.474 li
310.72 550.011 li
305.88 550.011 li
cp
gsave
[1 0 0 -.883972 0 720.989 ]ct
@
grestore newpath
310.72 634.786 mo
315.56 634.786 li
315.56 563.215 li
310.72 563.215 li
cp
gsave
[1 0 0 -.717865 0 705.043 ]ct
@
grestore newpath
315.56 634.97 mo
320.4 634.97 li
320.4 560.327 li
315.56 560.327 li
cp
gsave
[1 0 0 -.619598 0 695.61 ]ct
@
grestore newpath
320.4 634.796 mo
325.24 634.796 li
325.24 563.746 li
320.4 563.746 li
cp
gsave
[1 0 0 -.712631 0 704.541 ]ct
@
grestore newpath
325.24 634.633 mo
330.08 634.633 li
330.08 568.234 li
325.24 568.234 li
cp
gsave
[1 0 0 -.799225 0 712.854 ]ct
@
grestore newpath
330.08 634.257 mo
334.92 634.257 li
334.92 571.947 li
330.08 571.947 li
cp
@
334.92 635.276 mo
339.76 635.276 li
339.76 578.404 li
334.92 578.404 li
cp
gsave
[1 0 0 -.456329 0 679.937 ]ct
@
grestore newpath
339.76 635.026 mo
344.6 635.026 li
344.6 573.788 li
339.76 573.788 li
cp
gsave
[1 0 0 -.589676 0 692.738 ]ct
@
grestore newpath
344.6 635.041 mo
349.44 635.041 li
349.44 581.883 li
344.6 581.883 li
cp
gsave
[1 0 0 -.581665 0 691.969 ]ct
@
grestore newpath
349.44 634.362 mo
354.28 634.362 li
354.28 575.534 li
349.44 575.534 li
cp
gsave
[1 0 0 -.944107 0 726.762 ]ct
@
grestore newpath
354.28 635.294 mo
359.12 635.294 li
359.12 587.036 li
354.28 587.036 li
cp
gsave
[1 0 0 -.446793 0 679.022 ]ct
@
grestore newpath
359.12 635.29 mo
363.96 635.29 li
363.96 588.663 li
359.12 588.663 li
cp
gsave
[1 0 0 -.44899 0 679.233 ]ct
@
grestore newpath
363.96 635.327 mo
368.8 635.327 li
368.8 585.381 li
363.96 585.381 li
cp
gsave
[1 0 0 -.429382 0 677.351 ]ct
@
grestore newpath
368.8 635.347 mo
373.64 635.347 li
373.64 591.85 li
368.8 591.85 li
cp
gsave
[1 0 0 -.418839 0 676.338 ]ct
@
grestore newpath
373.64 635.485 mo
378.48 635.485 li
378.48 598.2 li
373.64 598.2 li
cp
gsave
[1 0 0 -.3452 0 669.269 ]ct
@
grestore newpath
378.48 635.416 mo
383.32 635.416 li
383.32 603.675 li
378.48 603.675 li
cp
gsave
[1 0 0 -.38205 0 672.807 ]ct
@
grestore newpath
383.32 635.336 mo
388.16 635.336 li
388.16 605.376 li
383.32 605.376 li
cp
gsave
[1 0 0 -.424255 0 676.858 ]ct
@
grestore newpath
388.16 635.486 mo
393 635.486 li
393 606.848 li
388.16 606.848 li
cp
gsave
[1 0 0 -.344696 0 669.221 ]ct
@
grestore newpath
393 635.67 mo
397.84 635.67 li
397.84 613.153 li
393 613.153 li
cp
gsave
[1 0 0 -.246384 0 659.784 ]ct
@
grestore newpath
397.84 635.232 mo
402.68 635.232 li
402.68 603.318 li
397.84 603.318 li
cp
gsave
[1 0 0 -.480118 0 682.221 ]ct
@
grestore newpath
402.68 635.609 mo
407.52 635.609 li
407.52 607.807 li
402.68 607.807 li
cp
gsave
[1 0 0 -.278854 0 662.901 ]ct
@
grestore newpath
407.52 635.829 mo
412.36 635.829 li
412.36 615.696 li
407.52 615.696 li
cp
gsave
[1 0 0 -.161545 0 651.64 ]ct
@
grestore newpath
412.36 635.737 mo
417.2 635.737 li
417.2 610.381 li
412.36 610.381 li
cp
gsave
[1 0 0 -.21048 0 656.337 ]ct
@
grestore newpath
417.2 635.84 mo
422.04 635.84 li
422.04 611.9 li
417.2 611.9 li
cp
gsave
[1 0 0 -.155747 0 651.083 ]ct
@
grestore newpath
422.04 635.856 mo
426.88 635.856 li
426.88 624.86 li
422.04 624.86 li
cp
gsave
[1 0 0 -.147049 0 650.248 ]ct
@
grestore newpath
426.88 635.766 mo
431.72 635.766 li
431.72 614.678 li
426.88 614.678 li
cp
gsave
[1 0 0 -.195236 0 654.874 ]ct
@
grestore newpath
431.72 635.843 mo
436.56 635.843 li
436.56 617.305 li
431.72 617.305 li
cp
gsave
[1 0 0 -.153885 0 650.904 ]ct
@
grestore newpath
436.56 635.771 mo
441.4 635.771 li
441.4 617.377 li
436.56 617.377 li
cp
gsave
[1 0 0 -.192505 0 654.612 ]ct
@
grestore newpath
441.4 635.831 mo
446.24 635.831 li
446.24 617.856 li
441.4 617.856 li
cp
gsave
[1 0 0 -.160263 0 651.516 ]ct
@
grestore newpath
446.24 635.973 mo
451.08 635.973 li
451.08 621.5 li
446.24 621.5 li
cp
gsave
[1 0 0 -.0849762 0 644.289 ]ct
@
grestore newpath
451.08 635.913 mo
455.92 635.913 li
455.92 619.938 li
451.08 619.938 li
cp
gsave
[1 0 0 -.116531 0 647.318 ]ct
@
grestore newpath
455.92 635.935 mo
460.76 635.935 li
460.76 623.7 li
455.92 623.7 li
cp
gsave
[1 0 0 -.105179 0 646.229 ]ct
@
grestore newpath
460.76 636.068 mo
465.6 636.068 li
465.6 629.516 li
460.76 629.516 li
cp
gsave
[1 0 0 -.0342865 0 639.423 ]ct
@
grestore newpath
465.6 636.07 mo
470.44 636.07 li
470.44 630.593 li
465.6 630.593 li
cp
gsave
[1 0 0 -.032959 0 639.296 ]ct
@
grestore newpath
470.44 636.05 mo
475.28 636.05 li
475.28 630.072 li
470.44 630.072 li
cp
gsave
[1 0 0 -.0436096 0 640.318 ]ct
@
grestore newpath
475.28 636.063 mo
480.12 636.063 li
480.12 630.06 li
475.28 630.06 li
cp
gsave
[1 0 0 -.0370483 0 639.688 ]ct
@
grestore newpath
480.12 636.116 mo
484.96 636.116 li
484.96 634.331 li
480.12 634.331 li
cp
gsave
[1 0 0 -.0085907 0 636.957 ]ct
@
grestore newpath
489.8 636.088 mo
494.64 636.088 li
494.64 631.658 li
489.8 631.658 li
cp
gsave
[1 0 0 -.0236969 0 638.407 ]ct
@
grestore newpath
494.64 636.115 mo
499.48 636.115 li
499.48 633.794 li
494.64 633.794 li
cp
gsave
[1 0 0 -.0093079 0 637.026 ]ct
@
grestore newpath
75.7 602.607 mo
75.7 601.117 76.91 599.907 78.4 599.907 cv
79.88 599.907 81.1 601.117 81.1 602.607 cv
81.1 604.087 79.88 605.307 78.4 605.307 cv
76.91 605.307 75.7 604.087 75.7 602.607 cv
0 .993988 1 0 cmyk
@
76.67 570.207 mo
76.67 568.717 77.88 567.507 79.37 567.507 cv
80.85 567.507 82.07 568.717 82.07 570.207 cv
82.07 571.687 80.85 572.907 79.37 572.907 cv
77.88 572.907 76.67 571.687 76.67 570.207 cv
@
77.64 538.067 mo
77.64 536.577 78.85 535.367 80.34 535.367 cv
81.82 535.367 83.04 536.577 83.04 538.067 cv
83.04 539.547 81.82 540.767 80.34 540.767 cv
78.85 540.767 77.64 539.547 77.64 538.067 cv
@
78.61 506.177 mo
78.61 504.687 79.82 503.477 81.31 503.477 cv
82.79 503.477 84.01 504.687 84.01 506.177 cv
84.01 507.657 82.79 508.877 81.31 508.877 cv
79.82 508.877 78.61 507.657 78.61 506.177 cv
@
79.58 474.757 mo
79.58 473.267 80.79 472.057 82.28 472.057 cv
83.76 472.057 84.98 473.267 84.98 474.757 cv
84.98 476.237 83.76 477.457 82.28 477.457 cv
80.79 477.457 79.58 476.237 79.58 474.757 cv
@
80.55 443.987 mo
80.55 442.507 81.76 441.287 83.25 441.287 cv
84.73 441.287 85.95 442.507 85.95 443.987 cv
85.95 445.477 84.73 446.687 83.25 446.687 cv
81.76 446.687 80.55 445.477 80.55 443.987 cv
@
81.52 414.037 mo
81.52 412.547 82.73 411.337 84.22 411.337 cv
85.7 411.337 86.92 412.547 86.92 414.037 cv
86.92 415.517 85.7 416.737 84.22 416.737 cv
82.73 416.737 81.52 415.517 81.52 414.037 cv
@
82.49 385.027 mo
82.49 383.537 83.7 382.327 85.19 382.327 cv
86.67 382.327 87.89 383.537 87.89 385.027 cv
87.89 386.507 86.67 387.727 85.19 387.727 cv
83.7 387.727 82.49 386.507 82.49 385.027 cv
@
83.46 357.067 mo
83.46 355.577 84.67 354.367 86.16 354.367 cv
87.64 354.367 88.86 355.577 88.86 357.067 cv
88.86 358.547 87.64 359.767 86.16 359.767 cv
84.67 359.767 83.46 358.547 83.46 357.067 cv
@
84.43 330.237 mo
84.43 328.747 85.64 327.537 87.13 327.537 cv
88.61 327.537 89.83 328.747 89.83 330.237 cv
89.83 331.717 88.61 332.937 87.13 332.937 cv
85.64 332.937 84.43 331.717 84.43 330.237 cv
@
85.4 304.597 mo
85.4 303.107 86.61 301.897 88.1 301.897 cv
89.58 301.897 90.8 303.107 90.8 304.597 cv
90.8 306.077 89.58 307.297 88.1 307.297 cv
86.61 307.297 85.4 306.077 85.4 304.597 cv
@
86.37 280.197 mo
86.37 278.707 87.58 277.497 89.07 277.497 cv
90.55 277.497 91.77 278.707 91.77 280.197 cv
91.77 281.677 90.55 282.897 89.07 282.897 cv
87.58 282.897 86.37 281.677 86.37 280.197 cv
@
87.34 257.057 mo
87.34 255.567 88.55 254.357 90.04 254.357 cv
91.52 254.357 92.74 255.567 92.74 257.057 cv
92.74 258.537 91.52 259.757 90.04 259.757 cv
88.55 259.757 87.34 258.537 87.34 257.057 cv
@
88.31 235.197 mo
88.31 233.707 89.52 232.497 91.01 232.497 cv
92.49 232.497 93.71 233.707 93.71 235.197 cv
93.71 236.677 92.49 237.897 91.01 237.897 cv
89.52 237.897 88.31 236.677 88.31 235.197 cv
@
89.28 214.607 mo
89.28 213.127 90.49 211.907 91.98 211.907 cv
93.46 211.907 94.68 213.127 94.68 214.607 cv
94.68 216.097 93.46 217.307 91.98 217.307 cv
90.49 217.307 89.28 216.097 89.28 214.607 cv
@
90.25 195.297 mo
90.25 193.807 91.46 192.597 92.95 192.597 cv
94.43 192.597 95.65 193.807 95.65 195.297 cv
95.65 196.777 94.43 197.997 92.95 197.997 cv
91.46 197.997 90.25 196.777 90.25 195.297 cv
@
91.22 177.227 mo
91.22 175.747 92.43 174.527 93.92 174.527 cv
95.4 174.527 96.62 175.747 96.62 177.227 cv
96.62 178.717 95.4 179.927 93.92 179.927 cv
92.43 179.927 91.22 178.717 91.22 177.227 cv
@
92.19 160.397 mo
92.19 158.907 93.4 157.697 94.89 157.697 cv
96.37 157.697 97.59 158.907 97.59 160.397 cv
97.59 161.877 96.37 163.097 94.89 163.097 cv
93.4 163.097 92.19 161.877 92.19 160.397 cv
@
93.16 144.757 mo
93.16 143.277 94.37 142.057 95.86 142.057 cv
97.34 142.057 98.56 143.277 98.56 144.757 cv
98.56 146.247 97.34 147.457 95.86 147.457 cv
94.37 147.457 93.16 146.247 93.16 144.757 cv
@
94.13 130.297 mo
94.13 128.807 95.34 127.597 96.83 127.597 cv
98.31 127.597 99.53 128.807 99.53 130.297 cv
99.53 131.777 98.31 132.997 96.83 132.997 cv
95.34 132.997 94.13 131.777 94.13 130.297 cv
@
95.1 116.957 mo
95.1 115.477 96.31 114.257 97.8 114.257 cv
99.28 114.257 100.5 115.477 100.5 116.957 cv
100.5 118.447 99.28 119.657 97.8 119.657 cv
96.31 119.657 95.1 118.447 95.1 116.957 cv
@
96.07 104.717 mo
96.07 103.227 97.28 102.017 98.77 102.017 cv
100.25 102.017 101.47 103.227 101.47 104.717 cv
101.47 106.197 100.25 107.417 98.77 107.417 cv
97.28 107.417 96.07 106.197 96.07 104.717 cv
@
97.04 93.517 mo
97.04 92.037 98.25 90.8171 99.74 90.8171 cv
101.22 90.8171 102.44 92.037 102.44 93.517 cv
102.44 95.0071 101.22 96.217 99.74 96.217 cv
98.25 96.217 97.04 95.0071 97.04 93.517 cv
@
98.01 83.337 mo
98.01 81.847 99.22 80.6371 100.71 80.6371 cv
102.19 80.6371 103.41 81.847 103.41 83.337 cv
103.41 84.8171 102.19 86.037 100.71 86.037 cv
99.22 86.037 98.01 84.8171 98.01 83.337 cv
@
98.98 74.117 mo
98.98 72.627 100.19 71.4171 101.68 71.4171 cv
103.16 71.4171 104.38 72.627 104.38 74.117 cv
104.38 75.597 103.16 76.817 101.68 76.817 cv
100.19 76.817 98.98 75.597 98.98 74.117 cv
@
99.95 65.817 mo
99.95 64.337 101.16 63.1171 102.65 63.1171 cv
104.13 63.1171 105.35 64.337 105.35 65.817 cv
105.35 67.3071 104.13 68.517 102.65 68.517 cv
101.16 68.517 99.95 67.3071 99.95 65.817 cv
@
100.92 58.407 mo
100.92 56.9171 102.13 55.7071 103.62 55.7071 cv
105.1 55.7071 106.32 56.9171 106.32 58.407 cv
106.32 59.8871 105.1 61.1071 103.62 61.1071 cv
102.13 61.1071 100.92 59.8871 100.92 58.407 cv
@
101.89 51.827 mo
101.89 50.347 103.1 49.1271 104.59 49.1271 cv
106.07 49.1271 107.29 50.347 107.29 51.827 cv
107.29 53.3171 106.07 54.527 104.59 54.527 cv
103.1 54.527 101.89 53.3171 101.89 51.827 cv
@
102.86 46.057 mo
102.86 44.567 104.07 43.3571 105.56 43.3571 cv
107.04 43.3571 108.26 44.567 108.26 46.057 cv
108.26 47.537 107.04 48.757 105.56 48.757 cv
104.07 48.757 102.86 47.537 102.86 46.057 cv
@
103.83 41.037 mo
103.83 39.547 105.04 38.337 106.53 38.337 cv
108.01 38.337 109.23 39.547 109.23 41.037 cv
109.23 42.517 108.01 43.737 106.53 43.737 cv
105.04 43.737 103.83 42.517 103.83 41.037 cv
@
104.8 36.727 mo
104.8 35.247 106.01 34.027 107.5 34.027 cv
108.98 34.027 110.2 35.247 110.2 36.727 cv
110.2 38.217 108.98 39.427 107.5 39.427 cv
106.01 39.427 104.8 38.217 104.8 36.727 cv
@
105.77 33.107 mo
105.77 31.617 106.98 30.407 108.47 30.407 cv
109.95 30.407 111.17 31.617 111.17 33.107 cv
111.17 34.587 109.95 35.807 108.47 35.807 cv
106.98 35.807 105.77 34.587 105.77 33.107 cv
@
106.74 30.117 mo
106.74 28.637 107.95 27.4171 109.44 27.4171 cv
110.92 27.4171 112.14 28.637 112.14 30.117 cv
112.14 31.6071 110.92 32.817 109.44 32.817 cv
107.95 32.817 106.74 31.6071 106.74 30.117 cv
@
107.71 27.737 mo
107.71 26.257 108.92 25.037 110.41 25.037 cv
111.89 25.037 113.11 26.257 113.11 27.737 cv
113.11 29.2271 111.89 30.437 110.41 30.437 cv
108.92 30.437 107.71 29.2271 107.71 27.737 cv
@
108.68 25.927 mo
108.68 24.447 109.89 23.2271 111.38 23.2271 cv
112.86 23.2271 114.08 24.447 114.08 25.927 cv
114.08 27.4171 112.86 28.627 111.38 28.627 cv
109.89 28.627 108.68 27.4171 108.68 25.927 cv
@
109.65 24.657 mo
109.65 23.1771 110.86 21.9571 112.35 21.9571 cv
113.83 21.9571 115.05 23.1771 115.05 24.657 cv
115.05 26.1471 113.83 27.3571 112.35 27.3571 cv
110.86 27.3571 109.65 26.1471 109.65 24.657 cv
@
110.62 23.887 mo
110.62 22.407 111.83 21.1871 113.32 21.1871 cv
114.8 21.1871 116.02 22.407 116.02 23.887 cv
116.02 25.3771 114.8 26.587 113.32 26.587 cv
111.83 26.587 110.62 25.3771 110.62 23.887 cv
@
111.59 23.597 mo
111.59 22.107 112.8 20.897 114.29 20.897 cv
115.77 20.897 116.99 22.107 116.99 23.597 cv
116.99 25.077 115.77 26.297 114.29 26.297 cv
112.8 26.297 111.59 25.077 111.59 23.597 cv
@
112.56 23.747 mo
112.56 22.257 113.77 21.0471 115.26 21.0471 cv
116.74 21.0471 117.96 22.257 117.96 23.747 cv
117.96 25.2271 116.74 26.447 115.26 26.447 cv
113.77 26.447 112.56 25.2271 112.56 23.747 cv
@
113.53 24.307 mo
113.53 22.827 114.74 21.6071 116.23 21.6071 cv
117.71 21.6071 118.93 22.827 118.93 24.307 cv
118.93 25.7971 117.71 27.007 116.23 27.007 cv
114.74 27.007 113.53 25.7971 113.53 24.307 cv
@
114.5 25.267 mo
114.5 23.777 115.71 22.5671 117.2 22.5671 cv
118.68 22.5671 119.9 23.777 119.9 25.267 cv
119.9 26.7471 118.68 27.967 117.2 27.967 cv
115.71 27.967 114.5 26.7471 114.5 25.267 cv
@
115.47 26.577 mo
115.47 25.097 116.68 23.8771 118.17 23.8771 cv
119.65 23.8771 120.87 25.097 120.87 26.577 cv
120.87 28.0671 119.65 29.277 118.17 29.277 cv
116.68 29.277 115.47 28.0671 115.47 26.577 cv
@
116.44 28.237 mo
116.44 26.757 117.65 25.537 119.14 25.537 cv
120.62 25.537 121.84 26.757 121.84 28.237 cv
121.84 29.7271 120.62 30.937 119.14 30.937 cv
117.65 30.937 116.44 29.7271 116.44 28.237 cv
@
117.41 30.217 mo
117.41 28.7271 118.62 27.5171 120.11 27.5171 cv
121.59 27.5171 122.81 28.7271 122.81 30.217 cv
122.81 31.6971 121.59 32.9171 120.11 32.9171 cv
118.62 32.9171 117.41 31.6971 117.41 30.217 cv
@
118.38 32.477 mo
118.38 30.997 119.59 29.777 121.08 29.777 cv
122.56 29.777 123.78 30.997 123.78 32.477 cv
123.78 33.967 122.56 35.177 121.08 35.177 cv
119.59 35.177 118.38 33.967 118.38 32.477 cv
@
119.35 35.027 mo
119.35 33.537 120.56 32.3271 122.05 32.3271 cv
123.53 32.3271 124.75 33.537 124.75 35.027 cv
124.75 36.5071 123.53 37.7271 122.05 37.7271 cv
120.56 37.7271 119.35 36.5071 119.35 35.027 cv
@
120.32 37.817 mo
120.32 36.337 121.53 35.1171 123.02 35.1171 cv
124.5 35.1171 125.72 36.337 125.72 37.817 cv
125.72 39.3071 124.5 40.517 123.02 40.517 cv
121.53 40.517 120.32 39.3071 120.32 37.817 cv
@
121.29 40.847 mo
121.29 39.367 122.5 38.147 123.99 38.147 cv
125.47 38.147 126.69 39.367 126.69 40.847 cv
126.69 42.337 125.47 43.547 123.99 43.547 cv
122.5 43.547 121.29 42.337 121.29 40.847 cv
@
122.26 44.097 mo
122.26 42.617 123.47 41.397 124.96 41.397 cv
126.44 41.397 127.66 42.617 127.66 44.097 cv
127.66 45.587 126.44 46.797 124.96 46.797 cv
123.47 46.797 122.26 45.587 122.26 44.097 cv
@
123.23 47.547 mo
123.23 46.057 124.44 44.847 125.93 44.847 cv
127.41 44.847 128.63 46.057 128.63 47.547 cv
128.63 49.027 127.41 50.247 125.93 50.247 cv
124.44 50.247 123.23 49.027 123.23 47.547 cv
@
124.2 51.177 mo
124.2 49.697 125.41 48.4771 126.9 48.4771 cv
128.38 48.4771 129.6 49.697 129.6 51.177 cv
129.6 52.6671 128.38 53.877 126.9 53.877 cv
125.41 53.877 124.2 52.6671 124.2 51.177 cv
@
125.17 54.987 mo
125.17 53.497 126.38 52.287 127.87 52.287 cv
129.35 52.287 130.57 53.497 130.57 54.987 cv
130.57 56.467 129.35 57.687 127.87 57.687 cv
126.38 57.687 125.17 56.467 125.17 54.987 cv
@
126.14 58.937 mo
126.14 57.457 127.35 56.2371 128.84 56.2371 cv
130.32 56.2371 131.54 57.457 131.54 58.937 cv
131.54 60.4271 130.32 61.637 128.84 61.637 cv
127.35 61.637 126.14 60.4271 126.14 58.937 cv
@
127.11 63.037 mo
127.11 61.557 128.32 60.337 129.81 60.337 cv
131.29 60.337 132.51 61.557 132.51 63.037 cv
132.51 64.527 131.29 65.737 129.81 65.737 cv
128.32 65.737 127.11 64.527 127.11 63.037 cv
@
128.08 67.277 mo
128.08 65.787 129.29 64.5771 130.78 64.5771 cv
132.26 64.5771 133.48 65.787 133.48 67.277 cv
133.48 68.7571 132.26 69.9771 130.78 69.9771 cv
129.29 69.9771 128.08 68.7571 128.08 67.277 cv
@
129.05 71.617 mo
129.05 70.137 130.26 68.9171 131.75 68.9171 cv
133.23 68.9171 134.45 70.137 134.45 71.617 cv
134.45 73.1071 133.23 74.317 131.75 74.317 cv
130.26 74.317 129.05 73.1071 129.05 71.617 cv
@
130.02 76.077 mo
130.02 74.587 131.23 73.3771 132.72 73.3771 cv
134.2 73.3771 135.42 74.587 135.42 76.077 cv
135.42 77.5571 134.2 78.777 132.72 78.777 cv
131.23 78.777 130.02 77.5571 130.02 76.077 cv
@
130.99 80.627 mo
130.99 79.137 132.2 77.9271 133.69 77.9271 cv
135.17 77.9271 136.39 79.137 136.39 80.627 cv
136.39 82.1071 135.17 83.327 133.69 83.327 cv
132.2 83.327 130.99 82.1071 130.99 80.627 cv
@
131.96 85.267 mo
131.96 83.777 133.17 82.5671 134.66 82.5671 cv
136.14 82.5671 137.36 83.777 137.36 85.267 cv
137.36 86.7471 136.14 87.967 134.66 87.967 cv
133.17 87.967 131.96 86.7471 131.96 85.267 cv
@
132.93 89.977 mo
132.93 88.497 134.14 87.277 135.63 87.277 cv
137.11 87.277 138.33 88.497 138.33 89.977 cv
138.33 91.467 137.11 92.677 135.63 92.677 cv
134.14 92.677 132.93 91.467 132.93 89.977 cv
@
133.9 94.757 mo
133.9 93.277 135.11 92.0571 136.6 92.0571 cv
138.08 92.0571 139.3 93.277 139.3 94.757 cv
139.3 96.2471 138.08 97.457 136.6 97.457 cv
135.11 97.457 133.9 96.2471 133.9 94.757 cv
@
134.87 99.607 mo
134.87 98.117 136.08 96.907 137.57 96.907 cv
139.05 96.907 140.27 98.117 140.27 99.607 cv
140.27 101.087 139.05 102.307 137.57 102.307 cv
136.08 102.307 134.87 101.087 134.87 99.607 cv
@
135.84 104.497 mo
135.84 103.007 137.05 101.797 138.54 101.797 cv
140.02 101.797 141.24 103.007 141.24 104.497 cv
141.24 105.977 140.02 107.197 138.54 107.197 cv
137.05 107.197 135.84 105.977 135.84 104.497 cv
@
136.81 109.437 mo
136.81 107.947 138.02 106.737 139.51 106.737 cv
140.99 106.737 142.21 107.947 142.21 109.437 cv
142.21 110.917 140.99 112.137 139.51 112.137 cv
138.02 112.137 136.81 110.917 136.81 109.437 cv
@
137.78 114.417 mo
137.78 112.927 138.99 111.717 140.48 111.717 cv
141.96 111.717 143.18 112.927 143.18 114.417 cv
143.18 115.897 141.96 117.117 140.48 117.117 cv
138.99 117.117 137.78 115.897 137.78 114.417 cv
@
138.75 119.417 mo
138.75 117.937 139.96 116.717 141.45 116.717 cv
142.93 116.717 144.15 117.937 144.15 119.417 cv
144.15 120.907 142.93 122.117 141.45 122.117 cv
139.96 122.117 138.75 120.907 138.75 119.417 cv
@
139.72 124.457 mo
139.72 122.967 140.93 121.757 142.42 121.757 cv
143.9 121.757 145.12 122.967 145.12 124.457 cv
145.12 125.937 143.9 127.157 142.42 127.157 cv
140.93 127.157 139.72 125.937 139.72 124.457 cv
@
140.69 129.507 mo
140.69 128.027 141.9 126.807 143.39 126.807 cv
144.87 126.807 146.09 128.027 146.09 129.507 cv
146.09 130.997 144.87 132.207 143.39 132.207 cv
141.9 132.207 140.69 130.997 140.69 129.507 cv
@
141.66 134.577 mo
141.66 133.097 142.87 131.877 144.36 131.877 cv
145.84 131.877 147.06 133.097 147.06 134.577 cv
147.06 136.067 145.84 137.277 144.36 137.277 cv
142.87 137.277 141.66 136.067 141.66 134.577 cv
@
142.63 139.657 mo
142.63 138.177 143.84 136.957 145.33 136.957 cv
146.81 136.957 148.03 138.177 148.03 139.657 cv
148.03 141.147 146.81 142.357 145.33 142.357 cv
143.84 142.357 142.63 141.147 142.63 139.657 cv
@
143.6 144.747 mo
143.6 143.257 144.81 142.047 146.3 142.047 cv
147.78 142.047 149 143.257 149 144.747 cv
149 146.227 147.78 147.447 146.3 147.447 cv
144.81 147.447 143.6 146.227 143.6 144.747 cv
@
144.57 149.827 mo
144.57 148.347 145.78 147.127 147.27 147.127 cv
148.75 147.127 149.97 148.347 149.97 149.827 cv
149.97 151.317 148.75 152.527 147.27 152.527 cv
145.78 152.527 144.57 151.317 144.57 149.827 cv
@
145.54 154.907 mo
145.54 153.427 146.75 152.207 148.24 152.207 cv
149.72 152.207 150.94 153.427 150.94 154.907 cv
150.94 156.397 149.72 157.607 148.24 157.607 cv
146.75 157.607 145.54 156.397 145.54 154.907 cv
@
146.51 159.987 mo
146.51 158.507 147.72 157.287 149.21 157.287 cv
150.69 157.287 151.91 158.507 151.91 159.987 cv
151.91 161.477 150.69 162.687 149.21 162.687 cv
147.72 162.687 146.51 161.477 146.51 159.987 cv
@
147.48 165.057 mo
147.48 163.567 148.69 162.357 150.18 162.357 cv
151.66 162.357 152.88 163.567 152.88 165.057 cv
152.88 166.537 151.66 167.757 150.18 167.757 cv
148.69 167.757 147.48 166.537 147.48 165.057 cv
@
148.45 170.107 mo
148.45 168.627 149.66 167.407 151.15 167.407 cv
152.63 167.407 153.85 168.627 153.85 170.107 cv
153.85 171.597 152.63 172.807 151.15 172.807 cv
149.66 172.807 148.45 171.597 148.45 170.107 cv
@
149.42 175.147 mo
149.42 173.657 150.63 172.447 152.12 172.447 cv
153.6 172.447 154.82 173.657 154.82 175.147 cv
154.82 176.627 153.6 177.847 152.12 177.847 cv
150.63 177.847 149.42 176.627 149.42 175.147 cv
@
150.39 180.157 mo
150.39 178.677 151.6 177.457 153.09 177.457 cv
154.57 177.457 155.79 178.677 155.79 180.157 cv
155.79 181.647 154.57 182.857 153.09 182.857 cv
151.6 182.857 150.39 181.647 150.39 180.157 cv
@
151.36 185.157 mo
151.36 183.677 152.57 182.457 154.06 182.457 cv
155.54 182.457 156.76 183.677 156.76 185.157 cv
156.76 186.647 155.54 187.857 154.06 187.857 cv
152.57 187.857 151.36 186.647 151.36 185.157 cv
@
152.33 190.127 mo
152.33 188.647 153.54 187.427 155.03 187.427 cv
156.51 187.427 157.73 188.647 157.73 190.127 cv
157.73 191.617 156.51 192.827 155.03 192.827 cv
153.54 192.827 152.33 191.617 152.33 190.127 cv
@
153.3 195.077 mo
153.3 193.587 154.51 192.377 156 192.377 cv
157.48 192.377 158.7 193.587 158.7 195.077 cv
158.7 196.557 157.48 197.777 156 197.777 cv
154.51 197.777 153.3 196.557 153.3 195.077 cv
@
154.27 199.997 mo
154.27 198.507 155.48 197.297 156.97 197.297 cv
158.45 197.297 159.67 198.507 159.67 199.997 cv
159.67 201.477 158.45 202.697 156.97 202.697 cv
155.48 202.697 154.27 201.477 154.27 199.997 cv
@
155.24 204.887 mo
155.24 203.397 156.45 202.187 157.94 202.187 cv
159.42 202.187 160.64 203.397 160.64 204.887 cv
160.64 206.367 159.42 207.587 157.94 207.587 cv
156.45 207.587 155.24 206.367 155.24 204.887 cv
@
156.21 209.737 mo
156.21 208.257 157.42 207.037 158.91 207.037 cv
160.39 207.037 161.61 208.257 161.61 209.737 cv
161.61 211.227 160.39 212.437 158.91 212.437 cv
157.42 212.437 156.21 211.227 156.21 209.737 cv
@
157.17 214.567 mo
157.17 213.077 158.39 211.867 159.87 211.867 cv
161.36 211.867 162.57 213.077 162.57 214.567 cv
162.57 216.047 161.36 217.267 159.87 217.267 cv
158.39 217.267 157.17 216.047 157.17 214.567 cv
@
158.14 219.347 mo
158.14 217.867 159.36 216.647 160.84 216.647 cv
162.33 216.647 163.54 217.867 163.54 219.347 cv
163.54 220.837 162.33 222.047 160.84 222.047 cv
159.36 222.047 158.14 220.837 158.14 219.347 cv
@
159.11 224.107 mo
159.11 222.617 160.33 221.407 161.81 221.407 cv
163.3 221.407 164.51 222.617 164.51 224.107 cv
164.51 225.587 163.3 226.807 161.81 226.807 cv
160.33 226.807 159.11 225.587 159.11 224.107 cv
@
160.08 228.817 mo
160.08 227.337 161.3 226.117 162.78 226.117 cv
164.27 226.117 165.48 227.337 165.48 228.817 cv
165.48 230.307 164.27 231.517 162.78 231.517 cv
161.3 231.517 160.08 230.307 160.08 228.817 cv
@
161.05 233.497 mo
161.05 232.007 162.27 230.797 163.75 230.797 cv
165.24 230.797 166.45 232.007 166.45 233.497 cv
166.45 234.977 165.24 236.197 163.75 236.197 cv
162.27 236.197 161.05 234.977 161.05 233.497 cv
@
162.02 238.137 mo
162.02 236.647 163.24 235.437 164.72 235.437 cv
166.21 235.437 167.42 236.647 167.42 238.137 cv
167.42 239.617 166.21 240.837 164.72 240.837 cv
163.24 240.837 162.02 239.617 162.02 238.137 cv
@
162.99 242.727 mo
162.99 241.247 164.21 240.027 165.69 240.027 cv
167.18 240.027 168.39 241.247 168.39 242.727 cv
168.39 244.217 167.18 245.427 165.69 245.427 cv
164.21 245.427 162.99 244.217 162.99 242.727 cv
@
163.96 247.287 mo
163.96 245.797 165.18 244.587 166.66 244.587 cv
168.15 244.587 169.36 245.797 169.36 247.287 cv
169.36 248.767 168.15 249.987 166.66 249.987 cv
165.18 249.987 163.96 248.767 163.96 247.287 cv
@
164.93 251.797 mo
164.93 250.317 166.15 249.097 167.63 249.097 cv
169.12 249.097 170.33 250.317 170.33 251.797 cv
170.33 253.287 169.12 254.497 167.63 254.497 cv
166.15 254.497 164.93 253.287 164.93 251.797 cv
@
165.9 256.277 mo
165.9 254.787 167.12 253.577 168.6 253.577 cv
170.09 253.577 171.3 254.787 171.3 256.277 cv
171.3 257.757 170.09 258.977 168.6 258.977 cv
167.12 258.977 165.9 257.757 165.9 256.277 cv
@
166.87 260.707 mo
166.87 259.217 168.09 258.007 169.57 258.007 cv
171.06 258.007 172.27 259.217 172.27 260.707 cv
172.27 262.187 171.06 263.407 169.57 263.407 cv
168.09 263.407 166.87 262.187 166.87 260.707 cv
@
167.84 265.087 mo
167.84 263.607 169.06 262.387 170.54 262.387 cv
172.03 262.387 173.24 263.607 173.24 265.087 cv
173.24 266.577 172.03 267.787 170.54 267.787 cv
169.06 267.787 167.84 266.577 167.84 265.087 cv
@
168.81 269.437 mo
168.81 267.947 170.03 266.737 171.51 266.737 cv
173 266.737 174.21 267.947 174.21 269.437 cv
174.21 270.917 173 272.137 171.51 272.137 cv
170.03 272.137 168.81 270.917 168.81 269.437 cv
@
169.78 273.737 mo
169.78 272.247 171 271.037 172.48 271.037 cv
173.97 271.037 175.18 272.247 175.18 273.737 cv
175.18 275.217 173.97 276.437 172.48 276.437 cv
171 276.437 169.78 275.217 169.78 273.737 cv
@
170.75 277.987 mo
170.75 276.507 171.97 275.287 173.45 275.287 cv
174.94 275.287 176.15 276.507 176.15 277.987 cv
176.15 279.477 174.94 280.687 173.45 280.687 cv
171.97 280.687 170.75 279.477 170.75 277.987 cv
@
171.72 282.197 mo
171.72 280.717 172.94 279.497 174.42 279.497 cv
175.91 279.497 177.12 280.717 177.12 282.197 cv
177.12 283.687 175.91 284.897 174.42 284.897 cv
172.94 284.897 171.72 283.687 171.72 282.197 cv
@
172.69 286.367 mo
172.69 284.877 173.91 283.667 175.39 283.667 cv
176.88 283.667 178.09 284.877 178.09 286.367 cv
178.09 287.847 176.88 289.067 175.39 289.067 cv
173.91 289.067 172.69 287.847 172.69 286.367 cv
@
173.66 290.487 mo
173.66 288.997 174.88 287.787 176.36 287.787 cv
177.85 287.787 179.06 288.997 179.06 290.487 cv
179.06 291.967 177.85 293.187 176.36 293.187 cv
174.88 293.187 173.66 291.967 173.66 290.487 cv
@
174.63 294.557 mo
174.63 293.077 175.85 291.857 177.33 291.857 cv
178.82 291.857 180.03 293.077 180.03 294.557 cv
180.03 296.047 178.82 297.257 177.33 297.257 cv
175.85 297.257 174.63 296.047 174.63 294.557 cv
@
175.6 298.587 mo
175.6 297.107 176.82 295.887 178.3 295.887 cv
179.79 295.887 181 297.107 181 298.587 cv
181 300.077 179.79 301.287 178.3 301.287 cv
176.82 301.287 175.6 300.077 175.6 298.587 cv
@
176.57 302.577 mo
176.57 301.097 177.79 299.877 179.27 299.877 cv
180.76 299.877 181.97 301.097 181.97 302.577 cv
181.97 304.067 180.76 305.277 179.27 305.277 cv
177.79 305.277 176.57 304.067 176.57 302.577 cv
@
177.54 306.517 mo
177.54 305.037 178.76 303.817 180.24 303.817 cv
181.73 303.817 182.94 305.037 182.94 306.517 cv
182.94 308.007 181.73 309.217 180.24 309.217 cv
178.76 309.217 177.54 308.007 177.54 306.517 cv
@
178.51 310.417 mo
178.51 308.927 179.73 307.717 181.21 307.717 cv
182.7 307.717 183.91 308.927 183.91 310.417 cv
183.91 311.897 182.7 313.117 181.21 313.117 cv
179.73 313.117 178.51 311.897 178.51 310.417 cv
@
179.48 314.267 mo
179.48 312.787 180.7 311.567 182.18 311.567 cv
183.67 311.567 184.88 312.787 184.88 314.267 cv
184.88 315.757 183.67 316.967 182.18 316.967 cv
180.7 316.967 179.48 315.757 179.48 314.267 cv
@
180.45 318.077 mo
180.45 316.587 181.67 315.377 183.15 315.377 cv
184.64 315.377 185.85 316.587 185.85 318.077 cv
185.85 319.557 184.64 320.777 183.15 320.777 cv
181.67 320.777 180.45 319.557 180.45 318.077 cv
@
181.42 321.837 mo
181.42 320.357 182.64 319.137 184.12 319.137 cv
185.61 319.137 186.82 320.357 186.82 321.837 cv
186.82 323.327 185.61 324.537 184.12 324.537 cv
182.64 324.537 181.42 323.327 181.42 321.837 cv
@
182.39 325.557 mo
182.39 324.077 183.61 322.857 185.09 322.857 cv
186.58 322.857 187.79 324.077 187.79 325.557 cv
187.79 327.047 186.58 328.257 185.09 328.257 cv
183.61 328.257 182.39 327.047 182.39 325.557 cv
@
183.36 329.237 mo
183.36 327.747 184.58 326.537 186.06 326.537 cv
187.55 326.537 188.76 327.747 188.76 329.237 cv
188.76 330.717 187.55 331.937 186.06 331.937 cv
184.58 331.937 183.36 330.717 183.36 329.237 cv
@
184.33 332.867 mo
184.33 331.377 185.55 330.167 187.03 330.167 cv
188.52 330.167 189.73 331.377 189.73 332.867 cv
189.73 334.347 188.52 335.567 187.03 335.567 cv
185.55 335.567 184.33 334.347 184.33 332.867 cv
@
185.3 336.447 mo
185.3 334.967 186.52 333.747 188 333.747 cv
189.49 333.747 190.7 334.967 190.7 336.447 cv
190.7 337.937 189.49 339.147 188 339.147 cv
186.52 339.147 185.3 337.937 185.3 336.447 cv
@
186.27 339.997 mo
186.27 338.507 187.49 337.297 188.97 337.297 cv
190.46 337.297 191.67 338.507 191.67 339.997 cv
191.67 341.477 190.46 342.697 188.97 342.697 cv
187.49 342.697 186.27 341.477 186.27 339.997 cv
@
187.24 343.497 mo
187.24 342.007 188.46 340.797 189.94 340.797 cv
191.43 340.797 192.64 342.007 192.64 343.497 cv
192.64 344.977 191.43 346.197 189.94 346.197 cv
188.46 346.197 187.24 344.977 187.24 343.497 cv
@
188.21 346.957 mo
188.21 345.467 189.43 344.257 190.91 344.257 cv
192.4 344.257 193.61 345.467 193.61 346.957 cv
193.61 348.437 192.4 349.657 190.91 349.657 cv
189.43 349.657 188.21 348.437 188.21 346.957 cv
@
189.18 350.377 mo
189.18 348.887 190.4 347.677 191.88 347.677 cv
193.37 347.677 194.58 348.887 194.58 350.377 cv
194.58 351.857 193.37 353.077 191.88 353.077 cv
190.4 353.077 189.18 351.857 189.18 350.377 cv
@
190.15 353.747 mo
190.15 352.257 191.37 351.047 192.85 351.047 cv
194.34 351.047 195.55 352.257 195.55 353.747 cv
195.55 355.227 194.34 356.447 192.85 356.447 cv
191.37 356.447 190.15 355.227 190.15 353.747 cv
@
191.12 357.077 mo
191.12 355.597 192.34 354.377 193.82 354.377 cv
195.31 354.377 196.52 355.597 196.52 357.077 cv
196.52 358.567 195.31 359.777 193.82 359.777 cv
192.34 359.777 191.12 358.567 191.12 357.077 cv
@
192.09 360.367 mo
192.09 358.887 193.31 357.667 194.79 357.667 cv
196.28 357.667 197.49 358.887 197.49 360.367 cv
197.49 361.857 196.28 363.067 194.79 363.067 cv
193.31 363.067 192.09 361.857 192.09 360.367 cv
@
193.06 363.627 mo
193.06 362.137 194.28 360.927 195.76 360.927 cv
197.25 360.927 198.46 362.137 198.46 363.627 cv
198.46 365.107 197.25 366.327 195.76 366.327 cv
194.28 366.327 193.06 365.107 193.06 363.627 cv
@
194.03 366.837 mo
194.03 365.347 195.25 364.137 196.73 364.137 cv
198.22 364.137 199.43 365.347 199.43 366.837 cv
199.43 368.317 198.22 369.537 196.73 369.537 cv
195.25 369.537 194.03 368.317 194.03 366.837 cv
@
195 370.007 mo
195 368.517 196.22 367.307 197.7 367.307 cv
199.19 367.307 200.4 368.517 200.4 370.007 cv
200.4 371.487 199.19 372.707 197.7 372.707 cv
196.22 372.707 195 371.487 195 370.007 cv
@
195.97 373.137 mo
195.97 371.647 197.19 370.437 198.67 370.437 cv
200.16 370.437 201.37 371.647 201.37 373.137 cv
201.37 374.617 200.16 375.837 198.67 375.837 cv
197.19 375.837 195.97 374.617 195.97 373.137 cv
@
196.94 376.227 mo
196.94 374.737 198.16 373.527 199.64 373.527 cv
201.13 373.527 202.34 374.737 202.34 376.227 cv
202.34 377.707 201.13 378.927 199.64 378.927 cv
198.16 378.927 196.94 377.707 196.94 376.227 cv
@
197.91 379.277 mo
197.91 377.787 199.13 376.577 200.61 376.577 cv
202.1 376.577 203.31 377.787 203.31 379.277 cv
203.31 380.757 202.1 381.977 200.61 381.977 cv
199.13 381.977 197.91 380.757 197.91 379.277 cv
@
198.88 382.287 mo
198.88 380.807 200.1 379.587 201.58 379.587 cv
203.07 379.587 204.28 380.807 204.28 382.287 cv
204.28 383.777 203.07 384.987 201.58 384.987 cv
200.1 384.987 198.88 383.777 198.88 382.287 cv
@
199.85 385.267 mo
199.85 383.777 201.07 382.567 202.55 382.567 cv
204.04 382.567 205.25 383.777 205.25 385.267 cv
205.25 386.747 204.04 387.967 202.55 387.967 cv
201.07 387.967 199.85 386.747 199.85 385.267 cv
@
200.82 388.197 mo
200.82 386.717 202.04 385.497 203.52 385.497 cv
205.01 385.497 206.22 386.717 206.22 388.197 cv
206.22 389.687 205.01 390.897 203.52 390.897 cv
202.04 390.897 200.82 389.687 200.82 388.197 cv
@
201.79 391.097 mo
201.79 389.617 203.01 388.397 204.49 388.397 cv
205.98 388.397 207.19 389.617 207.19 391.097 cv
207.19 392.587 205.98 393.797 204.49 393.797 cv
203.01 393.797 201.79 392.587 201.79 391.097 cv
@
202.76 393.967 mo
202.76 392.477 203.98 391.267 205.46 391.267 cv
206.95 391.267 208.16 392.477 208.16 393.967 cv
208.16 395.447 206.95 396.667 205.46 396.667 cv
203.98 396.667 202.76 395.447 202.76 393.967 cv
@
203.73 396.787 mo
203.73 395.307 204.95 394.087 206.43 394.087 cv
207.92 394.087 209.13 395.307 209.13 396.787 cv
209.13 398.277 207.92 399.487 206.43 399.487 cv
204.95 399.487 203.73 398.277 203.73 396.787 cv
@
204.7 399.577 mo
204.7 398.097 205.92 396.877 207.4 396.877 cv
208.89 396.877 210.1 398.097 210.1 399.577 cv
210.1 401.067 208.89 402.277 207.4 402.277 cv
205.92 402.277 204.7 401.067 204.7 399.577 cv
@
205.67 402.337 mo
205.67 400.847 206.89 399.637 208.37 399.637 cv
209.86 399.637 211.07 400.847 211.07 402.337 cv
211.07 403.817 209.86 405.037 208.37 405.037 cv
206.89 405.037 205.67 403.817 205.67 402.337 cv
@
206.64 405.057 mo
206.64 403.567 207.86 402.357 209.34 402.357 cv
210.83 402.357 212.04 403.567 212.04 405.057 cv
212.04 406.537 210.83 407.757 209.34 407.757 cv
207.86 407.757 206.64 406.537 206.64 405.057 cv
@
207.61 407.737 mo
207.61 406.257 208.83 405.037 210.31 405.037 cv
211.8 405.037 213.01 406.257 213.01 407.737 cv
213.01 409.227 211.8 410.437 210.31 410.437 cv
208.83 410.437 207.61 409.227 207.61 407.737 cv
@
208.58 410.387 mo
208.58 408.907 209.8 407.687 211.28 407.687 cv
212.77 407.687 213.98 408.907 213.98 410.387 cv
213.98 411.877 212.77 413.087 211.28 413.087 cv
209.8 413.087 208.58 411.877 208.58 410.387 cv
@
209.55 413.007 mo
209.55 411.517 210.77 410.307 212.25 410.307 cv
213.74 410.307 214.95 411.517 214.95 413.007 cv
214.95 414.487 213.74 415.707 212.25 415.707 cv
210.77 415.707 209.55 414.487 209.55 413.007 cv
@
210.52 415.587 mo
210.52 414.107 211.74 412.887 213.22 412.887 cv
214.71 412.887 215.92 414.107 215.92 415.587 cv
215.92 417.077 214.71 418.287 213.22 418.287 cv
211.74 418.287 210.52 417.077 210.52 415.587 cv
@
211.49 418.137 mo
211.49 416.647 212.71 415.437 214.19 415.437 cv
215.68 415.437 216.89 416.647 216.89 418.137 cv
216.89 419.617 215.68 420.837 214.19 420.837 cv
212.71 420.837 211.49 419.617 211.49 418.137 cv
@
212.46 420.657 mo
212.46 419.167 213.68 417.957 215.16 417.957 cv
216.65 417.957 217.86 419.167 217.86 420.657 cv
217.86 422.137 216.65 423.357 215.16 423.357 cv
213.68 423.357 212.46 422.137 212.46 420.657 cv
@
213.43 423.137 mo
213.43 421.657 214.65 420.437 216.13 420.437 cv
217.62 420.437 218.83 421.657 218.83 423.137 cv
218.83 424.627 217.62 425.837 216.13 425.837 cv
214.65 425.837 213.43 424.627 213.43 423.137 cv
@
214.4 425.587 mo
214.4 424.107 215.62 422.887 217.1 422.887 cv
218.59 422.887 219.8 424.107 219.8 425.587 cv
219.8 427.077 218.59 428.287 217.1 428.287 cv
215.62 428.287 214.4 427.077 214.4 425.587 cv
@
215.37 428.007 mo
215.37 426.527 216.59 425.307 218.07 425.307 cv
219.56 425.307 220.77 426.527 220.77 428.007 cv
220.77 429.497 219.56 430.707 218.07 430.707 cv
216.59 430.707 215.37 429.497 215.37 428.007 cv
@
216.34 430.397 mo
216.34 428.917 217.56 427.697 219.04 427.697 cv
220.53 427.697 221.74 428.917 221.74 430.397 cv
221.74 431.887 220.53 433.097 219.04 433.097 cv
217.56 433.097 216.34 431.887 216.34 430.397 cv
@
217.31 432.757 mo
217.31 431.277 218.53 430.057 220.01 430.057 cv
221.5 430.057 222.71 431.277 222.71 432.757 cv
222.71 434.247 221.5 435.457 220.01 435.457 cv
218.53 435.457 217.31 434.247 217.31 432.757 cv
@
218.28 435.087 mo
218.28 433.607 219.5 432.387 220.98 432.387 cv
222.47 432.387 223.68 433.607 223.68 435.087 cv
223.68 436.577 222.47 437.787 220.98 437.787 cv
219.5 437.787 218.28 436.577 218.28 435.087 cv
@
219.25 437.387 mo
219.25 435.897 220.47 434.687 221.95 434.687 cv
223.44 434.687 224.65 435.897 224.65 437.387 cv
224.65 438.867 223.44 440.087 221.95 440.087 cv
220.47 440.087 219.25 438.867 219.25 437.387 cv
@
220.22 439.657 mo
220.22 438.167 221.44 436.957 222.92 436.957 cv
224.41 436.957 225.62 438.167 225.62 439.657 cv
225.62 441.137 224.41 442.357 222.92 442.357 cv
221.44 442.357 220.22 441.137 220.22 439.657 cv
@
221.19 441.897 mo
221.19 440.407 222.41 439.197 223.89 439.197 cv
225.38 439.197 226.59 440.407 226.59 441.897 cv
226.59 443.377 225.38 444.597 223.89 444.597 cv
222.41 444.597 221.19 443.377 221.19 441.897 cv
@
222.16 444.107 mo
222.16 442.617 223.38 441.407 224.86 441.407 cv
226.35 441.407 227.56 442.617 227.56 444.107 cv
227.56 445.587 226.35 446.807 224.86 446.807 cv
223.38 446.807 222.16 445.587 222.16 444.107 cv
@
223.13 446.287 mo
223.13 444.807 224.35 443.587 225.83 443.587 cv
227.32 443.587 228.53 444.807 228.53 446.287 cv
228.53 447.777 227.32 448.987 225.83 448.987 cv
224.35 448.987 223.13 447.777 223.13 446.287 cv
@
224.1 448.447 mo
224.1 446.957 225.32 445.747 226.8 445.747 cv
228.29 445.747 229.5 446.957 229.5 448.447 cv
229.5 449.927 228.29 451.147 226.8 451.147 cv
225.32 451.147 224.1 449.927 224.1 448.447 cv
@
225.07 450.567 mo
225.07 449.087 226.29 447.867 227.77 447.867 cv
229.26 447.867 230.47 449.087 230.47 450.567 cv
230.47 452.057 229.26 453.267 227.77 453.267 cv
226.29 453.267 225.07 452.057 225.07 450.567 cv
@
226.04 452.667 mo
226.04 451.187 227.26 449.967 228.74 449.967 cv
230.23 449.967 231.44 451.187 231.44 452.667 cv
231.44 454.157 230.23 455.367 228.74 455.367 cv
227.26 455.367 226.04 454.157 226.04 452.667 cv
@
227.01 454.747 mo
227.01 453.257 228.23 452.047 229.71 452.047 cv
231.2 452.047 232.41 453.257 232.41 454.747 cv
232.41 456.227 231.2 457.447 229.71 457.447 cv
228.23 457.447 227.01 456.227 227.01 454.747 cv
@
227.98 456.797 mo
227.98 455.307 229.2 454.097 230.68 454.097 cv
232.17 454.097 233.38 455.307 233.38 456.797 cv
233.38 458.277 232.17 459.497 230.68 459.497 cv
229.2 459.497 227.98 458.277 227.98 456.797 cv
@
228.95 458.817 mo
228.95 457.327 230.17 456.117 231.65 456.117 cv
233.14 456.117 234.35 457.327 234.35 458.817 cv
234.35 460.297 233.14 461.517 231.65 461.517 cv
230.17 461.517 228.95 460.297 228.95 458.817 cv
@
229.92 460.807 mo
229.92 459.327 231.14 458.107 232.62 458.107 cv
234.11 458.107 235.32 459.327 235.32 460.807 cv
235.32 462.297 234.11 463.507 232.62 463.507 cv
231.14 463.507 229.92 462.297 229.92 460.807 cv
@
230.89 462.777 mo
230.89 461.297 232.11 460.077 233.59 460.077 cv
235.08 460.077 236.29 461.297 236.29 462.777 cv
236.29 464.267 235.08 465.477 233.59 465.477 cv
232.11 465.477 230.89 464.267 230.89 462.777 cv
@
231.86 464.727 mo
231.86 463.237 233.08 462.027 234.56 462.027 cv
236.05 462.027 237.26 463.237 237.26 464.727 cv
237.26 466.207 236.05 467.427 234.56 467.427 cv
233.08 467.427 231.86 466.207 231.86 464.727 cv
@
232.83 466.647 mo
232.83 465.157 234.05 463.947 235.53 463.947 cv
237.02 463.947 238.23 465.157 238.23 466.647 cv
238.23 468.127 237.02 469.347 235.53 469.347 cv
234.05 469.347 232.83 468.127 232.83 466.647 cv
@
233.8 468.537 mo
233.8 467.057 235.02 465.837 236.5 465.837 cv
237.99 465.837 239.2 467.057 239.2 468.537 cv
239.2 470.027 237.99 471.237 236.5 471.237 cv
235.02 471.237 233.8 470.027 233.8 468.537 cv
@
234.77 470.407 mo
234.77 468.927 235.99 467.707 237.47 467.707 cv
238.96 467.707 240.17 468.927 240.17 470.407 cv
240.17 471.897 238.96 473.107 237.47 473.107 cv
235.99 473.107 234.77 471.897 234.77 470.407 cv
@
235.74 472.257 mo
235.74 470.777 236.96 469.557 238.44 469.557 cv
239.93 469.557 241.14 470.777 241.14 472.257 cv
241.14 473.747 239.93 474.957 238.44 474.957 cv
236.96 474.957 235.74 473.747 235.74 472.257 cv
@
236.71 474.087 mo
236.71 472.597 237.93 471.387 239.41 471.387 cv
240.9 471.387 242.11 472.597 242.11 474.087 cv
242.11 475.567 240.9 476.787 239.41 476.787 cv
237.93 476.787 236.71 475.567 236.71 474.087 cv
@
237.68 475.887 mo
237.68 474.397 238.89 473.187 240.38 473.187 cv
241.86 473.187 243.08 474.397 243.08 475.887 cv
243.08 477.367 241.86 478.587 240.38 478.587 cv
238.89 478.587 237.68 477.367 237.68 475.887 cv
@
238.65 477.667 mo
238.65 476.177 239.86 474.967 241.35 474.967 cv
242.83 474.967 244.05 476.177 244.05 477.667 cv
244.05 479.147 242.83 480.367 241.35 480.367 cv
239.86 480.367 238.65 479.147 238.65 477.667 cv
@
239.62 479.417 mo
239.62 477.937 240.83 476.717 242.32 476.717 cv
243.8 476.717 245.02 477.937 245.02 479.417 cv
245.02 480.907 243.8 482.117 242.32 482.117 cv
240.83 482.117 239.62 480.907 239.62 479.417 cv
@
240.59 481.157 mo
240.59 479.667 241.8 478.457 243.29 478.457 cv
244.77 478.457 245.99 479.667 245.99 481.157 cv
245.99 482.637 244.77 483.857 243.29 483.857 cv
241.8 483.857 240.59 482.637 240.59 481.157 cv
@
241.56 482.867 mo
241.56 481.387 242.77 480.167 244.26 480.167 cv
245.74 480.167 246.96 481.387 246.96 482.867 cv
246.96 484.357 245.74 485.567 244.26 485.567 cv
242.77 485.567 241.56 484.357 241.56 482.867 cv
@
242.53 484.557 mo
242.53 483.077 243.74 481.857 245.23 481.857 cv
246.71 481.857 247.93 483.077 247.93 484.557 cv
247.93 486.047 246.71 487.257 245.23 487.257 cv
243.74 487.257 242.53 486.047 242.53 484.557 cv
@
243.5 486.227 mo
243.5 484.747 244.71 483.527 246.2 483.527 cv
247.68 483.527 248.9 484.747 248.9 486.227 cv
248.9 487.717 247.68 488.927 246.2 488.927 cv
244.71 488.927 243.5 487.717 243.5 486.227 cv
@
244.47 487.877 mo
244.47 486.397 245.68 485.177 247.17 485.177 cv
248.65 485.177 249.87 486.397 249.87 487.877 cv
249.87 489.367 248.65 490.577 247.17 490.577 cv
245.68 490.577 244.47 489.367 244.47 487.877 cv
@
245.44 489.507 mo
245.44 488.027 246.65 486.807 248.14 486.807 cv
249.62 486.807 250.84 488.027 250.84 489.507 cv
250.84 490.997 249.62 492.207 248.14 492.207 cv
246.65 492.207 245.44 490.997 245.44 489.507 cv
@
246.41 491.117 mo
246.41 489.637 247.62 488.417 249.11 488.417 cv
250.59 488.417 251.81 489.637 251.81 491.117 cv
251.81 492.607 250.59 493.817 249.11 493.817 cv
247.62 493.817 246.41 492.607 246.41 491.117 cv
@
247.38 492.707 mo
247.38 491.217 248.59 490.007 250.08 490.007 cv
251.56 490.007 252.78 491.217 252.78 492.707 cv
252.78 494.187 251.56 495.407 250.08 495.407 cv
248.59 495.407 247.38 494.187 247.38 492.707 cv
@
248.35 494.277 mo
248.35 492.787 249.56 491.577 251.05 491.577 cv
252.53 491.577 253.75 492.787 253.75 494.277 cv
253.75 495.757 252.53 496.977 251.05 496.977 cv
249.56 496.977 248.35 495.757 248.35 494.277 cv
@
249.32 495.827 mo
249.32 494.337 250.53 493.127 252.02 493.127 cv
253.5 493.127 254.72 494.337 254.72 495.827 cv
254.72 497.307 253.5 498.527 252.02 498.527 cv
250.53 498.527 249.32 497.307 249.32 495.827 cv
@
250.29 497.357 mo
250.29 495.877 251.5 494.657 252.99 494.657 cv
254.47 494.657 255.69 495.877 255.69 497.357 cv
255.69 498.847 254.47 500.057 252.99 500.057 cv
251.5 500.057 250.29 498.847 250.29 497.357 cv
@
251.26 498.867 mo
251.26 497.387 252.47 496.167 253.96 496.167 cv
255.44 496.167 256.66 497.387 256.66 498.867 cv
256.66 500.357 255.44 501.567 253.96 501.567 cv
252.47 501.567 251.26 500.357 251.26 498.867 cv
@
252.23 500.367 mo
252.23 498.877 253.44 497.667 254.93 497.667 cv
256.41 497.667 257.63 498.877 257.63 500.367 cv
257.63 501.847 256.41 503.067 254.93 503.067 cv
253.44 503.067 252.23 501.847 252.23 500.367 cv
@
253.2 501.837 mo
253.2 500.357 254.41 499.137 255.9 499.137 cv
257.38 499.137 258.6 500.357 258.6 501.837 cv
258.6 503.327 257.38 504.537 255.9 504.537 cv
254.41 504.537 253.2 503.327 253.2 501.837 cv
@
254.17 503.297 mo
254.17 501.807 255.38 500.597 256.87 500.597 cv
258.35 500.597 259.57 501.807 259.57 503.297 cv
259.57 504.777 258.35 505.997 256.87 505.997 cv
255.38 505.997 254.17 504.777 254.17 503.297 cv
@
255.14 504.737 mo
255.14 503.247 256.35 502.037 257.84 502.037 cv
259.32 502.037 260.54 503.247 260.54 504.737 cv
260.54 506.217 259.32 507.437 257.84 507.437 cv
256.35 507.437 255.14 506.217 255.14 504.737 cv
@
256.11 506.157 mo
256.11 504.677 257.32 503.457 258.81 503.457 cv
260.29 503.457 261.51 504.677 261.51 506.157 cv
261.51 507.647 260.29 508.857 258.81 508.857 cv
257.32 508.857 256.11 507.647 256.11 506.157 cv
@
257.08 507.567 mo
257.08 506.077 258.29 504.867 259.78 504.867 cv
261.26 504.867 262.48 506.077 262.48 507.567 cv
262.48 509.047 261.26 510.267 259.78 510.267 cv
258.29 510.267 257.08 509.047 257.08 507.567 cv
@
258.05 508.957 mo
258.05 507.467 259.26 506.257 260.75 506.257 cv
262.23 506.257 263.45 507.467 263.45 508.957 cv
263.45 510.437 262.23 511.657 260.75 511.657 cv
259.26 511.657 258.05 510.437 258.05 508.957 cv
@
259.02 510.327 mo
259.02 508.837 260.23 507.627 261.72 507.627 cv
263.2 507.627 264.42 508.837 264.42 510.327 cv
264.42 511.807 263.2 513.027 261.72 513.027 cv
260.23 513.027 259.02 511.807 259.02 510.327 cv
@
259.99 511.677 mo
259.99 510.197 261.2 508.977 262.69 508.977 cv
264.17 508.977 265.39 510.197 265.39 511.677 cv
265.39 513.167 264.17 514.377 262.69 514.377 cv
261.2 514.377 259.99 513.167 259.99 511.677 cv
@
260.96 513.017 mo
260.96 511.537 262.17 510.317 263.66 510.317 cv
265.14 510.317 266.36 511.537 266.36 513.017 cv
266.36 514.507 265.14 515.717 263.66 515.717 cv
262.17 515.717 260.96 514.507 260.96 513.017 cv
@
261.93 514.337 mo
261.93 512.857 263.14 511.637 264.63 511.637 cv
266.11 511.637 267.33 512.857 267.33 514.337 cv
267.33 515.827 266.11 517.037 264.63 517.037 cv
263.14 517.037 261.93 515.827 261.93 514.337 cv
@
262.9 515.647 mo
262.9 514.167 264.11 512.947 265.6 512.947 cv
267.08 512.947 268.3 514.167 268.3 515.647 cv
268.3 517.137 267.08 518.347 265.6 518.347 cv
264.11 518.347 262.9 517.137 262.9 515.647 cv
@
263.87 516.937 mo
263.87 515.457 265.08 514.237 266.57 514.237 cv
268.05 514.237 269.27 515.457 269.27 516.937 cv
269.27 518.427 268.05 519.637 266.57 519.637 cv
265.08 519.637 263.87 518.427 263.87 516.937 cv
@
264.84 518.217 mo
264.84 516.727 266.05 515.517 267.54 515.517 cv
269.02 515.517 270.24 516.727 270.24 518.217 cv
270.24 519.697 269.02 520.917 267.54 520.917 cv
266.05 520.917 264.84 519.697 264.84 518.217 cv
@
265.81 519.477 mo
265.81 517.987 267.02 516.777 268.51 516.777 cv
269.99 516.777 271.21 517.987 271.21 519.477 cv
271.21 520.957 269.99 522.177 268.51 522.177 cv
267.02 522.177 265.81 520.957 265.81 519.477 cv
@
266.78 520.727 mo
266.78 519.237 267.99 518.027 269.48 518.027 cv
270.96 518.027 272.18 519.237 272.18 520.727 cv
272.18 522.207 270.96 523.427 269.48 523.427 cv
267.99 523.427 266.78 522.207 266.78 520.727 cv
@
267.75 521.957 mo
267.75 520.467 268.96 519.257 270.45 519.257 cv
271.93 519.257 273.15 520.467 273.15 521.957 cv
273.15 523.437 271.93 524.657 270.45 524.657 cv
268.96 524.657 267.75 523.437 267.75 521.957 cv
@
268.72 523.167 mo
268.72 521.687 269.93 520.467 271.42 520.467 cv
272.9 520.467 274.12 521.687 274.12 523.167 cv
274.12 524.657 272.9 525.867 271.42 525.867 cv
269.93 525.867 268.72 524.657 268.72 523.167 cv
@
269.69 524.377 mo
269.69 522.887 270.9 521.677 272.39 521.677 cv
273.87 521.677 275.09 522.887 275.09 524.377 cv
275.09 525.857 273.87 527.077 272.39 527.077 cv
270.9 527.077 269.69 525.857 269.69 524.377 cv
@
270.66 525.567 mo
270.66 524.077 271.87 522.867 273.36 522.867 cv
274.84 522.867 276.06 524.077 276.06 525.567 cv
276.06 527.047 274.84 528.267 273.36 528.267 cv
271.87 528.267 270.66 527.047 270.66 525.567 cv
@
271.63 526.737 mo
271.63 525.257 272.84 524.037 274.33 524.037 cv
275.81 524.037 277.03 525.257 277.03 526.737 cv
277.03 528.227 275.81 529.437 274.33 529.437 cv
272.84 529.437 271.63 528.227 271.63 526.737 cv
@
272.6 527.897 mo
272.6 526.417 273.81 525.197 275.3 525.197 cv
276.78 525.197 278 526.417 278 527.897 cv
278 529.387 276.78 530.597 275.3 530.597 cv
273.81 530.597 272.6 529.387 272.6 527.897 cv
@
273.57 529.047 mo
273.57 527.557 274.78 526.347 276.27 526.347 cv
277.75 526.347 278.97 527.557 278.97 529.047 cv
278.97 530.527 277.75 531.747 276.27 531.747 cv
274.78 531.747 273.57 530.527 273.57 529.047 cv
@
274.54 530.177 mo
274.54 528.697 275.75 527.477 277.24 527.477 cv
278.72 527.477 279.94 528.697 279.94 530.177 cv
279.94 531.667 278.72 532.877 277.24 532.877 cv
275.75 532.877 274.54 531.667 274.54 530.177 cv
@
275.51 531.307 mo
275.51 529.817 276.72 528.607 278.21 528.607 cv
279.69 528.607 280.91 529.817 280.91 531.307 cv
280.91 532.787 279.69 534.007 278.21 534.007 cv
276.72 534.007 275.51 532.787 275.51 531.307 cv
@
276.48 532.407 mo
276.48 530.927 277.69 529.707 279.18 529.707 cv
280.66 529.707 281.88 530.927 281.88 532.407 cv
281.88 533.897 280.66 535.107 279.18 535.107 cv
277.69 535.107 276.48 533.897 276.48 532.407 cv
@
277.45 533.507 mo
277.45 532.017 278.66 530.807 280.15 530.807 cv
281.63 530.807 282.85 532.017 282.85 533.507 cv
282.85 534.987 281.63 536.207 280.15 536.207 cv
278.66 536.207 277.45 534.987 277.45 533.507 cv
@
278.42 534.587 mo
278.42 533.107 279.63 531.887 281.12 531.887 cv
282.6 531.887 283.82 533.107 283.82 534.587 cv
283.82 536.077 282.6 537.287 281.12 537.287 cv
279.63 537.287 278.42 536.077 278.42 534.587 cv
@
279.39 535.657 mo
279.39 534.177 280.6 532.957 282.09 532.957 cv
283.57 532.957 284.79 534.177 284.79 535.657 cv
284.79 537.147 283.57 538.357 282.09 538.357 cv
280.6 538.357 279.39 537.147 279.39 535.657 cv
@
280.36 536.717 mo
280.36 535.237 281.57 534.017 283.06 534.017 cv
284.54 534.017 285.76 535.237 285.76 536.717 cv
285.76 538.207 284.54 539.417 283.06 539.417 cv
281.57 539.417 280.36 538.207 280.36 536.717 cv
@
281.33 537.767 mo
281.33 536.287 282.54 535.067 284.03 535.067 cv
285.51 535.067 286.73 536.287 286.73 537.767 cv
286.73 539.257 285.51 540.467 284.03 540.467 cv
282.54 540.467 281.33 539.257 281.33 537.767 cv
@
282.3 538.807 mo
282.3 537.317 283.51 536.107 285 536.107 cv
286.48 536.107 287.7 537.317 287.7 538.807 cv
287.7 540.287 286.48 541.507 285 541.507 cv
283.51 541.507 282.3 540.287 282.3 538.807 cv
@
283.27 539.827 mo
283.27 538.337 284.48 537.127 285.97 537.127 cv
287.45 537.127 288.67 538.337 288.67 539.827 cv
288.67 541.307 287.45 542.527 285.97 542.527 cv
284.48 542.527 283.27 541.307 283.27 539.827 cv
@
284.24 540.837 mo
284.24 539.357 285.45 538.137 286.94 538.137 cv
288.42 538.137 289.64 539.357 289.64 540.837 cv
289.64 542.327 288.42 543.537 286.94 543.537 cv
285.45 543.537 284.24 542.327 284.24 540.837 cv
@
285.21 541.837 mo
285.21 540.357 286.42 539.137 287.91 539.137 cv
289.39 539.137 290.61 540.357 290.61 541.837 cv
290.61 543.327 289.39 544.537 287.91 544.537 cv
286.42 544.537 285.21 543.327 285.21 541.837 cv
@
286.18 542.827 mo
286.18 541.347 287.39 540.127 288.88 540.127 cv
290.36 540.127 291.58 541.347 291.58 542.827 cv
291.58 544.317 290.36 545.527 288.88 545.527 cv
287.39 545.527 286.18 544.317 286.18 542.827 cv
@
287.15 543.807 mo
287.15 542.327 288.36 541.107 289.85 541.107 cv
291.33 541.107 292.55 542.327 292.55 543.807 cv
292.55 545.297 291.33 546.507 289.85 546.507 cv
288.36 546.507 287.15 545.297 287.15 543.807 cv
@
288.12 544.777 mo
288.12 543.287 289.33 542.077 290.82 542.077 cv
292.3 542.077 293.52 543.287 293.52 544.777 cv
293.52 546.257 292.3 547.477 290.82 547.477 cv
289.33 547.477 288.12 546.257 288.12 544.777 cv
@
289.09 545.737 mo
289.09 544.247 290.3 543.037 291.79 543.037 cv
293.27 543.037 294.49 544.247 294.49 545.737 cv
294.49 547.217 293.27 548.437 291.79 548.437 cv
290.3 548.437 289.09 547.217 289.09 545.737 cv
@
290.06 546.677 mo
290.06 545.197 291.27 543.977 292.76 543.977 cv
294.24 543.977 295.46 545.197 295.46 546.677 cv
295.46 548.167 294.24 549.377 292.76 549.377 cv
291.27 549.377 290.06 548.167 290.06 546.677 cv
@
291.03 547.617 mo
291.03 546.127 292.24 544.917 293.73 544.917 cv
295.21 544.917 296.43 546.127 296.43 547.617 cv
296.43 549.097 295.21 550.317 293.73 550.317 cv
292.24 550.317 291.03 549.097 291.03 547.617 cv
@
292 548.537 mo
292 547.057 293.21 545.837 294.7 545.837 cv
296.18 545.837 297.4 547.057 297.4 548.537 cv
297.4 550.027 296.18 551.237 294.7 551.237 cv
293.21 551.237 292 550.027 292 548.537 cv
@
292.97 549.457 mo
292.97 547.977 294.18 546.757 295.67 546.757 cv
297.15 546.757 298.37 547.977 298.37 549.457 cv
298.37 550.947 297.15 552.157 295.67 552.157 cv
294.18 552.157 292.97 550.947 292.97 549.457 cv
@
293.94 550.367 mo
293.94 548.877 295.15 547.667 296.64 547.667 cv
298.12 547.667 299.34 548.877 299.34 550.367 cv
299.34 551.847 298.12 553.067 296.64 553.067 cv
295.15 553.067 293.94 551.847 293.94 550.367 cv
@
294.91 551.257 mo
294.91 549.777 296.12 548.557 297.61 548.557 cv
299.09 548.557 300.31 549.777 300.31 551.257 cv
300.31 552.747 299.09 553.957 297.61 553.957 cv
296.12 553.957 294.91 552.747 294.91 551.257 cv
@
295.88 552.147 mo
295.88 550.667 297.09 549.447 298.58 549.447 cv
300.06 549.447 301.28 550.667 301.28 552.147 cv
301.28 553.637 300.06 554.847 298.58 554.847 cv
297.09 554.847 295.88 553.637 295.88 552.147 cv
@
296.85 553.027 mo
296.85 551.537 298.06 550.327 299.55 550.327 cv
301.03 550.327 302.25 551.537 302.25 553.027 cv
302.25 554.507 301.03 555.727 299.55 555.727 cv
298.06 555.727 296.85 554.507 296.85 553.027 cv
@
297.82 553.897 mo
297.82 552.407 299.03 551.197 300.52 551.197 cv
302 551.197 303.22 552.407 303.22 553.897 cv
303.22 555.377 302 556.597 300.52 556.597 cv
299.03 556.597 297.82 555.377 297.82 553.897 cv
@
298.79 554.747 mo
298.79 553.267 300 552.047 301.49 552.047 cv
302.97 552.047 304.19 553.267 304.19 554.747 cv
304.19 556.237 302.97 557.447 301.49 557.447 cv
300 557.447 298.79 556.237 298.79 554.747 cv
@
299.76 555.597 mo
299.76 554.117 300.97 552.897 302.46 552.897 cv
303.94 552.897 305.16 554.117 305.16 555.597 cv
305.16 557.087 303.94 558.297 302.46 558.297 cv
300.97 558.297 299.76 557.087 299.76 555.597 cv
@
300.73 556.437 mo
300.73 554.957 301.94 553.737 303.43 553.737 cv
304.91 553.737 306.13 554.957 306.13 556.437 cv
306.13 557.927 304.91 559.137 303.43 559.137 cv
301.94 559.137 300.73 557.927 300.73 556.437 cv
@
301.7 557.277 mo
301.7 555.787 302.91 554.577 304.4 554.577 cv
305.88 554.577 307.1 555.787 307.1 557.277 cv
307.1 558.757 305.88 559.977 304.4 559.977 cv
302.91 559.977 301.7 558.757 301.7 557.277 cv
@
302.67 558.097 mo
302.67 556.607 303.88 555.397 305.37 555.397 cv
306.85 555.397 308.07 556.607 308.07 558.097 cv
308.07 559.577 306.85 560.797 305.37 560.797 cv
303.88 560.797 302.67 559.577 302.67 558.097 cv
@
303.64 558.907 mo
303.64 557.427 304.85 556.207 306.34 556.207 cv
307.82 556.207 309.04 557.427 309.04 558.907 cv
309.04 560.397 307.82 561.607 306.34 561.607 cv
304.85 561.607 303.64 560.397 303.64 558.907 cv
@
304.61 559.717 mo
304.61 558.227 305.82 557.017 307.31 557.017 cv
308.79 557.017 310.01 558.227 310.01 559.717 cv
310.01 561.197 308.79 562.417 307.31 562.417 cv
305.82 562.417 304.61 561.197 304.61 559.717 cv
@
305.58 560.517 mo
305.58 559.027 306.79 557.817 308.28 557.817 cv
309.76 557.817 310.98 559.027 310.98 560.517 cv
310.98 561.997 309.76 563.217 308.28 563.217 cv
306.79 563.217 305.58 561.997 305.58 560.517 cv
@
306.55 561.307 mo
306.55 559.817 307.76 558.607 309.25 558.607 cv
310.73 558.607 311.95 559.817 311.95 561.307 cv
311.95 562.787 310.73 564.007 309.25 564.007 cv
307.76 564.007 306.55 562.787 306.55 561.307 cv
@
307.52 562.087 mo
307.52 560.597 308.73 559.387 310.22 559.387 cv
311.7 559.387 312.92 560.597 312.92 562.087 cv
312.92 563.567 311.7 564.787 310.22 564.787 cv
308.73 564.787 307.52 563.567 307.52 562.087 cv
@
308.49 562.857 mo
308.49 561.377 309.7 560.157 311.19 560.157 cv
312.67 560.157 313.89 561.377 313.89 562.857 cv
313.89 564.347 312.67 565.557 311.19 565.557 cv
309.7 565.557 308.49 564.347 308.49 562.857 cv
@
309.46 563.627 mo
309.46 562.137 310.67 560.927 312.16 560.927 cv
313.64 560.927 314.86 562.137 314.86 563.627 cv
314.86 565.107 313.64 566.327 312.16 566.327 cv
310.67 566.327 309.46 565.107 309.46 563.627 cv
@
310.43 564.377 mo
310.43 562.897 311.64 561.677 313.13 561.677 cv
314.61 561.677 315.83 562.897 315.83 564.377 cv
315.83 565.867 314.61 567.077 313.13 567.077 cv
311.64 567.077 310.43 565.867 310.43 564.377 cv
@
311.4 565.127 mo
311.4 563.647 312.61 562.427 314.1 562.427 cv
315.58 562.427 316.8 563.647 316.8 565.127 cv
316.8 566.617 315.58 567.827 314.1 567.827 cv
312.61 567.827 311.4 566.617 311.4 565.127 cv
@
312.37 565.867 mo
312.37 564.387 313.58 563.167 315.07 563.167 cv
316.55 563.167 317.77 564.387 317.77 565.867 cv
317.77 567.357 316.55 568.567 315.07 568.567 cv
313.58 568.567 312.37 567.357 312.37 565.867 cv
@
313.34 566.607 mo
313.34 565.117 314.55 563.907 316.04 563.907 cv
317.52 563.907 318.74 565.117 318.74 566.607 cv
318.74 568.087 317.52 569.307 316.04 569.307 cv
314.55 569.307 313.34 568.087 313.34 566.607 cv
@
314.31 567.337 mo
314.31 565.847 315.52 564.637 317.01 564.637 cv
318.49 564.637 319.71 565.847 319.71 567.337 cv
319.71 568.817 318.49 570.037 317.01 570.037 cv
315.52 570.037 314.31 568.817 314.31 567.337 cv
@
315.28 568.057 mo
315.28 566.567 316.49 565.357 317.98 565.357 cv
319.46 565.357 320.68 566.567 320.68 568.057 cv
320.68 569.537 319.46 570.757 317.98 570.757 cv
316.49 570.757 315.28 569.537 315.28 568.057 cv
@
316.25 568.767 mo
316.25 567.277 317.46 566.067 318.95 566.067 cv
320.43 566.067 321.65 567.277 321.65 568.767 cv
321.65 570.247 320.43 571.467 318.95 571.467 cv
317.46 571.467 316.25 570.247 316.25 568.767 cv
@
317.22 569.477 mo
317.22 567.987 318.43 566.777 319.92 566.777 cv
321.4 566.777 322.62 567.987 322.62 569.477 cv
322.62 570.957 321.4 572.177 319.92 572.177 cv
318.43 572.177 317.22 570.957 317.22 569.477 cv
@
318.18 570.167 mo
318.18 568.687 319.4 567.467 320.88 567.467 cv
322.37 567.467 323.58 568.687 323.58 570.167 cv
323.58 571.657 322.37 572.867 320.88 572.867 cv
319.4 572.867 318.18 571.657 318.18 570.167 cv
@
319.15 570.867 mo
319.15 569.377 320.37 568.167 321.85 568.167 cv
323.34 568.167 324.55 569.377 324.55 570.867 cv
324.55 572.347 323.34 573.567 321.85 573.567 cv
320.37 573.567 319.15 572.347 319.15 570.867 cv
@
320.12 571.547 mo
320.12 570.067 321.34 568.847 322.82 568.847 cv
324.31 568.847 325.52 570.067 325.52 571.547 cv
325.52 573.037 324.31 574.247 322.82 574.247 cv
321.34 574.247 320.12 573.037 320.12 571.547 cv
@
321.09 572.227 mo
321.09 570.747 322.31 569.527 323.79 569.527 cv
325.28 569.527 326.49 570.747 326.49 572.227 cv
326.49 573.717 325.28 574.927 323.79 574.927 cv
322.31 574.927 321.09 573.717 321.09 572.227 cv
@
322.06 572.897 mo
322.06 571.417 323.28 570.197 324.76 570.197 cv
326.25 570.197 327.46 571.417 327.46 572.897 cv
327.46 574.387 326.25 575.597 324.76 575.597 cv
323.28 575.597 322.06 574.387 322.06 572.897 cv
@
323.03 573.567 mo
323.03 572.077 324.25 570.867 325.73 570.867 cv
327.22 570.867 328.43 572.077 328.43 573.567 cv
328.43 575.047 327.22 576.267 325.73 576.267 cv
324.25 576.267 323.03 575.047 323.03 573.567 cv
@
324 574.227 mo
324 572.737 325.22 571.527 326.7 571.527 cv
328.19 571.527 329.4 572.737 329.4 574.227 cv
329.4 575.707 328.19 576.927 326.7 576.927 cv
325.22 576.927 324 575.707 324 574.227 cv
@
324.97 574.877 mo
324.97 573.387 326.19 572.177 327.67 572.177 cv
329.16 572.177 330.37 573.387 330.37 574.877 cv
330.37 576.357 329.16 577.577 327.67 577.577 cv
326.19 577.577 324.97 576.357 324.97 574.877 cv
@
325.94 575.527 mo
325.94 574.037 327.16 572.827 328.64 572.827 cv
330.13 572.827 331.34 574.037 331.34 575.527 cv
331.34 577.007 330.13 578.227 328.64 578.227 cv
327.16 578.227 325.94 577.007 325.94 575.527 cv
@
326.91 576.167 mo
326.91 574.677 328.13 573.467 329.61 573.467 cv
331.1 573.467 332.31 574.677 332.31 576.167 cv
332.31 577.647 331.1 578.867 329.61 578.867 cv
328.13 578.867 326.91 577.647 326.91 576.167 cv
@
327.88 576.797 mo
327.88 575.317 329.1 574.097 330.58 574.097 cv
332.07 574.097 333.28 575.317 333.28 576.797 cv
333.28 578.287 332.07 579.497 330.58 579.497 cv
329.1 579.497 327.88 578.287 327.88 576.797 cv
@
328.85 577.427 mo
328.85 575.937 330.07 574.727 331.55 574.727 cv
333.04 574.727 334.25 575.937 334.25 577.427 cv
334.25 578.907 333.04 580.127 331.55 580.127 cv
330.07 580.127 328.85 578.907 328.85 577.427 cv
@
329.82 578.047 mo
329.82 576.567 331.04 575.347 332.52 575.347 cv
334.01 575.347 335.22 576.567 335.22 578.047 cv
335.22 579.537 334.01 580.747 332.52 580.747 cv
331.04 580.747 329.82 579.537 329.82 578.047 cv
@
330.79 578.667 mo
330.79 577.177 332.01 575.967 333.49 575.967 cv
334.98 575.967 336.19 577.177 336.19 578.667 cv
336.19 580.147 334.98 581.367 333.49 581.367 cv
332.01 581.367 330.79 580.147 330.79 578.667 cv
@
331.76 579.277 mo
331.76 577.787 332.98 576.577 334.46 576.577 cv
335.95 576.577 337.16 577.787 337.16 579.277 cv
337.16 580.757 335.95 581.977 334.46 581.977 cv
332.98 581.977 331.76 580.757 331.76 579.277 cv
@
332.73 579.877 mo
332.73 578.397 333.95 577.177 335.43 577.177 cv
336.92 577.177 338.13 578.397 338.13 579.877 cv
338.13 581.367 336.92 582.577 335.43 582.577 cv
333.95 582.577 332.73 581.367 332.73 579.877 cv
@
333.7 580.477 mo
333.7 578.997 334.92 577.777 336.4 577.777 cv
337.89 577.777 339.1 578.997 339.1 580.477 cv
339.1 581.967 337.89 583.177 336.4 583.177 cv
334.92 583.177 333.7 581.967 333.7 580.477 cv
@
334.67 581.077 mo
334.67 579.587 335.89 578.377 337.37 578.377 cv
338.86 578.377 340.07 579.587 340.07 581.077 cv
340.07 582.557 338.86 583.777 337.37 583.777 cv
335.89 583.777 334.67 582.557 334.67 581.077 cv
@
335.64 581.667 mo
335.64 580.177 336.86 578.967 338.34 578.967 cv
339.83 578.967 341.04 580.177 341.04 581.667 cv
341.04 583.147 339.83 584.367 338.34 584.367 cv
336.86 584.367 335.64 583.147 335.64 581.667 cv
@
336.61 582.247 mo
336.61 580.757 337.83 579.547 339.31 579.547 cv
340.8 579.547 342.01 580.757 342.01 582.247 cv
342.01 583.727 340.8 584.947 339.31 584.947 cv
337.83 584.947 336.61 583.727 336.61 582.247 cv
@
337.58 582.827 mo
337.58 581.337 338.8 580.127 340.28 580.127 cv
341.77 580.127 342.98 581.337 342.98 582.827 cv
342.98 584.307 341.77 585.527 340.28 585.527 cv
338.8 585.527 337.58 584.307 337.58 582.827 cv
@
338.55 583.397 mo
338.55 581.907 339.77 580.697 341.25 580.697 cv
342.74 580.697 343.95 581.907 343.95 583.397 cv
343.95 584.877 342.74 586.097 341.25 586.097 cv
339.77 586.097 338.55 584.877 338.55 583.397 cv
@
339.52 583.967 mo
339.52 582.477 340.74 581.267 342.22 581.267 cv
343.71 581.267 344.92 582.477 344.92 583.967 cv
344.92 585.447 343.71 586.667 342.22 586.667 cv
340.74 586.667 339.52 585.447 339.52 583.967 cv
@
340.49 584.527 mo
340.49 583.037 341.71 581.827 343.19 581.827 cv
344.68 581.827 345.89 583.037 345.89 584.527 cv
345.89 586.007 344.68 587.227 343.19 587.227 cv
341.71 587.227 340.49 586.007 340.49 584.527 cv
@
341.46 585.087 mo
341.46 583.597 342.68 582.387 344.16 582.387 cv
345.65 582.387 346.86 583.597 346.86 585.087 cv
346.86 586.567 345.65 587.787 344.16 587.787 cv
342.68 587.787 341.46 586.567 341.46 585.087 cv
@
342.43 585.637 mo
342.43 584.147 343.65 582.937 345.13 582.937 cv
346.62 582.937 347.83 584.147 347.83 585.637 cv
347.83 587.117 346.62 588.337 345.13 588.337 cv
343.65 588.337 342.43 587.117 342.43 585.637 cv
@
343.4 586.187 mo
343.4 584.697 344.62 583.487 346.1 583.487 cv
347.59 583.487 348.8 584.697 348.8 586.187 cv
348.8 587.667 347.59 588.887 346.1 588.887 cv
344.62 588.887 343.4 587.667 343.4 586.187 cv
@
344.37 586.727 mo
344.37 585.237 345.59 584.027 347.07 584.027 cv
348.56 584.027 349.77 585.237 349.77 586.727 cv
349.77 588.207 348.56 589.427 347.07 589.427 cv
345.59 589.427 344.37 588.207 344.37 586.727 cv
@
345.34 587.267 mo
345.34 585.777 346.56 584.567 348.04 584.567 cv
349.53 584.567 350.74 585.777 350.74 587.267 cv
350.74 588.747 349.53 589.967 348.04 589.967 cv
346.56 589.967 345.34 588.747 345.34 587.267 cv
@
346.31 587.797 mo
346.31 586.317 347.53 585.097 349.01 585.097 cv
350.5 585.097 351.71 586.317 351.71 587.797 cv
351.71 589.287 350.5 590.497 349.01 590.497 cv
347.53 590.497 346.31 589.287 346.31 587.797 cv
@
347.28 588.327 mo
347.28 586.837 348.5 585.627 349.98 585.627 cv
351.47 585.627 352.68 586.837 352.68 588.327 cv
352.68 589.807 351.47 591.027 349.98 591.027 cv
348.5 591.027 347.28 589.807 347.28 588.327 cv
@
348.25 588.847 mo
348.25 587.367 349.47 586.147 350.95 586.147 cv
352.44 586.147 353.65 587.367 353.65 588.847 cv
353.65 590.337 352.44 591.547 350.95 591.547 cv
349.47 591.547 348.25 590.337 348.25 588.847 cv
@
349.22 589.367 mo
349.22 587.887 350.44 586.667 351.92 586.667 cv
353.41 586.667 354.62 587.887 354.62 589.367 cv
354.62 590.857 353.41 592.067 351.92 592.067 cv
350.44 592.067 349.22 590.857 349.22 589.367 cv
@
350.19 589.887 mo
350.19 588.397 351.41 587.187 352.89 587.187 cv
354.38 587.187 355.59 588.397 355.59 589.887 cv
355.59 591.367 354.38 592.587 352.89 592.587 cv
351.41 592.587 350.19 591.367 350.19 589.887 cv
@
351.16 590.397 mo
351.16 588.907 352.38 587.697 353.86 587.697 cv
355.35 587.697 356.56 588.907 356.56 590.397 cv
356.56 591.877 355.35 593.097 353.86 593.097 cv
352.38 593.097 351.16 591.877 351.16 590.397 cv
@
352.13 590.907 mo
352.13 589.417 353.35 588.207 354.83 588.207 cv
356.32 588.207 357.53 589.417 357.53 590.907 cv
357.53 592.387 356.32 593.607 354.83 593.607 cv
353.35 593.607 352.13 592.387 352.13 590.907 cv
@
353.1 591.407 mo
353.1 589.917 354.32 588.707 355.8 588.707 cv
357.29 588.707 358.5 589.917 358.5 591.407 cv
358.5 592.887 357.29 594.107 355.8 594.107 cv
354.32 594.107 353.1 592.887 353.1 591.407 cv
@
354.07 591.897 mo
354.07 590.417 355.29 589.197 356.77 589.197 cv
358.26 589.197 359.47 590.417 359.47 591.897 cv
359.47 593.387 358.26 594.597 356.77 594.597 cv
355.29 594.597 354.07 593.387 354.07 591.897 cv
@
355.04 592.397 mo
355.04 590.907 356.26 589.697 357.74 589.697 cv
359.23 589.697 360.44 590.907 360.44 592.397 cv
360.44 593.877 359.23 595.097 357.74 595.097 cv
356.26 595.097 355.04 593.877 355.04 592.397 cv
@
356.01 592.887 mo
356.01 591.397 357.23 590.187 358.71 590.187 cv
360.2 590.187 361.41 591.397 361.41 592.887 cv
361.41 594.367 360.2 595.587 358.71 595.587 cv
357.23 595.587 356.01 594.367 356.01 592.887 cv
@
356.98 593.367 mo
356.98 591.887 358.2 590.667 359.68 590.667 cv
361.17 590.667 362.38 591.887 362.38 593.367 cv
362.38 594.857 361.17 596.067 359.68 596.067 cv
358.2 596.067 356.98 594.857 356.98 593.367 cv
@
357.95 593.847 mo
357.95 592.367 359.17 591.147 360.65 591.147 cv
362.14 591.147 363.35 592.367 363.35 593.847 cv
363.35 595.337 362.14 596.547 360.65 596.547 cv
359.17 596.547 357.95 595.337 357.95 593.847 cv
@
358.92 594.327 mo
358.92 592.847 360.14 591.627 361.62 591.627 cv
363.11 591.627 364.32 592.847 364.32 594.327 cv
364.32 595.817 363.11 597.027 361.62 597.027 cv
360.14 597.027 358.92 595.817 358.92 594.327 cv
@
359.89 594.807 mo
359.89 593.317 361.11 592.107 362.59 592.107 cv
364.08 592.107 365.29 593.317 365.29 594.807 cv
365.29 596.287 364.08 597.507 362.59 597.507 cv
361.11 597.507 359.89 596.287 359.89 594.807 cv
@
360.86 595.267 mo
360.86 593.787 362.08 592.567 363.56 592.567 cv
365.05 592.567 366.26 593.787 366.26 595.267 cv
366.26 596.757 365.05 597.967 363.56 597.967 cv
362.08 597.967 360.86 596.757 360.86 595.267 cv
@
361.83 595.737 mo
361.83 594.257 363.05 593.037 364.53 593.037 cv
366.02 593.037 367.23 594.257 367.23 595.737 cv
367.23 597.227 366.02 598.437 364.53 598.437 cv
363.05 598.437 361.83 597.227 361.83 595.737 cv
@
362.8 596.197 mo
362.8 594.717 364.02 593.497 365.5 593.497 cv
366.99 593.497 368.2 594.717 368.2 596.197 cv
368.2 597.687 366.99 598.897 365.5 598.897 cv
364.02 598.897 362.8 597.687 362.8 596.197 cv
@
363.77 596.657 mo
363.77 595.177 364.99 593.957 366.47 593.957 cv
367.96 593.957 369.17 595.177 369.17 596.657 cv
369.17 598.147 367.96 599.357 366.47 599.357 cv
364.99 599.357 363.77 598.147 363.77 596.657 cv
@
364.74 597.107 mo
364.74 595.627 365.96 594.407 367.44 594.407 cv
368.93 594.407 370.14 595.627 370.14 597.107 cv
370.14 598.597 368.93 599.807 367.44 599.807 cv
365.96 599.807 364.74 598.597 364.74 597.107 cv
@
365.71 597.567 mo
365.71 596.077 366.93 594.867 368.41 594.867 cv
369.9 594.867 371.11 596.077 371.11 597.567 cv
371.11 599.047 369.9 600.267 368.41 600.267 cv
366.93 600.267 365.71 599.047 365.71 597.567 cv
@
366.68 598.007 mo
366.68 596.527 367.9 595.307 369.38 595.307 cv
370.87 595.307 372.08 596.527 372.08 598.007 cv
372.08 599.497 370.87 600.707 369.38 600.707 cv
367.9 600.707 366.68 599.497 366.68 598.007 cv
@
367.65 598.457 mo
367.65 596.967 368.87 595.757 370.35 595.757 cv
371.84 595.757 373.05 596.967 373.05 598.457 cv
373.05 599.937 371.84 601.157 370.35 601.157 cv
368.87 601.157 367.65 599.937 367.65 598.457 cv
@
368.62 598.897 mo
368.62 597.407 369.84 596.197 371.32 596.197 cv
372.81 596.197 374.02 597.407 374.02 598.897 cv
374.02 600.377 372.81 601.597 371.32 601.597 cv
369.84 601.597 368.62 600.377 368.62 598.897 cv
@
369.59 599.327 mo
369.59 597.847 370.81 596.627 372.29 596.627 cv
373.78 596.627 374.99 597.847 374.99 599.327 cv
374.99 600.817 373.78 602.027 372.29 602.027 cv
370.81 602.027 369.59 600.817 369.59 599.327 cv
@
370.56 599.767 mo
370.56 598.277 371.78 597.067 373.26 597.067 cv
374.75 597.067 375.96 598.277 375.96 599.767 cv
375.96 601.247 374.75 602.467 373.26 602.467 cv
371.78 602.467 370.56 601.247 370.56 599.767 cv
@
371.53 600.197 mo
371.53 598.707 372.75 597.497 374.23 597.497 cv
375.72 597.497 376.93 598.707 376.93 600.197 cv
376.93 601.677 375.72 602.897 374.23 602.897 cv
372.75 602.897 371.53 601.677 371.53 600.197 cv
@
372.5 600.617 mo
372.5 599.137 373.72 597.917 375.2 597.917 cv
376.69 597.917 377.9 599.137 377.9 600.617 cv
377.9 602.107 376.69 603.317 375.2 603.317 cv
373.72 603.317 372.5 602.107 372.5 600.617 cv
@
373.47 601.037 mo
373.47 599.557 374.69 598.337 376.17 598.337 cv
377.66 598.337 378.87 599.557 378.87 601.037 cv
378.87 602.527 377.66 603.737 376.17 603.737 cv
374.69 603.737 373.47 602.527 373.47 601.037 cv
@
374.44 601.457 mo
374.44 599.977 375.66 598.757 377.14 598.757 cv
378.63 598.757 379.84 599.977 379.84 601.457 cv
379.84 602.947 378.63 604.157 377.14 604.157 cv
375.66 604.157 374.44 602.947 374.44 601.457 cv
@
375.41 601.877 mo
375.41 600.397 376.63 599.177 378.11 599.177 cv
379.6 599.177 380.81 600.397 380.81 601.877 cv
380.81 603.367 379.6 604.577 378.11 604.577 cv
376.63 604.577 375.41 603.367 375.41 601.877 cv
@
376.38 602.287 mo
376.38 600.807 377.6 599.587 379.08 599.587 cv
380.57 599.587 381.78 600.807 381.78 602.287 cv
381.78 603.777 380.57 604.987 379.08 604.987 cv
377.6 604.987 376.38 603.777 376.38 602.287 cv
@
377.35 602.697 mo
377.35 601.217 378.57 599.997 380.05 599.997 cv
381.54 599.997 382.75 601.217 382.75 602.697 cv
382.75 604.187 381.54 605.397 380.05 605.397 cv
378.57 605.397 377.35 604.187 377.35 602.697 cv
@
378.32 603.107 mo
378.32 601.627 379.54 600.407 381.02 600.407 cv
382.51 600.407 383.72 601.627 383.72 603.107 cv
383.72 604.597 382.51 605.807 381.02 605.807 cv
379.54 605.807 378.32 604.597 378.32 603.107 cv
@
379.29 603.507 mo
379.29 602.027 380.51 600.807 381.99 600.807 cv
383.48 600.807 384.69 602.027 384.69 603.507 cv
384.69 604.997 383.48 606.207 381.99 606.207 cv
380.51 606.207 379.29 604.997 379.29 603.507 cv
@
380.26 603.907 mo
380.26 602.427 381.48 601.207 382.96 601.207 cv
384.45 601.207 385.66 602.427 385.66 603.907 cv
385.66 605.397 384.45 606.607 382.96 606.607 cv
381.48 606.607 380.26 605.397 380.26 603.907 cv
@
381.23 604.307 mo
381.23 602.827 382.45 601.607 383.93 601.607 cv
385.42 601.607 386.63 602.827 386.63 604.307 cv
386.63 605.797 385.42 607.007 383.93 607.007 cv
382.45 607.007 381.23 605.797 381.23 604.307 cv
@
382.2 604.707 mo
382.2 603.217 383.42 602.007 384.9 602.007 cv
386.39 602.007 387.6 603.217 387.6 604.707 cv
387.6 606.187 386.39 607.407 384.9 607.407 cv
383.42 607.407 382.2 606.187 382.2 604.707 cv
@
383.17 605.097 mo
383.17 603.607 384.39 602.397 385.87 602.397 cv
387.36 602.397 388.57 603.607 388.57 605.097 cv
388.57 606.577 387.36 607.797 385.87 607.797 cv
384.39 607.797 383.17 606.577 383.17 605.097 cv
@
384.14 605.487 mo
384.14 603.997 385.36 602.787 386.84 602.787 cv
388.33 602.787 389.54 603.997 389.54 605.487 cv
389.54 606.967 388.33 608.187 386.84 608.187 cv
385.36 608.187 384.14 606.967 384.14 605.487 cv
@
385.11 605.867 mo
385.11 604.387 386.33 603.167 387.81 603.167 cv
389.3 603.167 390.51 604.387 390.51 605.867 cv
390.51 607.357 389.3 608.567 387.81 608.567 cv
386.33 608.567 385.11 607.357 385.11 605.867 cv
@
386.08 606.247 mo
386.08 604.767 387.3 603.547 388.78 603.547 cv
390.27 603.547 391.48 604.767 391.48 606.247 cv
391.48 607.737 390.27 608.947 388.78 608.947 cv
387.3 608.947 386.08 607.737 386.08 606.247 cv
@
387.05 606.627 mo
387.05 605.147 388.27 603.927 389.75 603.927 cv
391.24 603.927 392.45 605.147 392.45 606.627 cv
392.45 608.117 391.24 609.327 389.75 609.327 cv
388.27 609.327 387.05 608.117 387.05 606.627 cv
@
388.02 607.007 mo
388.02 605.527 389.24 604.307 390.72 604.307 cv
392.21 604.307 393.42 605.527 393.42 607.007 cv
393.42 608.497 392.21 609.707 390.72 609.707 cv
389.24 609.707 388.02 608.497 388.02 607.007 cv
@
388.99 607.377 mo
388.99 605.897 390.21 604.677 391.69 604.677 cv
393.18 604.677 394.39 605.897 394.39 607.377 cv
394.39 608.867 393.18 610.077 391.69 610.077 cv
390.21 610.077 388.99 608.867 388.99 607.377 cv
@
389.96 607.757 mo
389.96 606.267 391.18 605.057 392.66 605.057 cv
394.15 605.057 395.36 606.267 395.36 607.757 cv
395.36 609.237 394.15 610.457 392.66 610.457 cv
391.18 610.457 389.96 609.237 389.96 607.757 cv
@
390.93 608.117 mo
390.93 606.637 392.15 605.417 393.63 605.417 cv
395.12 605.417 396.33 606.637 396.33 608.117 cv
396.33 609.607 395.12 610.817 393.63 610.817 cv
392.15 610.817 390.93 609.607 390.93 608.117 cv
@
391.9 608.487 mo
391.9 607.007 393.12 605.787 394.6 605.787 cv
396.09 605.787 397.3 607.007 397.3 608.487 cv
397.3 609.977 396.09 611.187 394.6 611.187 cv
393.12 611.187 391.9 609.977 391.9 608.487 cv
@
392.87 608.847 mo
392.87 607.367 394.09 606.147 395.57 606.147 cv
397.06 606.147 398.27 607.367 398.27 608.847 cv
398.27 610.337 397.06 611.547 395.57 611.547 cv
394.09 611.547 392.87 610.337 392.87 608.847 cv
@
393.84 609.207 mo
393.84 607.727 395.06 606.507 396.54 606.507 cv
398.03 606.507 399.24 607.727 399.24 609.207 cv
399.24 610.697 398.03 611.907 396.54 611.907 cv
395.06 611.907 393.84 610.697 393.84 609.207 cv
@
394.81 609.567 mo
394.81 608.087 396.03 606.867 397.51 606.867 cv
399 606.867 400.21 608.087 400.21 609.567 cv
400.21 611.057 399 612.267 397.51 612.267 cv
396.03 612.267 394.81 611.057 394.81 609.567 cv
@
395.78 609.927 mo
395.78 608.437 397 607.227 398.48 607.227 cv
399.97 607.227 401.18 608.437 401.18 609.927 cv
401.18 611.407 399.97 612.627 398.48 612.627 cv
397 612.627 395.78 611.407 395.78 609.927 cv
@
396.75 610.277 mo
396.75 608.787 397.97 607.577 399.45 607.577 cv
400.94 607.577 402.15 608.787 402.15 610.277 cv
402.15 611.757 400.94 612.977 399.45 612.977 cv
397.97 612.977 396.75 611.757 396.75 610.277 cv
@
397.72 610.627 mo
397.72 609.137 398.94 607.927 400.42 607.927 cv
401.91 607.927 403.12 609.137 403.12 610.627 cv
403.12 612.107 401.91 613.327 400.42 613.327 cv
398.94 613.327 397.72 612.107 397.72 610.627 cv
@
398.69 610.967 mo
398.69 609.487 399.9 608.267 401.39 608.267 cv
402.87 608.267 404.09 609.487 404.09 610.967 cv
404.09 612.457 402.87 613.667 401.39 613.667 cv
399.9 613.667 398.69 612.457 398.69 610.967 cv
@
399.66 611.317 mo
399.66 609.827 400.87 608.617 402.36 608.617 cv
403.84 608.617 405.06 609.827 405.06 611.317 cv
405.06 612.797 403.84 614.017 402.36 614.017 cv
400.87 614.017 399.66 612.797 399.66 611.317 cv
@
400.63 611.657 mo
400.63 610.167 401.84 608.957 403.33 608.957 cv
404.81 608.957 406.03 610.167 406.03 611.657 cv
406.03 613.137 404.81 614.357 403.33 614.357 cv
401.84 614.357 400.63 613.137 400.63 611.657 cv
@
401.6 611.997 mo
401.6 610.507 402.81 609.297 404.3 609.297 cv
405.78 609.297 407 610.507 407 611.997 cv
407 613.477 405.78 614.697 404.3 614.697 cv
402.81 614.697 401.6 613.477 401.6 611.997 cv
@
402.57 612.337 mo
402.57 610.847 403.78 609.637 405.27 609.637 cv
406.75 609.637 407.97 610.847 407.97 612.337 cv
407.97 613.817 406.75 615.037 405.27 615.037 cv
403.78 615.037 402.57 613.817 402.57 612.337 cv
@
403.54 612.667 mo
403.54 611.177 404.75 609.967 406.24 609.967 cv
407.72 609.967 408.94 611.177 408.94 612.667 cv
408.94 614.147 407.72 615.367 406.24 615.367 cv
404.75 615.367 403.54 614.147 403.54 612.667 cv
@
404.51 612.997 mo
404.51 611.517 405.72 610.297 407.21 610.297 cv
408.69 610.297 409.91 611.517 409.91 612.997 cv
409.91 614.487 408.69 615.697 407.21 615.697 cv
405.72 615.697 404.51 614.487 404.51 612.997 cv
@
405.48 613.327 mo
405.48 611.837 406.69 610.627 408.18 610.627 cv
409.66 610.627 410.88 611.837 410.88 613.327 cv
410.88 614.807 409.66 616.027 408.18 616.027 cv
406.69 616.027 405.48 614.807 405.48 613.327 cv
@
406.45 613.657 mo
406.45 612.167 407.66 610.957 409.15 610.957 cv
410.63 610.957 411.85 612.167 411.85 613.657 cv
411.85 615.137 410.63 616.357 409.15 616.357 cv
407.66 616.357 406.45 615.137 406.45 613.657 cv
@
407.42 613.977 mo
407.42 612.497 408.63 611.277 410.12 611.277 cv
411.6 611.277 412.82 612.497 412.82 613.977 cv
412.82 615.467 411.6 616.677 410.12 616.677 cv
408.63 616.677 407.42 615.467 407.42 613.977 cv
@
408.39 614.297 mo
408.39 612.817 409.6 611.597 411.09 611.597 cv
412.57 611.597 413.79 612.817 413.79 614.297 cv
413.79 615.787 412.57 616.997 411.09 616.997 cv
409.6 616.997 408.39 615.787 408.39 614.297 cv
@
409.36 614.617 mo
409.36 613.137 410.57 611.917 412.06 611.917 cv
413.54 611.917 414.76 613.137 414.76 614.617 cv
414.76 616.107 413.54 617.317 412.06 617.317 cv
410.57 617.317 409.36 616.107 409.36 614.617 cv
@
410.33 614.937 mo
410.33 613.447 411.54 612.237 413.03 612.237 cv
414.51 612.237 415.73 613.447 415.73 614.937 cv
415.73 616.417 414.51 617.637 413.03 617.637 cv
411.54 617.637 410.33 616.417 410.33 614.937 cv
@
411.3 615.247 mo
411.3 613.767 412.51 612.547 414 612.547 cv
415.48 612.547 416.7 613.767 416.7 615.247 cv
416.7 616.737 415.48 617.947 414 617.947 cv
412.51 617.947 411.3 616.737 411.3 615.247 cv
@
412.27 615.557 mo
412.27 614.077 413.48 612.857 414.97 612.857 cv
416.45 612.857 417.67 614.077 417.67 615.557 cv
417.67 617.047 416.45 618.257 414.97 618.257 cv
413.48 618.257 412.27 617.047 412.27 615.557 cv
@
413.24 615.867 mo
413.24 614.387 414.45 613.167 415.94 613.167 cv
417.42 613.167 418.64 614.387 418.64 615.867 cv
418.64 617.357 417.42 618.567 415.94 618.567 cv
414.45 618.567 413.24 617.357 413.24 615.867 cv
@
414.21 616.177 mo
414.21 614.687 415.42 613.477 416.91 613.477 cv
418.39 613.477 419.61 614.687 419.61 616.177 cv
419.61 617.657 418.39 618.877 416.91 618.877 cv
415.42 618.877 414.21 617.657 414.21 616.177 cv
@
415.18 616.477 mo
415.18 614.997 416.39 613.777 417.88 613.777 cv
419.36 613.777 420.58 614.997 420.58 616.477 cv
420.58 617.967 419.36 619.177 417.88 619.177 cv
416.39 619.177 415.18 617.967 415.18 616.477 cv
@
416.15 616.787 mo
416.15 615.297 417.36 614.087 418.85 614.087 cv
420.33 614.087 421.55 615.297 421.55 616.787 cv
421.55 618.267 420.33 619.487 418.85 619.487 cv
417.36 619.487 416.15 618.267 416.15 616.787 cv
@
417.12 617.087 mo
417.12 615.597 418.33 614.387 419.82 614.387 cv
421.3 614.387 422.52 615.597 422.52 617.087 cv
422.52 618.567 421.3 619.787 419.82 619.787 cv
418.33 619.787 417.12 618.567 417.12 617.087 cv
@
418.09 617.377 mo
418.09 615.897 419.3 614.677 420.79 614.677 cv
422.27 614.677 423.49 615.897 423.49 617.377 cv
423.49 618.867 422.27 620.077 420.79 620.077 cv
419.3 620.077 418.09 618.867 418.09 617.377 cv
@
419.06 617.677 mo
419.06 616.187 420.27 614.977 421.76 614.977 cv
423.24 614.977 424.46 616.187 424.46 617.677 cv
424.46 619.157 423.24 620.377 421.76 620.377 cv
420.27 620.377 419.06 619.157 419.06 617.677 cv
@
420.03 617.967 mo
420.03 616.487 421.24 615.267 422.73 615.267 cv
424.21 615.267 425.43 616.487 425.43 617.967 cv
425.43 619.457 424.21 620.667 422.73 620.667 cv
421.24 620.667 420.03 619.457 420.03 617.967 cv
@
421 618.257 mo
421 616.777 422.21 615.557 423.7 615.557 cv
425.18 615.557 426.4 616.777 426.4 618.257 cv
426.4 619.747 425.18 620.957 423.7 620.957 cv
422.21 620.957 421 619.747 421 618.257 cv
@
421.97 618.547 mo
421.97 617.057 423.18 615.847 424.67 615.847 cv
426.15 615.847 427.37 617.057 427.37 618.547 cv
427.37 620.027 426.15 621.247 424.67 621.247 cv
423.18 621.247 421.97 620.027 421.97 618.547 cv
@
422.94 618.827 mo
422.94 617.347 424.15 616.127 425.64 616.127 cv
427.12 616.127 428.34 617.347 428.34 618.827 cv
428.34 620.317 427.12 621.527 425.64 621.527 cv
424.15 621.527 422.94 620.317 422.94 618.827 cv
@
423.91 619.117 mo
423.91 617.627 425.12 616.417 426.61 616.417 cv
428.09 616.417 429.31 617.627 429.31 619.117 cv
429.31 620.597 428.09 621.817 426.61 621.817 cv
425.12 621.817 423.91 620.597 423.91 619.117 cv
@
424.88 619.397 mo
424.88 617.907 426.09 616.697 427.58 616.697 cv
429.06 616.697 430.28 617.907 430.28 619.397 cv
430.28 620.877 429.06 622.097 427.58 622.097 cv
426.09 622.097 424.88 620.877 424.88 619.397 cv
@
425.85 619.677 mo
425.85 618.187 427.06 616.977 428.55 616.977 cv
430.03 616.977 431.25 618.187 431.25 619.677 cv
431.25 621.157 430.03 622.377 428.55 622.377 cv
427.06 622.377 425.85 621.157 425.85 619.677 cv
@
426.82 619.947 mo
426.82 618.467 428.03 617.247 429.52 617.247 cv
431 617.247 432.22 618.467 432.22 619.947 cv
432.22 621.437 431 622.647 429.52 622.647 cv
428.03 622.647 426.82 621.437 426.82 619.947 cv
@
427.79 620.227 mo
427.79 618.737 429 617.527 430.49 617.527 cv
431.97 617.527 433.19 618.737 433.19 620.227 cv
433.19 621.707 431.97 622.927 430.49 622.927 cv
429 622.927 427.79 621.707 427.79 620.227 cv
@
428.76 620.497 mo
428.76 619.007 429.97 617.797 431.46 617.797 cv
432.94 617.797 434.16 619.007 434.16 620.497 cv
434.16 621.977 432.94 623.197 431.46 623.197 cv
429.97 623.197 428.76 621.977 428.76 620.497 cv
@
429.73 620.767 mo
429.73 619.277 430.94 618.067 432.43 618.067 cv
433.91 618.067 435.13 619.277 435.13 620.767 cv
435.13 622.247 433.91 623.467 432.43 623.467 cv
430.94 623.467 429.73 622.247 429.73 620.767 cv
@
430.7 621.027 mo
430.7 619.547 431.91 618.327 433.4 618.327 cv
434.88 618.327 436.1 619.547 436.1 621.027 cv
436.1 622.517 434.88 623.727 433.4 623.727 cv
431.91 623.727 430.7 622.517 430.7 621.027 cv
@
431.67 621.297 mo
431.67 619.807 432.88 618.597 434.37 618.597 cv
435.85 618.597 437.07 619.807 437.07 621.297 cv
437.07 622.777 435.85 623.997 434.37 623.997 cv
432.88 623.997 431.67 622.777 431.67 621.297 cv
@
432.64 621.557 mo
432.64 620.077 433.85 618.857 435.34 618.857 cv
436.82 618.857 438.04 620.077 438.04 621.557 cv
438.04 623.047 436.82 624.257 435.34 624.257 cv
433.85 624.257 432.64 623.047 432.64 621.557 cv
@
433.61 621.817 mo
433.61 620.327 434.82 619.117 436.31 619.117 cv
437.79 619.117 439.01 620.327 439.01 621.817 cv
439.01 623.297 437.79 624.517 436.31 624.517 cv
434.82 624.517 433.61 623.297 433.61 621.817 cv
@
434.58 622.077 mo
434.58 620.587 435.79 619.377 437.28 619.377 cv
438.76 619.377 439.98 620.587 439.98 622.077 cv
439.98 623.557 438.76 624.777 437.28 624.777 cv
435.79 624.777 434.58 623.557 434.58 622.077 cv
@
435.55 622.327 mo
435.55 620.847 436.76 619.627 438.25 619.627 cv
439.73 619.627 440.95 620.847 440.95 622.327 cv
440.95 623.817 439.73 625.027 438.25 625.027 cv
436.76 625.027 435.55 623.817 435.55 622.327 cv
@
436.52 622.577 mo
436.52 621.097 437.73 619.877 439.22 619.877 cv
440.7 619.877 441.92 621.097 441.92 622.577 cv
441.92 624.067 440.7 625.277 439.22 625.277 cv
437.73 625.277 436.52 624.067 436.52 622.577 cv
@
437.49 622.827 mo
437.49 621.347 438.7 620.127 440.19 620.127 cv
441.67 620.127 442.89 621.347 442.89 622.827 cv
442.89 624.317 441.67 625.527 440.19 625.527 cv
438.7 625.527 437.49 624.317 437.49 622.827 cv
@
438.46 623.077 mo
438.46 621.597 439.67 620.377 441.16 620.377 cv
442.64 620.377 443.86 621.597 443.86 623.077 cv
443.86 624.567 442.64 625.777 441.16 625.777 cv
439.67 625.777 438.46 624.567 438.46 623.077 cv
@
439.43 623.327 mo
439.43 621.837 440.64 620.627 442.13 620.627 cv
443.61 620.627 444.83 621.837 444.83 623.327 cv
444.83 624.807 443.61 626.027 442.13 626.027 cv
440.64 626.027 439.43 624.807 439.43 623.327 cv
@
440.4 623.567 mo
440.4 622.077 441.61 620.867 443.1 620.867 cv
444.58 620.867 445.8 622.077 445.8 623.567 cv
445.8 625.047 444.58 626.267 443.1 626.267 cv
441.61 626.267 440.4 625.047 440.4 623.567 cv
@
441.37 623.807 mo
441.37 622.327 442.58 621.107 444.07 621.107 cv
445.55 621.107 446.77 622.327 446.77 623.807 cv
446.77 625.297 445.55 626.507 444.07 626.507 cv
442.58 626.507 441.37 625.297 441.37 623.807 cv
@
442.34 624.047 mo
442.34 622.557 443.55 621.347 445.04 621.347 cv
446.52 621.347 447.74 622.557 447.74 624.047 cv
447.74 625.527 446.52 626.747 445.04 626.747 cv
443.55 626.747 442.34 625.527 442.34 624.047 cv
@
443.31 624.277 mo
443.31 622.797 444.52 621.577 446.01 621.577 cv
447.49 621.577 448.71 622.797 448.71 624.277 cv
448.71 625.767 447.49 626.977 446.01 626.977 cv
444.52 626.977 443.31 625.767 443.31 624.277 cv
@
444.28 624.517 mo
444.28 623.027 445.49 621.817 446.98 621.817 cv
448.46 621.817 449.68 623.027 449.68 624.517 cv
449.68 625.997 448.46 627.217 446.98 627.217 cv
445.49 627.217 444.28 625.997 444.28 624.517 cv
@
445.25 624.747 mo
445.25 623.257 446.46 622.047 447.95 622.047 cv
449.43 622.047 450.65 623.257 450.65 624.747 cv
450.65 626.227 449.43 627.447 447.95 627.447 cv
446.46 627.447 445.25 626.227 445.25 624.747 cv
@
446.22 624.967 mo
446.22 623.487 447.43 622.267 448.92 622.267 cv
450.4 622.267 451.62 623.487 451.62 624.967 cv
451.62 626.457 450.4 627.667 448.92 627.667 cv
447.43 627.667 446.22 626.457 446.22 624.967 cv
@
447.19 625.197 mo
447.19 623.717 448.4 622.497 449.89 622.497 cv
451.37 622.497 452.59 623.717 452.59 625.197 cv
452.59 626.687 451.37 627.897 449.89 627.897 cv
448.4 627.897 447.19 626.687 447.19 625.197 cv
@
448.16 625.417 mo
448.16 623.937 449.37 622.717 450.86 622.717 cv
452.34 622.717 453.56 623.937 453.56 625.417 cv
453.56 626.907 452.34 628.117 450.86 628.117 cv
449.37 628.117 448.16 626.907 448.16 625.417 cv
@
449.13 625.637 mo
449.13 624.157 450.34 622.937 451.83 622.937 cv
453.31 622.937 454.53 624.157 454.53 625.637 cv
454.53 627.127 453.31 628.337 451.83 628.337 cv
450.34 628.337 449.13 627.127 449.13 625.637 cv
@
450.1 625.857 mo
450.1 624.377 451.31 623.157 452.8 623.157 cv
454.28 623.157 455.5 624.377 455.5 625.857 cv
455.5 627.347 454.28 628.557 452.8 628.557 cv
451.31 628.557 450.1 627.347 450.1 625.857 cv
@
451.07 626.077 mo
451.07 624.587 452.28 623.377 453.77 623.377 cv
455.25 623.377 456.47 624.587 456.47 626.077 cv
456.47 627.557 455.25 628.777 453.77 628.777 cv
452.28 628.777 451.07 627.557 451.07 626.077 cv
@
452.04 626.287 mo
452.04 624.797 453.25 623.587 454.74 623.587 cv
456.22 623.587 457.44 624.797 457.44 626.287 cv
457.44 627.767 456.22 628.987 454.74 628.987 cv
453.25 628.987 452.04 627.767 452.04 626.287 cv
@
453.01 626.497 mo
453.01 625.007 454.22 623.797 455.71 623.797 cv
457.19 623.797 458.41 625.007 458.41 626.497 cv
458.41 627.977 457.19 629.197 455.71 629.197 cv
454.22 629.197 453.01 627.977 453.01 626.497 cv
@
453.98 626.707 mo
453.98 625.217 455.19 624.007 456.68 624.007 cv
458.16 624.007 459.38 625.217 459.38 626.707 cv
459.38 628.187 458.16 629.407 456.68 629.407 cv
455.19 629.407 453.98 628.187 453.98 626.707 cv
@
454.95 626.907 mo
454.95 625.427 456.16 624.207 457.65 624.207 cv
459.13 624.207 460.35 625.427 460.35 626.907 cv
460.35 628.397 459.13 629.607 457.65 629.607 cv
456.16 629.607 454.95 628.397 454.95 626.907 cv
@
455.92 627.107 mo
455.92 625.627 457.13 624.407 458.62 624.407 cv
460.1 624.407 461.32 625.627 461.32 627.107 cv
461.32 628.597 460.1 629.807 458.62 629.807 cv
457.13 629.807 455.92 628.597 455.92 627.107 cv
@
456.89 627.307 mo
456.89 625.827 458.1 624.607 459.59 624.607 cv
461.07 624.607 462.29 625.827 462.29 627.307 cv
462.29 628.797 461.07 630.007 459.59 630.007 cv
458.1 630.007 456.89 628.797 456.89 627.307 cv
@
457.86 627.507 mo
457.86 626.027 459.07 624.807 460.56 624.807 cv
462.04 624.807 463.26 626.027 463.26 627.507 cv
463.26 628.997 462.04 630.207 460.56 630.207 cv
459.07 630.207 457.86 628.997 457.86 627.507 cv
@
458.83 627.707 mo
458.83 626.217 460.04 625.007 461.53 625.007 cv
463.01 625.007 464.23 626.217 464.23 627.707 cv
464.23 629.187 463.01 630.407 461.53 630.407 cv
460.04 630.407 458.83 629.187 458.83 627.707 cv
@
459.8 627.897 mo
459.8 626.407 461.01 625.197 462.5 625.197 cv
463.98 625.197 465.2 626.407 465.2 627.897 cv
465.2 629.377 463.98 630.597 462.5 630.597 cv
461.01 630.597 459.8 629.377 459.8 627.897 cv
@
460.77 628.087 mo
460.77 626.597 461.98 625.387 463.47 625.387 cv
464.95 625.387 466.17 626.597 466.17 628.087 cv
466.17 629.567 464.95 630.787 463.47 630.787 cv
461.98 630.787 460.77 629.567 460.77 628.087 cv
@
461.74 628.267 mo
461.74 626.787 462.95 625.567 464.44 625.567 cv
465.92 625.567 467.14 626.787 467.14 628.267 cv
467.14 629.757 465.92 630.967 464.44 630.967 cv
462.95 630.967 461.74 629.757 461.74 628.267 cv
@
462.71 628.457 mo
462.71 626.967 463.92 625.757 465.41 625.757 cv
466.89 625.757 468.11 626.967 468.11 628.457 cv
468.11 629.937 466.89 631.157 465.41 631.157 cv
463.92 631.157 462.71 629.937 462.71 628.457 cv
@
463.68 628.637 mo
463.68 627.147 464.89 625.937 466.38 625.937 cv
467.86 625.937 469.08 627.147 469.08 628.637 cv
469.08 630.117 467.86 631.337 466.38 631.337 cv
464.89 631.337 463.68 630.117 463.68 628.637 cv
@
464.65 628.807 mo
464.65 627.327 465.86 626.107 467.35 626.107 cv
468.83 626.107 470.05 627.327 470.05 628.807 cv
470.05 630.297 468.83 631.507 467.35 631.507 cv
465.86 631.507 464.65 630.297 464.65 628.807 cv
@
465.62 628.987 mo
465.62 627.497 466.83 626.287 468.32 626.287 cv
469.8 626.287 471.02 627.497 471.02 628.987 cv
471.02 630.467 469.8 631.687 468.32 631.687 cv
466.83 631.687 465.62 630.467 465.62 628.987 cv
@
466.59 629.157 mo
466.59 627.677 467.8 626.457 469.29 626.457 cv
470.77 626.457 471.99 627.677 471.99 629.157 cv
471.99 630.647 470.77 631.857 469.29 631.857 cv
467.8 631.857 466.59 630.647 466.59 629.157 cv
@
467.56 629.327 mo
467.56 627.847 468.77 626.627 470.26 626.627 cv
471.74 626.627 472.96 627.847 472.96 629.327 cv
472.96 630.817 471.74 632.027 470.26 632.027 cv
468.77 632.027 467.56 630.817 467.56 629.327 cv
@
468.53 629.497 mo
468.53 628.007 469.74 626.797 471.23 626.797 cv
472.71 626.797 473.93 628.007 473.93 629.497 cv
473.93 630.977 472.71 632.197 471.23 632.197 cv
469.74 632.197 468.53 630.977 468.53 629.497 cv
@
469.5 629.657 mo
469.5 628.177 470.71 626.957 472.2 626.957 cv
473.68 626.957 474.9 628.177 474.9 629.657 cv
474.9 631.147 473.68 632.357 472.2 632.357 cv
470.71 632.357 469.5 631.147 469.5 629.657 cv
@
470.47 629.817 mo
470.47 628.337 471.68 627.117 473.17 627.117 cv
474.65 627.117 475.87 628.337 475.87 629.817 cv
475.87 631.307 474.65 632.517 473.17 632.517 cv
471.68 632.517 470.47 631.307 470.47 629.817 cv
@
471.44 629.977 mo
471.44 628.497 472.65 627.277 474.14 627.277 cv
475.62 627.277 476.84 628.497 476.84 629.977 cv
476.84 631.467 475.62 632.677 474.14 632.677 cv
472.65 632.677 471.44 631.467 471.44 629.977 cv
@
472.41 630.137 mo
472.41 628.647 473.62 627.437 475.11 627.437 cv
476.59 627.437 477.81 628.647 477.81 630.137 cv
477.81 631.617 476.59 632.837 475.11 632.837 cv
473.62 632.837 472.41 631.617 472.41 630.137 cv
@
473.38 630.287 mo
473.38 628.797 474.59 627.587 476.08 627.587 cv
477.56 627.587 478.78 628.797 478.78 630.287 cv
478.78 631.767 477.56 632.987 476.08 632.987 cv
474.59 632.987 473.38 631.767 473.38 630.287 cv
@
474.35 630.437 mo
474.35 628.947 475.56 627.737 477.05 627.737 cv
478.53 627.737 479.75 628.947 479.75 630.437 cv
479.75 631.917 478.53 633.137 477.05 633.137 cv
475.56 633.137 474.35 631.917 474.35 630.437 cv
@
475.32 630.577 mo
475.32 629.097 476.53 627.877 478.02 627.877 cv
479.5 627.877 480.72 629.097 480.72 630.577 cv
480.72 632.067 479.5 633.277 478.02 633.277 cv
476.53 633.277 475.32 632.067 475.32 630.577 cv
@
476.29 630.727 mo
476.29 629.237 477.5 628.027 478.99 628.027 cv
480.47 628.027 481.69 629.237 481.69 630.727 cv
481.69 632.207 480.47 633.427 478.99 633.427 cv
477.5 633.427 476.29 632.207 476.29 630.727 cv
@
477.26 630.867 mo
477.26 629.377 478.47 628.167 479.96 628.167 cv
481.44 628.167 482.66 629.377 482.66 630.867 cv
482.66 632.347 481.44 633.567 479.96 633.567 cv
478.47 633.567 477.26 632.347 477.26 630.867 cv
@
478.23 630.997 mo
478.23 629.517 479.44 628.297 480.93 628.297 cv
482.41 628.297 483.63 629.517 483.63 630.997 cv
483.63 632.487 482.41 633.697 480.93 633.697 cv
479.44 633.697 478.23 632.487 478.23 630.997 cv
@
479.19 631.137 mo
479.19 629.647 480.41 628.437 481.89 628.437 cv
483.38 628.437 484.59 629.647 484.59 631.137 cv
484.59 632.617 483.38 633.837 481.89 633.837 cv
480.41 633.837 479.19 632.617 479.19 631.137 cv
@
480.16 631.267 mo
480.16 629.777 481.38 628.567 482.86 628.567 cv
484.35 628.567 485.56 629.777 485.56 631.267 cv
485.56 632.747 484.35 633.967 482.86 633.967 cv
481.38 633.967 480.16 632.747 480.16 631.267 cv
@
481.13 631.397 mo
481.13 629.907 482.35 628.697 483.83 628.697 cv
485.32 628.697 486.53 629.907 486.53 631.397 cv
486.53 632.877 485.32 634.097 483.83 634.097 cv
482.35 634.097 481.13 632.877 481.13 631.397 cv
@
482.1 631.517 mo
482.1 630.037 483.32 628.817 484.8 628.817 cv
486.29 628.817 487.5 630.037 487.5 631.517 cv
487.5 633.007 486.29 634.217 484.8 634.217 cv
483.32 634.217 482.1 633.007 482.1 631.517 cv
@
483.07 631.647 mo
483.07 630.157 484.29 628.947 485.77 628.947 cv
487.26 628.947 488.47 630.157 488.47 631.647 cv
488.47 633.127 487.26 634.347 485.77 634.347 cv
484.29 634.347 483.07 633.127 483.07 631.647 cv
@
484.04 631.757 mo
484.04 630.277 485.26 629.057 486.74 629.057 cv
488.23 629.057 489.44 630.277 489.44 631.757 cv
489.44 633.247 488.23 634.457 486.74 634.457 cv
485.26 634.457 484.04 633.247 484.04 631.757 cv
@
485.01 631.877 mo
485.01 630.397 486.23 629.177 487.71 629.177 cv
489.2 629.177 490.41 630.397 490.41 631.877 cv
490.41 633.367 489.2 634.577 487.71 634.577 cv
486.23 634.577 485.01 633.367 485.01 631.877 cv
@
485.98 631.987 mo
485.98 630.507 487.2 629.287 488.68 629.287 cv
490.17 629.287 491.38 630.507 491.38 631.987 cv
491.38 633.477 490.17 634.687 488.68 634.687 cv
487.2 634.687 485.98 633.477 485.98 631.987 cv
@
486.95 632.097 mo
486.95 630.617 488.17 629.397 489.65 629.397 cv
491.14 629.397 492.35 630.617 492.35 632.097 cv
492.35 633.587 491.14 634.797 489.65 634.797 cv
488.17 634.797 486.95 633.587 486.95 632.097 cv
@
487.92 632.207 mo
487.92 630.717 489.14 629.507 490.62 629.507 cv
492.11 629.507 493.32 630.717 493.32 632.207 cv
493.32 633.687 492.11 634.907 490.62 634.907 cv
489.14 634.907 487.92 633.687 487.92 632.207 cv
@
488.89 632.307 mo
488.89 630.827 490.11 629.607 491.59 629.607 cv
493.08 629.607 494.29 630.827 494.29 632.307 cv
494.29 633.797 493.08 635.007 491.59 635.007 cv
490.11 635.007 488.89 633.797 488.89 632.307 cv
@
489.86 632.407 mo
489.86 630.927 491.08 629.707 492.56 629.707 cv
494.05 629.707 495.26 630.927 495.26 632.407 cv
495.26 633.897 494.05 635.107 492.56 635.107 cv
491.08 635.107 489.86 633.897 489.86 632.407 cv
@
490.83 632.507 mo
490.83 631.027 492.05 629.807 493.53 629.807 cv
495.02 629.807 496.23 631.027 496.23 632.507 cv
496.23 633.997 495.02 635.207 493.53 635.207 cv
492.05 635.207 490.83 633.997 490.83 632.507 cv
@
491.8 632.607 mo
491.8 631.117 493.02 629.907 494.5 629.907 cv
495.99 629.907 497.2 631.117 497.2 632.607 cv
497.2 634.087 495.99 635.307 494.5 635.307 cv
493.02 635.307 491.8 634.087 491.8 632.607 cv
@
492.77 632.697 mo
492.77 631.207 493.99 629.997 495.47 629.997 cv
496.96 629.997 498.17 631.207 498.17 632.697 cv
498.17 634.177 496.96 635.397 495.47 635.397 cv
493.99 635.397 492.77 634.177 492.77 632.697 cv
@
493.74 632.787 mo
493.74 631.297 494.96 630.087 496.44 630.087 cv
497.93 630.087 499.14 631.297 499.14 632.787 cv
499.14 634.267 497.93 635.487 496.44 635.487 cv
494.96 635.487 493.74 634.267 493.74 632.787 cv
@
494.71 632.867 mo
494.71 631.387 495.93 630.167 497.41 630.167 cv
498.9 630.167 500.11 631.387 500.11 632.867 cv
500.11 634.357 498.9 635.567 497.41 635.567 cv
495.93 635.567 494.71 634.357 494.71 632.867 cv
@
495.68 632.947 mo
495.68 631.467 496.9 630.247 498.38 630.247 cv
499.87 630.247 501.08 631.467 501.08 632.947 cv
501.08 634.437 499.87 635.647 498.38 635.647 cv
496.9 635.647 495.68 634.437 495.68 632.947 cv
@
496.65 633.027 mo
496.65 631.547 497.87 630.327 499.35 630.327 cv
500.84 630.327 502.05 631.547 502.05 633.027 cv
502.05 634.517 500.84 635.727 499.35 635.727 cv
497.87 635.727 496.65 634.517 496.65 633.027 cv
@
497.62 633.107 mo
497.62 631.617 498.84 630.407 500.32 630.407 cv
501.81 630.407 503.02 631.617 503.02 633.107 cv
503.02 634.587 501.81 635.807 500.32 635.807 cv
498.84 635.807 497.62 634.587 497.62 633.107 cv
@
498.59 633.177 mo
498.59 631.697 499.81 630.477 501.29 630.477 cv
502.78 630.477 503.99 631.697 503.99 633.177 cv
503.99 634.667 502.78 635.877 501.29 635.877 cv
499.81 635.877 498.59 634.667 498.59 633.177 cv
@
499.56 633.247 mo
499.56 631.767 500.78 630.547 502.26 630.547 cv
503.75 630.547 504.96 631.767 504.96 633.247 cv
504.96 634.737 503.75 635.947 502.26 635.947 cv
500.78 635.947 499.56 634.737 499.56 633.247 cv
@
500.53 633.317 mo
500.53 631.837 501.75 630.617 503.23 630.617 cv
504.72 630.617 505.93 631.837 505.93 633.317 cv
505.93 634.807 504.72 636.017 503.23 636.017 cv
501.75 636.017 500.53 634.807 500.53 633.317 cv
@
501.5 633.387 mo
501.5 631.897 502.72 630.687 504.2 630.687 cv
505.69 630.687 506.9 631.897 506.9 633.387 cv
506.9 634.867 505.69 636.087 504.2 636.087 cv
502.72 636.087 501.5 634.867 501.5 633.387 cv
@
502.47 633.447 mo
502.47 631.957 503.69 630.747 505.17 630.747 cv
506.66 630.747 507.87 631.957 507.87 633.447 cv
507.87 634.927 506.66 636.147 505.17 636.147 cv
503.69 636.147 502.47 634.927 502.47 633.447 cv
@
503.44 633.507 mo
503.44 632.017 504.66 630.807 506.14 630.807 cv
507.63 630.807 508.84 632.017 508.84 633.507 cv
508.84 634.987 507.63 636.207 506.14 636.207 cv
504.66 636.207 503.44 634.987 503.44 633.507 cv
@
504.41 633.557 mo
504.41 632.077 505.63 630.857 507.11 630.857 cv
508.6 630.857 509.81 632.077 509.81 633.557 cv
509.81 635.047 508.6 636.257 507.11 636.257 cv
505.63 636.257 504.41 635.047 504.41 633.557 cv
@
505.38 633.617 mo
505.38 632.127 506.6 630.917 508.08 630.917 cv
509.57 630.917 510.78 632.127 510.78 633.617 cv
510.78 635.097 509.57 636.317 508.08 636.317 cv
506.6 636.317 505.38 635.097 505.38 633.617 cv
@
506.35 633.667 mo
506.35 632.177 507.57 630.967 509.05 630.967 cv
510.54 630.967 511.75 632.177 511.75 633.667 cv
511.75 635.147 510.54 636.367 509.05 636.367 cv
507.57 636.367 506.35 635.147 506.35 633.667 cv
@
507.32 633.707 mo
507.32 632.227 508.54 631.007 510.02 631.007 cv
511.51 631.007 512.72 632.227 512.72 633.707 cv
512.72 635.197 511.51 636.407 510.02 636.407 cv
508.54 636.407 507.32 635.197 507.32 633.707 cv
@
508.29 633.757 mo
508.29 632.267 509.51 631.057 510.99 631.057 cv
512.48 631.057 513.69 632.267 513.69 633.757 cv
513.69 635.237 512.48 636.457 510.99 636.457 cv
509.51 636.457 508.29 635.237 508.29 633.757 cv
@
509.26 633.797 mo
509.26 632.317 510.48 631.097 511.96 631.097 cv
513.45 631.097 514.66 632.317 514.66 633.797 cv
514.66 635.287 513.45 636.497 511.96 636.497 cv
510.48 636.497 509.26 635.287 509.26 633.797 cv
@
510.23 633.837 mo
510.23 632.357 511.45 631.137 512.93 631.137 cv
514.42 631.137 515.63 632.357 515.63 633.837 cv
515.63 635.327 514.42 636.537 512.93 636.537 cv
511.45 636.537 510.23 635.327 510.23 633.837 cv
@
511.2 633.877 mo
511.2 632.397 512.42 631.177 513.9 631.177 cv
515.39 631.177 516.6 632.397 516.6 633.877 cv
516.6 635.367 515.39 636.577 513.9 636.577 cv
512.42 636.577 511.2 635.367 511.2 633.877 cv
@
512.17 633.917 mo
512.17 632.427 513.39 631.217 514.87 631.217 cv
516.36 631.217 517.57 632.427 517.57 633.917 cv
517.57 635.397 516.36 636.617 514.87 636.617 cv
513.39 636.617 512.17 635.397 512.17 633.917 cv
@
513.14 633.947 mo
513.14 632.457 514.36 631.247 515.84 631.247 cv
517.33 631.247 518.54 632.457 518.54 633.947 cv
518.54 635.427 517.33 636.647 515.84 636.647 cv
514.36 636.647 513.14 635.427 513.14 633.947 cv
@
514.11 633.977 mo
514.11 632.497 515.33 631.277 516.81 631.277 cv
518.3 631.277 519.51 632.497 519.51 633.977 cv
519.51 635.467 518.3 636.677 516.81 636.677 cv
515.33 636.677 514.11 635.467 514.11 633.977 cv
@
515.08 634.007 mo
515.08 632.517 516.3 631.307 517.78 631.307 cv
519.27 631.307 520.48 632.517 520.48 634.007 cv
520.48 635.487 519.27 636.707 517.78 636.707 cv
516.3 636.707 515.08 635.487 515.08 634.007 cv
@
516.05 634.037 mo
516.05 632.547 517.27 631.337 518.75 631.337 cv
520.24 631.337 521.45 632.547 521.45 634.037 cv
521.45 635.517 520.24 636.737 518.75 636.737 cv
517.27 636.737 516.05 635.517 516.05 634.037 cv
@
517.02 634.057 mo
517.02 632.577 518.24 631.357 519.72 631.357 cv
521.21 631.357 522.42 632.577 522.42 634.057 cv
522.42 635.547 521.21 636.757 519.72 636.757 cv
518.24 636.757 517.02 635.547 517.02 634.057 cv
@
517.99 634.077 mo
517.99 632.597 519.21 631.377 520.69 631.377 cv
522.18 631.377 523.39 632.597 523.39 634.077 cv
523.39 635.567 522.18 636.777 520.69 636.777 cv
519.21 636.777 517.99 635.567 517.99 634.077 cv
@
518.96 634.097 mo
518.96 632.617 520.18 631.397 521.66 631.397 cv
523.15 631.397 524.36 632.617 524.36 634.097 cv
524.36 635.587 523.15 636.797 521.66 636.797 cv
520.18 636.797 518.96 635.587 518.96 634.097 cv
@
519.93 634.117 mo
519.93 632.637 521.15 631.417 522.63 631.417 cv
524.12 631.417 525.33 632.637 525.33 634.117 cv
525.33 635.607 524.12 636.817 522.63 636.817 cv
521.15 636.817 519.93 635.607 519.93 634.117 cv
@
520.9 634.137 mo
520.9 632.657 522.12 631.437 523.6 631.437 cv
525.09 631.437 526.3 632.657 526.3 634.137 cv
526.3 635.627 525.09 636.837 523.6 636.837 cv
522.12 636.837 520.9 635.627 520.9 634.137 cv
@
521.87 634.157 mo
521.87 632.667 523.09 631.457 524.57 631.457 cv
526.06 631.457 527.27 632.667 527.27 634.157 cv
527.27 635.637 526.06 636.857 524.57 636.857 cv
523.09 636.857 521.87 635.637 521.87 634.157 cv
@
522.84 634.167 mo
522.84 632.687 524.06 631.467 525.54 631.467 cv
527.03 631.467 528.24 632.687 528.24 634.167 cv
528.24 635.657 527.03 636.867 525.54 636.867 cv
524.06 636.867 522.84 635.657 522.84 634.167 cv
@
523.81 634.177 mo
523.81 632.697 525.03 631.477 526.51 631.477 cv
528 631.477 529.21 632.697 529.21 634.177 cv
529.21 635.667 528 636.877 526.51 636.877 cv
525.03 636.877 523.81 635.667 523.81 634.177 cv
@
524.78 634.197 mo
524.78 632.707 526 631.497 527.48 631.497 cv
528.97 631.497 530.18 632.707 530.18 634.197 cv
530.18 635.677 528.97 636.897 527.48 636.897 cv
526 636.897 524.78 635.677 524.78 634.197 cv
@
525.75 634.207 mo
525.75 632.717 526.97 631.507 528.45 631.507 cv
529.94 631.507 531.15 632.717 531.15 634.207 cv
531.15 635.687 529.94 636.907 528.45 636.907 cv
526.97 636.907 525.75 635.687 525.75 634.207 cv
@
526.72 634.207 mo
526.72 632.727 527.94 631.507 529.42 631.507 cv
530.91 631.507 532.12 632.727 532.12 634.207 cv
532.12 635.697 530.91 636.907 529.42 636.907 cv
527.94 636.907 526.72 635.697 526.72 634.207 cv
@
527.69 634.217 mo
527.69 632.737 528.91 631.517 530.39 631.517 cv
531.88 631.517 533.09 632.737 533.09 634.217 cv
533.09 635.707 531.88 636.917 530.39 636.917 cv
528.91 636.917 527.69 635.707 527.69 634.217 cv
@
528.66 634.227 mo
528.66 632.737 529.88 631.527 531.36 631.527 cv
532.85 631.527 534.06 632.737 534.06 634.227 cv
534.06 635.707 532.85 636.927 531.36 636.927 cv
529.88 636.927 528.66 635.707 528.66 634.227 cv
@
529.63 634.237 mo
529.63 632.747 530.85 631.537 532.33 631.537 cv
533.82 631.537 535.03 632.747 535.03 634.237 cv
535.03 635.717 533.82 636.937 532.33 636.937 cv
530.85 636.937 529.63 635.717 529.63 634.237 cv
@
530.6 634.237 mo
530.6 632.757 531.82 631.537 533.3 631.537 cv
534.79 631.537 536 632.757 536 634.237 cv
536 635.727 534.79 636.937 533.3 636.937 cv
531.82 636.937 530.6 635.727 530.6 634.237 cv
@
531.57 634.247 mo
531.57 632.757 532.79 631.547 534.27 631.547 cv
535.76 631.547 536.97 632.757 536.97 634.247 cv
536.97 635.727 535.76 636.947 534.27 636.947 cv
532.79 636.947 531.57 635.727 531.57 634.247 cv
@
532.54 634.247 mo
532.54 632.757 533.76 631.547 535.24 631.547 cv
536.73 631.547 537.94 632.757 537.94 634.247 cv
537.94 635.727 536.73 636.947 535.24 636.947 cv
533.76 636.947 532.54 635.727 532.54 634.247 cv
@
533.51 634.247 mo
533.51 632.767 534.73 631.547 536.21 631.547 cv
537.7 631.547 538.91 632.767 538.91 634.247 cv
538.91 635.737 537.7 636.947 536.21 636.947 cv
534.73 636.947 533.51 635.737 533.51 634.247 cv
@
534.48 634.247 mo
534.48 632.767 535.7 631.547 537.18 631.547 cv
538.67 631.547 539.88 632.767 539.88 634.247 cv
539.88 635.737 538.67 636.947 537.18 636.947 cv
535.7 636.947 534.48 635.737 534.48 634.247 cv
@
535.45 634.257 mo
535.45 632.767 536.67 631.557 538.15 631.557 cv
539.64 631.557 540.85 632.767 540.85 634.257 cv
540.85 635.737 539.64 636.957 538.15 636.957 cv
536.67 636.957 535.45 635.737 535.45 634.257 cv
@
536.42 634.257 mo
536.42 632.767 537.64 631.557 539.12 631.557 cv
540.61 631.557 541.82 632.767 541.82 634.257 cv
541.82 635.737 540.61 636.957 539.12 636.957 cv
537.64 636.957 536.42 635.737 536.42 634.257 cv
@
537.39 634.257 mo
537.39 632.767 538.61 631.557 540.09 631.557 cv
541.58 631.557 542.79 632.767 542.79 634.257 cv
542.79 635.737 541.58 636.957 540.09 636.957 cv
538.61 636.957 537.39 635.737 537.39 634.257 cv
@
538.36 634.257 mo
538.36 632.777 539.58 631.557 541.06 631.557 cv
542.55 631.557 543.76 632.777 543.76 634.257 cv
543.76 635.747 542.55 636.957 541.06 636.957 cv
539.58 636.957 538.36 635.747 538.36 634.257 cv
@
539.33 634.257 mo
539.33 632.777 540.55 631.557 542.03 631.557 cv
543.52 631.557 544.73 632.777 544.73 634.257 cv
544.73 635.747 543.52 636.957 542.03 636.957 cv
540.55 636.957 539.33 635.747 539.33 634.257 cv
@
540.3 634.257 mo
540.3 632.777 541.52 631.557 543 631.557 cv
544.49 631.557 545.7 632.777 545.7 634.257 cv
545.7 635.747 544.49 636.957 543 636.957 cv
541.52 636.957 540.3 635.747 540.3 634.257 cv
@
541.27 634.257 mo
541.27 632.777 542.49 631.557 543.97 631.557 cv
545.46 631.557 546.67 632.777 546.67 634.257 cv
546.67 635.747 545.46 636.957 543.97 636.957 cv
542.49 636.957 541.27 635.747 541.27 634.257 cv
@
542.24 634.257 mo
542.24 632.777 543.46 631.557 544.94 631.557 cv
546.43 631.557 547.64 632.777 547.64 634.257 cv
547.64 635.747 546.43 636.957 544.94 636.957 cv
543.46 636.957 542.24 635.747 542.24 634.257 cv
@
543.21 634.257 mo
543.21 632.777 544.43 631.557 545.91 631.557 cv
547.4 631.557 548.61 632.777 548.61 634.257 cv
548.61 635.747 547.4 636.957 545.91 636.957 cv
544.43 636.957 543.21 635.747 543.21 634.257 cv
@
544.18 634.257 mo
544.18 632.777 545.4 631.557 546.88 631.557 cv
548.37 631.557 549.58 632.777 549.58 634.257 cv
549.58 635.747 548.37 636.957 546.88 636.957 cv
545.4 636.957 544.18 635.747 544.18 634.257 cv
@
545.15 634.257 mo
545.15 632.777 546.37 631.557 547.85 631.557 cv
549.34 631.557 550.55 632.777 550.55 634.257 cv
550.55 635.747 549.34 636.957 547.85 636.957 cv
546.37 636.957 545.15 635.747 545.15 634.257 cv
@
546.12 634.257 mo
546.12 632.777 547.34 631.557 548.82 631.557 cv
550.31 631.557 551.52 632.777 551.52 634.257 cv
551.52 635.747 550.31 636.957 548.82 636.957 cv
547.34 636.957 546.12 635.747 546.12 634.257 cv
@
547.09 634.257 mo
547.09 632.777 548.31 631.557 549.79 631.557 cv
551.28 631.557 552.49 632.777 552.49 634.257 cv
552.49 635.747 551.28 636.957 549.79 636.957 cv
548.31 636.957 547.09 635.747 547.09 634.257 cv
@
548.06 634.257 mo
548.06 632.777 549.28 631.557 550.76 631.557 cv
552.25 631.557 553.46 632.777 553.46 634.257 cv
553.46 635.747 552.25 636.957 550.76 636.957 cv
549.28 636.957 548.06 635.747 548.06 634.257 cv
@
549.03 634.257 mo
549.03 632.777 550.25 631.557 551.73 631.557 cv
553.22 631.557 554.43 632.777 554.43 634.257 cv
554.43 635.747 553.22 636.957 551.73 636.957 cv
550.25 636.957 549.03 635.747 549.03 634.257 cv
@
550 634.257 mo
550 632.777 551.22 631.557 552.7 631.557 cv
554.19 631.557 555.4 632.777 555.4 634.257 cv
555.4 635.747 554.19 636.957 552.7 636.957 cv
551.22 636.957 550 635.747 550 634.257 cv
@
550.97 634.257 mo
550.97 632.777 552.19 631.557 553.67 631.557 cv
555.16 631.557 556.37 632.777 556.37 634.257 cv
556.37 635.747 555.16 636.957 553.67 636.957 cv
552.19 636.957 550.97 635.747 550.97 634.257 cv
@
551.94 634.257 mo
551.94 632.777 553.16 631.557 554.64 631.557 cv
556.13 631.557 557.34 632.777 557.34 634.257 cv
557.34 635.747 556.13 636.957 554.64 636.957 cv
553.16 636.957 551.94 635.747 551.94 634.257 cv
@
552.91 634.257 mo
552.91 632.777 554.13 631.557 555.61 631.557 cv
557.1 631.557 558.31 632.777 558.31 634.257 cv
558.31 635.747 557.1 636.957 555.61 636.957 cv
554.13 636.957 552.91 635.747 552.91 634.257 cv
@
553.88 634.257 mo
553.88 632.777 555.1 631.557 556.58 631.557 cv
558.07 631.557 559.28 632.777 559.28 634.257 cv
559.28 635.747 558.07 636.957 556.58 636.957 cv
555.1 636.957 553.88 635.747 553.88 634.257 cv
@
554.85 634.257 mo
554.85 632.777 556.07 631.557 557.55 631.557 cv
559.04 631.557 560.25 632.777 560.25 634.257 cv
560.25 635.747 559.04 636.957 557.55 636.957 cv
556.07 636.957 554.85 635.747 554.85 634.257 cv
@
555.82 634.257 mo
555.82 632.777 557.04 631.557 558.52 631.557 cv
560.01 631.557 561.22 632.777 561.22 634.257 cv
561.22 635.747 560.01 636.957 558.52 636.957 cv
557.04 636.957 555.82 635.747 555.82 634.257 cv
@
556.79 634.257 mo
556.79 632.777 558.01 631.557 559.49 631.557 cv
560.98 631.557 562.19 632.777 562.19 634.257 cv
562.19 635.747 560.98 636.957 559.49 636.957 cv
558.01 636.957 556.79 635.747 556.79 634.257 cv
@
557.76 634.257 mo
557.76 632.777 558.98 631.557 560.46 631.557 cv
561.95 631.557 563.16 632.777 563.16 634.257 cv
563.16 635.747 561.95 636.957 560.46 636.957 cv
558.98 636.957 557.76 635.747 557.76 634.257 cv
@
558.73 634.257 mo
558.73 632.777 559.95 631.557 561.43 631.557 cv
562.92 631.557 564.13 632.777 564.13 634.257 cv
564.13 635.747 562.92 636.957 561.43 636.957 cv
559.95 636.957 558.73 635.747 558.73 634.257 cv
@
559.7 634.257 mo
559.7 632.777 560.91 631.557 562.4 631.557 cv
563.88 631.557 565.1 632.777 565.1 634.257 cv
565.1 635.747 563.88 636.957 562.4 636.957 cv
560.91 636.957 559.7 635.747 559.7 634.257 cv
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/XLUSIK+Helvetica*1 uf/XLUSIK+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
