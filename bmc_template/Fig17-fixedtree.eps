%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Acr15203239457728-278867.tmp.pdf
%%Creator: (Adobe Acrobat 17.9.0)
%%For: rzha419
%%CreationDate: 3/04/19, 4:12 PM
%%BoundingBox: -1 0 336 323
%%HiResBoundingBox: 0 0 335.1261 322.5589
%%CropBox: 0 0 335.1261 322.5589
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 798 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2019-04-03T16:11:17+13:00"
   xmp:CreateDate="2019-04-03T16:11:17+13:00"
   xmp:MetadataDate="2019-04-03T16:11:17+13:00"
   xmp:CreatorTool="TeX"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:ed1f7c5f-af98-cf49-8822-d8e17f07978f"
   xmpMM:InstanceID="uuid:5c605c4b-9631-194c-9b9d-241a029210c5"
   pdf:Producer="pdfTeX-1.40.18"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -322.559 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-05 0 mo
-1.52588e-05 322.559 li
335.126 322.559 li
335.126 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FAAAAA+CMSS8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /FAAAAA+CMSS8 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSS8.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 50 /two putdup 68 /D putdup 80 /P putdup 90 /Z putdup 97 /a putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 117 /u putdef/FontBBox {-65 -250 1062 761} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 444 459 656 677 694 715] def/OtherBlues [-205 -194] def/BlueScale 0.04379 def/StdHW [66] def/StdVW [87] def/StemSnapH [59 66] def/StemSnapV [87 101] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings16 dict dup begin/two <1C60D8A8C9B7883C479D21448351655B078B2EE7FC4AB870B30ABB2ECE71900D713116AA68AA3A8AA75B1A204BBB1D4D6949603848F16137F6446D5C9AD6A8B68CD49177C15689A88768A63F7C85519618040546EC25D12D8433EB30366989796CA8862F98C4EE3C1BD42763DC576D> |-/D <1C60D8A8C9B6F21D0B1254000EECEF869B7A46D6E29CDBA99F578EF9963B0A54FE611C44565F070BEE13039634A660B7E31F1317B3F7038446F8CCCE59FE7800A6F5EF36A2CDB66D91FBACDCB2EB1B23D6> |-/P <1C60D8A8C9B65B439BAE0BEDD02D1C53E18EF0CB985488166F55B19E05BD9192220820DA84A1091388742D49958118D01F2DD4D171EA1A425E99E956B23EAD4A72E3FD57DD46B45550C26914934B23DCA30B> |-/Z <1C60D8A8C9B67CE7BDE52A75DD02DC661007301BDA4258A87B6DB7C89C676700772D0BF6D445193DD11F9F64109A0907476723D72FC19D08CDC021DFF7897D152F3B90> |-/a <1C60D8A8C9B7BDE3EC5076B9DD7E38E64E726A6C54B306A0C490A11BFAA5A7F2BFE5727664F0EE3908FB9FE3259630AE60DA068A29D724CA5EDADE7922249BD245A92F2621C6B1F65F693FB98346367FF40A5058BB83441A5B2D0F836DA5C75B78DE7B95D7D78354EAC9ADFEAE9D23804AB0D195FD1BF3> |-/d <1C60D8A8C9B79747360C002C3D6F2D9BB4E47DA2730BF2BFCB65974576AAD2415FCED221C13191430DA34348A783D0975FC37F5E945DE3CB0687A9748EA77EDD4E1033E1D4D935C1939271E96AE8C8EC27CE51306CA7B8AD3B482F0E3E25E0CE446943> |-/e <1C60D8A8C9B74383EFFF10C87598D4A3D5946A491C4C0AC6E2B8E58E95592041F7F708467C72BD9F4C9318DC61A7F3A3A2A776A0B5C761D1F735E0EDD54BF6FD0F1F356781F961059A6E20FD864DCA47293E8BA42814C097640FDB33F82B4A97FA9A> |-/f <1C60D8A8C9B826CBB7B7B3A70C55A1F4714AD171F70AF143B3A145AA7905923963E005D0232477BA8C026EDE0B06D210C5DB0EFA81AE00450DAB072D7756E372BC04084B99699822A1CAB2894D84F8> |-/g <1C60D8A8C9B7883C373F644420BDFE6066184AB4968D81C59DD800329B9D81FBB06ED60AF28107A0DDF501D6F8A72DEB35FABD098C4C6724101AB7C40841175CD716B26483B36ABE899150213E6E5D57A36A6307F5E38084B6A515D5BDEF446308AFEEB3DAD1CB1FEB524393850D9F2761D0B9F9524E1192200BEFBFD5FAD5E9C79EC986E315F412E36F02FA1E3C9BF92DFB5816F700890659AADB7DB27965D140B5EA2197FE7C9AB634D3C2294EAD45A4B945C45FDB08FBABDCA40800593CB1BAE4CAD7BA670521646F11E006C82EDB2374C8B2CD24> |-/h <1C60D8A8C9B797473C374DBF54E933D56D9F9C2D9733BE24271123910440A5ADB85B171362E2CE13FA85E99D6D9DB581BB147D3FADC70D1FAD66B6491908EC4BDB839CBBDD28611F2A11> |-/m <1C60D8A8C9B6BE2F78DDC16434B6D4DAD9B0B0BA53A68941BFF7580B80DEC1E57B448A5A86A1084941778FD8727E7341CCC73F928170EE1A26354AB445DDA74DC3A16B296ADD5A231DBAEC7D9D77C10A54D96E180C0E8142B20FB009372B0902DBAE9A6422FF6759> |-/n <1C60D8A8C9B797473C374DBF54E933F25F37D7D082F67F688FFEBF6E7E84A2EA3A11EEF96C102760A0311D96071C90A0939216CB15AB23F8517A4D303693E4727C5EE433CB> |-/o <1C60D8A8C9B7883C4DCBD75181A7FF6E6971E5C276A30685F0E1C3A50A98195E99E32A3BD4AC4B6385045A7923253550E4F4C560D3FD17093917A13A3580186A49C75945BBE1162D2FA0F817EB6A3D2BE8E2DA3B7EC0211E5F> |-/r <1C60D8A8C9B8002F0D48CD13EA1765B1292825C7CCAEF7BCA17D100F9ADD739852B03E23AEA19D8C161D9FEE512FB16B10EED5> |-/u <1C60D8A8C9B797473607F831AF795F5C3775094CAC07C9785BFB9CC5E06B540F6312E529CB60DB4CA26A166B158DC4030F25294B67EEDC6FAC5A3ED367CF06D59B34B82F> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZZNISG+CMSS8 /FAAAAA+CMSS8 findfont ct_VMDictPut/ZZNISG+CMSS8*1 [50{/.notdef}rp /two 17{/.notdef}rp /D 11{/.notdef}rp /P 9{/.notdef}rp /Z 6{/.notdef}rp /a 2{/.notdef}rp /d /e /f /g /h 4{/.notdef}rp /m /n /o 2{/.notdef}rp /r 2{/.notdef}rp /u 138{/.notdef}rp]ZZNISG+CMSS8 nfZZNISG+CMSS8*1 [7.9701 0 0 -7.9701 0 0 ]msf-76.2162 -77.9165 mo(ZhangandDrummond)[5.17505 4.37239 4.06799 4.37239 7.0559 4.06799 4.37238 7.19382 6.11621 2.89235 4.37239 6.72514 6.72514 4.23448 4.37239 0 ]xsh364.976 -77.9165 mo(Page2of2)[5.17899 4.06799 4.2345 6.58484 7.05591 4.2345 5.40936 0 ]xsh%ADOBeginSubsetFont: GAAAAA+CMSSBX10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /GAAAAA+CMSSBX10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSSBX10.) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 70 /F putdup 101 /e putdup 103 /g putdup 105 /i putdup 114 /r putdup 115 /s putdup 117 /u putdef/FontBBox {-71 -250 1099 780} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 458 475 694 716] def/OtherBlues [-206 -194] def/BlueScale 0.04379 def/StdHW [94] def/StdVW [136] def/StemSnapV [136 147] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings8 dict dup begin/F <1C60D8A8C9B7D8BE6A7F9432008A985DBAA8A6849A8BC5692DC8487E58A0ED7AE1536390A48F754569FC2BE6EB1003FE4DE7E2FFFEF938DC5446FD4C7B4844B5FE9EC3FA242047D2893523A84C73CDEC84F410D712A1906CCD93C02DC2> |-/e <1C60D8A8C9B7BC12CC501AF4851AB1417F00D2F8B8B3E6F94B5ADA7FE32BB71FD839D14528C8AE1E9DE6F579A38B08B8DBC61C11D3B007147105009AA982FB5DC29266D24DEA8D7517B6CAAB39C7D6341BF72799E6513F5A1049A0078AF3929D5530C834943D9C8B4860CD7183058BDED8AA42BB03F448B2C685C2CFAC107B00CF> |-/g <1C60D8A8C9B795A0BDB3E7720F019ECAEE369DE588A3BCB46E303C5DA9ED7D89C29395542A6F360F30B27AB8DAAE27C13EAD51313CD8397E65C9D91194FDD0ED3BB0AC57448244ADD11F2E03EFC965CB67B26C81EAF58EC74A4B70BFB02D7849F7264361B3C3680955EF79F1BAF290CDACA25555D829C711B164D7A9C24E6D86F9D21E1EAF3606A88386DCC75470E151BDA348E7089DCADAE9E68545FEA5F3664411908FE2FDE7A680105E78E12063933DC370999ADA467B6251347F7DA35E3915801AED54199C24F7B51956B5E84311E1B77E52DE4FB998120DB6A29B35FD42F34EB68462EAA98769D05DE49E92B45B0810> |-/i <1C60D8A8C9B86D0BB6F0C2211391C359C2C95D33FB9E4BB0BD652FC48487777B9B7C231F520CAB8BFF91DF865469B5608DFC6CE0B190C0CCB45C2A35A37D7A058E7E51A3853921C310E5E4532D8767436958C8608173> |-/r <1C60D8A8C9B727F79FA40D5DD0603E36A56EC1D5F522476534662EBB7B017BE4B4EDE8C930993A951657CEC4A9C537C33BE1C61D97522F4609820100060E0DCCCDF785B35526D5D695703F3CF1C763163176AA6261E0> |-/s <1C60D8A8C9B71648374B9C8B9384F339C456410D2602E78D109A626EEF56CAD2977F6C5EC65BC7A3B2C9B5B62FE40634DD604CAF28EF9C4AC700614AF0192CDEBF0CCA2AC9DB79D50831E5670C357815A6A472D6B9894FC61F91D44D697B78A468AD45ECCC3937F0C480FC34E8F0D484A805A4016F80365A18DF96CCD6953C5C0C9759C49C9E9546E16928818C36E72D6B1DE4E73DA4ABF7350F87188EE6E3B77E743004F938940EB6DC72C6E110BBDD19D3E9> |-/u <1C60D8A8C9B7EA3ACC44BE228F467DF62829EB8CEF26104D519D16375833143ECFB918653FDA3BF41A62281986C8C0DAA1D74571597DE827EBB8B2277CE2D1D053B40DBC2FC427EB380A99FA63409ABD8D34B86FF4FDC4B5E220CD6CB73F2AAC281952D8> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZZNISH+CMSSBX10 /GAAAAA+CMSSBX10 findfont ct_VMDictPut/ZZNISH+CMSSBX10*1 [70{/.notdef}rp /F 30{/.notdef}rp /e /.notdef /g /.notdef /i 8{/.notdef}rp /r /s /.notdef /u 138{/.notdef}rp]ZZNISH+CMSSBX10 nfZZNISH+CMSSBX10*1 [6.9738 0 0 -6.9738 0 0 ]msf-15.4442 -20.1325 mo(Figures)[4.26168 1.78251 3.83561 3.91297 2.5956 3.56425 0 ]xsh-15.1952 370.885 mo
344.456 370.885 li
344.456 -6.57147 li
-15.1952 -6.57147 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
gsave
3.33175 168.048 mo
163.293 168.048 li
163.293 5.00203 li
3.33175 5.00203 li
cp
clp
1.04584 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
145.617 137.007 mo
134.487 131.644 li
.75 .679688 .669922 .902344 cmyk
@
136.788 141.729 mo
134.487 131.644 li
@
47.1438 152.472 mo
99.1194 87.2953 li
@
98.2723 77.5716 mo
97.5873 80.5784 li
@
99.1194 87.2953 mo
134.487 131.644 li
@
16.6758 80.5784 mo
97.5873 80.5784 li
@
99.1979 20.8164 mo
92.2587 51.2216 li
@
97.5873 80.5784 mo
99.1194 87.2953 li
@
73.2584 27.3974 mo
92.2587 51.2216 li
@
147.589 53.8232 mo
98.2723 77.5716 li
@
92.2587 51.2216 mo
98.2723 77.5716 li
@
%ADOBeginSubsetFont: HAAAAA+Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /HAAAAA+Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 53 /five putdup 54 /six putdup 55 /seven putdup 56 /eight putdup 57 /nine putdup 65 /A putdup 67 /C putdup 68 /D putdup 69 /E putdup 71 /G putdup 72 /H putdup 73 /I putdup 75 /K putdup 77 /M putdup 78 /N putdup 79 /O putdup 82 /R putdup 83 /S putdup 84 /T putdup 85 /U putdup 87 /W putdef/FontBBox {15 -21 932 737} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings28 dict dup begin/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE716864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF2396DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F08B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BFF7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7AB1C1C6CA> |-/seven <1C60D8A8C9B7EF326C86E2C8FFDAFAAAF8B2EE45CDE12ADFFACC9341D807009D1D241E6029AF890199C52728BBB0F3ADB8945AB4753C3621AAE632A8EC4FD7F79CCD78EF> |-/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E63893114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-/nine <1C60D8A8C9B7EF326B464DF43714564059769E71FFFC685FC18F48C77D53AC88FCBBC12F494C4F63EED0BC4E888DFF584BE7D2D816586B9A4264CD850BFF6D2740D48815051A0D66B2C6D52B7F71CA6A6822ACB78F611F031D0F31B29F8F7C82DE8795DAD0A78F20A0C158D57307DA2BB022E8173A55705FD29D68A57A980A4A8A50AA38F194766F67D892E4FFF95162BD634B3243B2EC97981B62535F84C02C407EE586AAFD00BF4926CA361322725073A4D1FB7F2047C32550A5DE15> |-/A <1C60D8A8C9B64EDFF4A769B0E349B0B8A8759517834132408F730D5925332B160EAFC678A283B12B9F41A37E5CF702EF2D2E718583BF> |-/C <1C60D8A8C9B6079F6D8209747A86332E73924F1B07F271169856A53C915771D7C530ADE68D8CA49F0A6B3478F9E8176949771F40D91B68E1A88C72CE81CC0A91B3CFB642960E7EB2127A1637D49961A11F5DD40622F39379CDAB7E5B349DF832E4955008C5E3208AB258B012A237635179513D820ACF76E0A17ED392C351599687E8E7D0> |-/D <1C60D8A8C9B6079F62ED4B3208AD694719329DB5FF23BCAF76D41058F7AAAFF2529AC265BA39C333293E127AD9C0A8013616ECDB9EC4B8FC987A3C84239B76F354F924D3BA3E82C9BA9779AE94CCE8ABEEADDA4A3C72DD0361E6B5DAAF6C5A39F74710AA0C4E1E> |-/E <1C60D8A8C9B64EDFE336C703EA12FABA68C9F5D15F1A9B67653505BC29F8D56A4237858E054C3198877A> |-/G <1C60D8A8C9B6FF86FAE761919412E75DCB56A17E0B647886E974BE0CD2DDC55247C89172C0F24B317CED95A1845F91927547B6F787BE4A81523EC6B90B7AF23F6F8A8BDDC51D0AA285D7E086AD8E028BD7D16A89F17742D556071D7D56166C6C8A71E0DFC3DA3B4DBE27EC4E6BE207A1EAF47A71BE409951D1C5060119CDD071AF7E9076F56846B6D62E52B2CB6390635FC230> |-/H <1C60D8A8C9B6079F4F4E07EFC7C894BAD912B65087B319FD4C6D4407FA6BDEE59584D043C3070AE38B> |-/I <1C60D8A8C9B854D0EE4B20327A907C36187261> |-/K <1C60D8A8C9B64EDFDBBA3672BA9F92710F094994A8A12A9F4DF39299BC3FAD32D853DD36FBDA8E3717CD2AE8C1575639957965FDD3> |-/M <1C60D8A8C9B6B41C9910B30BE12408A0CCE83CFCBF71D6A0AFED0B0C7E6B8742F00BF38074693AE67B7536DF8025FC27BB7165EE6A43D7B9497E065E42F0EE8DA1C58C8863D1E0F8290CD2A3925749EE5F186B> |-/N <1C60D8A8C9B6079F42CB3557771D803C706A630DA03929B931F488C01B37E85FE694B3E25EF7F6332F> |-/O <1C60D8A8C9B6FF86FAE00AF1D2F86EE41080CA4FE58FE601E0C2094F12B2546E9E38BAEF65733BECF7148D0EA0DA88DD45A55274AD12A1DAB92015F88338234BE6A027107EEF674C9235BAD46D7DFF766B4165047A7FA440E1670CEEAAB2425BA29AB4CCAE0C0F708E15BAD5B5B8F2A1708072DEF2F49003A8347C8BC4E813779196F3AD613B7571> |-/R <1C60D8A8C9B6079F62E4AB3BE2637412A7FA2BF1A87387986CC045CAB872B149BF5CA8B183616945E928E44276850B6ACD583D0202E4733E2391A44F4BCB738AB089D22707E0F4100F2BC6F35BD460D56FBB8A5713D4AF8760EB8EC1E1AE6F49A9B2B1066A8DA04011CCA29E2BB62A652880D30D80185E3336BD5BF6EB5D116E1FAF0793D4F86835A22CB564EFB5339E311318AE2981A0679F359C9E7A1FF6CE964A> |-/S <1C60D8A8C9B64EDFB8831DC7D3DA5352C683CFE7ADDB1F2F7D19136185D1F816C3BE09EC1E84619F52030DEE9359B5F11BDC142E51FA821DBBAA94D355CDB3194A176F4CAFE2F8762140A61B8DB4801B25EC39CF8CD3F7F21C11EB8BF2FEAA7BF71364CB0E29D9153C5428F8E2556CFDCDFCF7C63E7AA008F518E6EAA3DEB5EC8960FB0234452B3B55FF1BB7B980C85D0DFF1CA34BE144E02D5E8A581ACC1C4C80D7396F6E85C6E2CC3BAA0E140AF4F656AC7D073077DF7B4E8B5856F92B> |-/T <1C60D8A8C9B7D8BE7B6CE17BCB3B2D4B0FB3E6AF9E6DDADD178189522CE1F006> |-/U <1C60D8A8C9B6079F4AA924EA43FD5A09DAB441D8FDAD8EE41C906BC5551CAACFEF8B65251D34977BCAD7099CF8F4F9BCA8F32E33DFACED539B0F12BA4E54491DDBF246C2DFA3D44D729CA7103659C293245DC39AD319> |-/W <1C60D8A8C9B5D6EF2BD09738A41AA6380C9765B88F07D3637E9EE67A95A81C558683DE1DD822B8DCC23EEF2BFD04340812EB686C4A78A7861A98B16FC19A> |-/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZZNISI+Helvetica /HAAAAA+Helvetica findfont ct_VMDictPut/ZZNISI+Helvetica*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 7{/.notdef}rp /A /.notdef /C /D /E /.notdef /G /H /I /.notdef /K /.notdef /M /N /O 2{/.notdef}rp /R /S /T /U /.notdef /W 168{/.notdef}rp]ZZNISI+Helvetica nfZZNISI+Helvetica*1 [5.18266 2.49585 2.49585 -5.18266 0 0 ]msf147.178 139.789 mo(DIGI)[3.8351 1.84691 1.53406 .73877 4.12541 1.98671 0 0 ]xyshZZNISI+Helvetica*1 [1.27985 5.60774 5.60774 -1.27985 0 0 ]msf135.585 144.683 mo(ANDI)[.900604 3.94604 .970947 4.25432 .970978 4.25433 0 0 ]xyshZZNISI+Helvetica*1 [3.58644 -4.49701 -4.49701 -3.58644 0 0 ]msf37.1639 167.922 mo(RHEA)[2.52241 -3.16283 2.5224 -3.1628 2.32522 -2.91557 0 0 ]xyshZZNISI+Helvetica*1 [5.75212 0 0 -5.75212 0 0 ]msf3.34135 82.4086 mo(OST)[3.99406 3.35562 0 ]xshZZNISI+Helvetica*1 [1.27985 -5.60774 -5.60774 -1.27985 0 0 ]msf101.564 18.6751 mo(EMU)[.853676 -3.7404 1.06609 -4.6712 0 0 ]xyshZZNISI+Helvetica*1 [3.58644 4.49701 4.49701 -3.58644 0 0 ]msf61.2313 15.2499 mo(CASS)[2.32364 2.91357 2.12646 2.66637 2.12648 2.66637 0 0 ]xyshZZNISI+Helvetica*1 [5.18266 -2.49586 -2.49585 -5.18266 0 0 ]msf150.739 54.3356 mo(KIWI)[3.74191 -1.80203 1.72583 -.831116 5.17741 -2.49332 0 0 ]xyshZZNISI+Helvetica*1 [5.18266 2.49585 2.49585 -5.18266 0 0 ]msf134.299 127.895 mo(0.0387)[2.56117 1.23341 1.12041 .539551 2.56117 1.23341 2.56116 1.2334 2.56117 1.2334 0 0 ]xyshZZNISI+Helvetica*1 [1.27985 5.60774 5.60774 -1.27985 0 0 ]msf126.145 130.91 mo(0.0324)[.632469 2.77122 .276688 1.21231 .632469 2.77124 .632484 2.77124 .632462 2.77124 0 0 ]xyshZZNISI+Helvetica*1 [3.58644 -4.49701 -4.49701 -3.58644 0 0 ]msf65.5846 124.064 mo(0.2609)[1.77235 -2.22234 .775322 -.972168 1.77234 -2.22233 1.77235 -2.22234 1.77236 -2.22233 0 0 ]xyshZZNISI+Helvetica*1 [1.27985 -5.60774 -5.60774 -1.27985 0 0 ]msf89.4632 79.657 mo(0.0097)[.632477 -2.77124 .276672 -1.21229 .632484 -2.77123 .632469 -2.77124 .632477 -2.77124 0 0 ]xyshZZNISI+Helvetica*1 [3.58644 4.49701 4.49701 -3.58644 0 0 ]msf114.655 102.424 mo(0.1776)[1.77235 2.22234 .775314 .97216 1.77235 2.22233 1.77235 2.22234 1.77234 2.22232 0 0 ]xyshZZNISI+Helvetica*1 [5.75212 0 0 -5.75212 0 0 ]msf49.1571 77.2813 mo(0.2533)[2.84259 1.2435 2.84259 2.84259 2.84259 0 ]xshZZNISI+Helvetica*1 [1.27985 -5.60774 -5.60774 -1.27985 0 0 ]msf100.679 43.5582 mo(0.0976)[.632469 -2.77124 .27668 -1.21228 .632469 -2.77122 .632477 -2.77124 .632477 -2.77122 0 0 ]xyshZZNISI+Helvetica*1 [1.27985 5.60774 5.60774 -1.27985 0 0 ]msf103.021 77.4176 mo(0.0216)[.632477 2.77124 .276672 1.21229 .632484 2.77123 .632469 2.77124 .632477 2.77124 0 0 ]xyshZZNISI+Helvetica*1 [3.58644 4.49701 4.49701 -3.58644 0 0 ]msf71.4191 36.7323 mo(0.0954)[1.77235 2.22234 .775314 .972153 1.77235 2.22234 1.77236 2.22234 1.77234 2.22232 0 0 ]xyshZZNISI+Helvetica*1 [5.18266 -2.49586 -2.49585 -5.18266 0 0 ]msf114.315 66.1876 mo(0.1713)[2.56117 -1.23341 1.12039 -.539551 2.56117 -1.23341 2.56117 -1.2334 2.56118 -1.23341 0 0 ]xyshZZNISI+Helvetica*1 [1.27985 5.60774 5.60774 -1.27985 0 0 ]msf95.9581 54.6465 mo(0.0846)[.632477 2.77123 .276672 1.21228 .632477 2.77123 .632469 2.77123 .632484 2.77124 0 0 ]xyshgrestore
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: IAAAAA+CMR8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /IAAAAA+CMR8 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR8.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 40 /parenleft putdup 41 /parenright putdup 85 /U putdup 97 /a putdup 100 /d putdup 101 /e putdup 110 /n putdup 111 /o putdup 114 /r putdup 116 /t putdef/FontBBox {-36 -250 1070 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 446 665 675 683 704] def/OtherBlues [-205 -194] def/BlueScale 0.04379 def/StdHW [33] def/StdVW [76] def/StemSnapH [28 33] def/StemSnapV [76 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings11 dict dup begin/parenleft <1C60D8A8C9B71EB594BAA87F31A170DCF548DAEE3311FC43FC78A6C074493B3549D0E1827F1703C6338D1907CB557F57F502EA6D6799A8DE937EF9683D579DF1ABAB4E74C3A1B979FDB2EF2D12A2FA9CDA68067A5474500A960368C6287159041D49A1> |-/parenright <1C60D8A8C9B71EB594BAA87F31A170DCF0F44A88F271C1204DA8CF0A554BEEB2F39FC92A6198D8CB5B5035678EDF15C268D7DFBF834C3E0481F4D74050740572F4CCA890EC4E0E90C1B49113DEAB732B279883A40AC82E62D22FC7681B0EFAEE5F4823C1A08D4996DA0A> |-/U <1C60D8A8C9B6CE04D71938946CF172D28170EB1B29AECB2A6245D1398A91236A8271FE2AA351DF89A8220BE7333352D8B3D5D9BD502ECFDB182E0CC7DA130CC5EAFDDB73DF956904D51AD6D5D85342DF5CC3B7C42C3632433586E2DCA80FC64FD5033373FD03847AAEEF19EEA8E3E1184622D47A9E589F09409F1129341899E88409584F504A375AF9FE8FD45001013D9E6F9C06DBB45C945FA4467450E0AF29DEC97623B87EE38EA2303BD2DC0380336F7D53> |-/a <1C60D8A8C9B7883C4DBCBC20C60033A54608E6FBB3D7C7C85ABEB5DA8B29DCCF2F1B64BF10E8E3CE8B60DF1662604534AC1985F7E97A2469BB051F45927F3DAD189CC62DA3E328E861F054B32126D17977B45424B48BB15A379A75ACB8DBA1664189B436542242CF85EED4561386ED0861ADF24AA752E7E6CBC600908DFC0865001333BD546BA8A19A8754D62428A60A14E8B4F00BD3AE898D7BC838A0CA> |-/d <1C60D8A8C9B7CDD8B4397BC5D546373275BA90C4515798C9B3E3AE6AF3554AD2E418A7032490B6B98BE88035378F8D560CD03D4F698A84C210943595D27237173958355F95C86EE3859E71BFE20F9E0CC27C2DCDC86416AAC1ADEF3B85620DD70EBE8D07A49BDEA5000ACFCA59569F53CAE891AEB1079327F3C14A6BA93841F6312DB6077AE59F6C3D1D44E629B7> |-/e <1C60D8A8C9B74383EF980222186AC412A37061F7DA1A075A58C4EB92AF05251C4F544837EE77DF2FD3FD46B59FD3554B7172B19B99F4BBA7EB9A3F6A9B54C1050351BB54E475583D5D0877A11CCAC1C029E4402750715303229C0A8A7556406100EEAD8CA3E3685225736E4C7D6700DD8B4CFDDA19A31D> |-/n <1C60D8A8C9B7CDD8BE0229A9F7DBF0C2A966CCBCFEB550A2AF7F67D4E5F22C43CC99744433C65943913F08908A73A43E3699889519171A2ACB6AB5A398468C17752140CC9610F45893A0D08573FBCB4ED93DBC4C35D46EFF4E1EF29C50FC850B2878743220735A5072AEDECF0B09D1F747A6DB4C08F5487D5E36F63AD5E121B5BD9D0867360CC0C002915A82939C5634567A88B45A0A07465D31C12E7A045B18EF8C0A0C7534C2C5497DDF33440E5FB7BB302E727236> |-/o <1C60D8A8C9B7883C4DB1DE675E90B0F4A835049649F018A5DADA634F86DAA57613197E8B0F6DFD79D88111B056183A6CE9D391DA36227DE230C1DF352E21FDE409CC70F4EB326556A563408237CB833F03E9966A04A8D110B55C62A7F326000C9DD21BF98FF3E2C03CBBC5CD920F53BF93E47BF0870557EEFA> |-/r <1C60D8A8C9B71DE7AEBBE327700164145A7987C663F5708624971209183C1AA5AE7985618809D8530182A6954B7D298F8533949148FD10D074ECCBB0E4BD9237A4CB4A90465D136A5C2F39F0FDE2A674B4B320C16AA9A48F8E602F9DC5BA66848AB29267CC1A9D2762085785E6610E9CC9E8C5B6B4186371F402E776D132214C560E0505324D5C14EECA9A5B> |-/t <1C60D8A8C9B71EB5EE6C6DCE30F4A15DE0491CF726FD0973E0358E88609FF52B82D96726F88858573641C46778AB6CB1A69C1546570740CE361A0F5F2EBA90B678DCA87F0E4369608991A4A17842AD893F8D2E664B681D02> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZZNISJ+CMR8 /IAAAAA+CMR8 findfont ct_VMDictPut/ZZNISJ+CMR8*1 [40{/.notdef}rp /parenleft /parenright 43{/.notdef}rp /U 11{/.notdef}rp /a 2{/.notdef}rp /d /e 8{/.notdef}rp /n /o 2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]ZZNISJ+CMR8 nfZZNISJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf48.3068 177.014 mo(\(a\)Unrootedtree)[3.29318 4.23448 6.58484 6.34267 4.70476 3.30037 4.46561 4.23448 3.29318 3.76347 7.52618 3.29318 3.30035 3.76347 0 ]xshgsave
168.336 167.118 mo
168.336 48.7619 li
329.272 48.7619 li
329.272 167.118 li
cp
clp
315.713 73.3669 mo
297.221 73.3669 li
297.221 63.4969 li
298.875 63.4969 li
298.875 71.7133 li
315.713 71.7133 li
315.713 73.3669 li
.634766 .303955 1 .12793 cmyk
f
315.713 55.2806 mo
298.875 55.2806 li
298.875 63.4969 li
297.221 63.4969 li
297.221 53.627 li
315.713 53.627 li
315.713 55.2806 li
.679688 0 1 0 cmyk
f
315.713 127.626 mo
221.693 127.626 li
221.693 113.233 li
223.347 113.233 li
223.347 125.972 li
315.713 125.972 li
315.713 127.626 li
f
222.52 114.06 mo
218.444 114.06 li
218.444 129.06 li
216.79 129.06 li
216.79 112.406 li
222.52 112.406 li
222.52 114.06 li
.734375 0 1 0 cmyk
f
266.663 100.496 mo
223.347 100.496 li
223.347 113.233 li
221.693 113.233 li
221.693 98.8426 li
266.663 98.8426 li
266.663 100.496 li
.712891 0 1 0 cmyk
f
315.713 145.712 mo
216.79 145.712 li
216.79 129.06 li
218.444 129.06 li
218.444 144.058 li
315.713 144.058 li
315.713 145.712 li
.208984 .984375 1 .123047 cmyk
f
315.713 109.539 mo
265.836 109.539 li
265.836 99.6694 li
267.49 99.6694 li
267.49 107.886 li
315.713 107.886 li
315.713 109.539 li
.736328 0 1 3.052e-05 cmyk
f
217.617 129.887 mo
205.864 129.887 li
205.864 96.2775 li
207.518 96.2775 li
207.518 128.233 li
217.617 128.233 li
217.617 129.887 li
.740234 .0313416 1 .0010376 cmyk
f
169.768 130.451 mo
198.386 130.451 li
198.386 128.798 li
169.768 128.798 li
cp
.734375 .0844727 1 .00613403 cmyk
f
315.713 91.4531 mo
267.49 91.4531 li
267.49 99.6694 li
265.836 99.6694 li
265.836 89.7995 li
315.713 89.7995 li
315.713 91.4531 li
.71875 0 1 0 cmyk
f
206.691 97.1043 mo
199.213 97.1043 li
199.213 129.624 li
197.559 129.624 li
197.559 95.4507 li
206.691 95.4507 li
206.691 97.1043 li
.740234 .0193481 1 .000549316 cmyk
f
315.713 163.798 mo
197.559 163.798 li
197.559 129.624 li
199.213 129.624 li
199.213 162.145 li
315.713 162.145 li
315.713 163.798 li
.726563 .147949 1 .021698 cmyk
f
298.048 64.3237 mo
207.518 64.3237 li
207.518 96.2775 li
205.864 96.2775 li
205.864 62.6701 li
298.048 62.6701 li
298.048 64.3237 li
.714844 0 1 0 cmyk
f
272.903 100.496 mo
267.49 100.496 li
267.49 98.8426 li
272.903 98.8426 li
272.903 100.496 li
.440918 .399658 0 0 cmyk
f
265.836 100.496 mo
260.59 100.496 li
260.59 98.8426 li
265.836 98.8426 li
265.836 99.6694 li
265.836 100.496 li
.796875 .399902 .498047 0 cmyk
f
265.836 100.496 mo
267.49 100.496 li
267.49 99.6694 li
265.836 99.6694 li
cp
.808594 .399902 .498047 0 cmyk
f
265.836 99.6694 mo
267.49 99.6694 li
267.49 98.8426 li
265.836 98.8426 li
cp
.800781 .399902 .498047 0 cmyk
f
.10335 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
272.903 98.8426 mo
260.59 98.8426 li
260.59 100.496 li
272.903 100.496 li
272.903 98.8426 li
cp
.75 .679688 .669922 .902344 cmyk
@
225.021 129.887 mo
218.444 129.887 li
218.444 129.06 li
217.617 129.06 li
218.444 129.06 li
218.444 128.233 li
225.021 128.233 li
225.021 129.887 li
.440918 .399658 0 0 cmyk
f
217.617 129.06 mo
218.444 129.06 li
218.444 128.233 li
217.617 128.233 li
cp
.808594 .399902 .498047 0 cmyk
f
218.444 129.887 mo
216.79 129.887 li
217.617 129.887 li
217.617 129.06 li
218.444 129.06 li
218.444 129.887 li
.544922 .890625 .498047 .0588379 cmyk
f
217.617 129.887 mo
209.794 129.887 li
209.794 128.233 li
217.617 128.233 li
217.617 129.06 li
217.617 129.887 li
.8125 .415771 .498047 0 cmyk
f
225.021 128.233 mo
209.794 128.233 li
209.794 129.887 li
225.021 129.887 li
225.021 128.233 li
cp
.75 .679688 .669922 .902344 cmyk
@
207.559 130.451 mo
199.213 130.451 li
199.213 129.624 li
198.386 129.624 li
199.213 129.624 li
199.213 128.798 li
205.864 128.798 li
205.864 129.887 li
207.559 129.887 li
207.559 130.451 li
.440918 .399658 0 0 cmyk
f
205.864 129.887 mo
207.559 129.887 li
207.559 128.798 li
205.864 128.798 li
cp
.8125 .415771 .498047 0 cmyk
f
197.559 130.451 mo
189.101 130.451 li
189.101 128.798 li
197.559 128.798 li
197.559 129.624 li
198.386 129.624 li
197.559 129.624 li
197.559 130.451 li
.808594 .443115 .498047 .00392151 cmyk
f
199.213 129.624 mo
197.559 129.624 li
197.559 128.798 li
199.213 128.798 li
199.213 129.624 li
.8125 .407959 .498047 0 cmyk
f
199.213 130.451 mo
197.559 130.451 li
197.559 129.624 li
199.213 129.624 li
199.213 130.451 li
.804688 .474609 .498047 .0117798 cmyk
f
207.559 128.798 mo
189.101 128.798 li
189.101 130.451 li
207.559 130.451 li
207.559 128.798 li
cp
.75 .679688 .669922 .902344 cmyk
@
214.99 97.1043 mo
207.518 97.1043 li
207.518 95.4507 li
214.99 95.4507 li
214.99 97.1043 li
.440918 .399658 0 0 cmyk
f
207.518 97.1043 mo
205.864 97.1043 li
206.691 97.1043 li
206.691 96.2775 li
207.518 96.2775 li
207.518 97.1043 li
.8125 .415771 .498047 0 cmyk
f
206.691 97.1043 mo
199.45 97.1043 li
199.45 95.4507 li
205.864 95.4507 li
205.864 96.2775 li
206.691 96.2775 li
206.691 97.1043 li
.8125 .407959 .498047 0 cmyk
f
207.518 96.2775 mo
207.518 96.2775 li
205.864 96.2775 li
205.864 95.4507 li
207.518 95.4507 li
207.518 96.2775 li
.796875 .399902 .498047 0 cmyk
f
214.99 95.4507 mo
199.45 95.4507 li
199.45 97.1043 li
214.99 97.1043 li
214.99 95.4507 li
cp
.75 .679688 .669922 .902344 cmyk
@
229.976 114.06 mo
223.347 114.06 li
223.347 112.406 li
229.976 112.406 li
229.976 114.06 li
216.79 114.06 mo
214.73 114.06 li
214.73 112.406 li
216.79 112.406 li
216.79 114.06 li
.440918 .399658 0 0 cmyk
f
223.347 114.06 mo
221.693 114.06 li
222.52 114.06 li
222.52 113.233 li
223.347 113.233 li
223.347 114.06 li
.78125 .399902 .498047 0 cmyk
f
222.52 114.06 mo
216.79 114.06 li
216.79 112.406 li
221.693 112.406 li
221.693 113.233 li
222.52 113.233 li
222.52 114.06 li
.808594 .399902 .498047 0 cmyk
f
223.347 113.233 mo
223.347 113.233 li
221.693 113.233 li
221.693 112.406 li
223.347 112.406 li
223.347 113.233 li
.796875 .399902 .498047 0 cmyk
f
229.976 112.406 mo
214.73 112.406 li
214.73 114.06 li
229.976 114.06 li
229.976 112.406 li
cp
.75 .679688 .669922 .902344 cmyk
@
300.43 64.3237 mo
298.875 64.3237 li
298.875 62.6701 li
300.43 62.6701 li
300.43 64.3237 li
.440918 .399658 0 0 cmyk
f
298.875 64.3237 mo
297.221 64.3237 li
298.048 64.3237 li
298.048 63.4969 li
298.875 63.4969 li
298.875 64.3237 li
.757813 .548828 .498047 .0627441 cmyk
f
298.048 63.4969 mo
298.875 63.4969 li
298.875 62.6701 li
298.048 62.6701 li
cp
.78125 .399902 .498047 0 cmyk
f
298.048 64.3237 mo
295.549 64.3237 li
295.549 62.6701 li
298.048 62.6701 li
298.048 63.4969 li
298.048 64.3237 li
.796875 .399902 .498047 0 cmyk
f
300.43 62.6701 mo
295.549 62.6701 li
295.549 64.3237 li
300.43 64.3237 li
300.43 62.6701 li
cp
.75 .679688 .669922 .902344 cmyk
@
ZZNISI+Helvetica*1 [4.134 0 0 -4.134 0 0 ]msf317.78 146.332 mo(OST)sh317.78 110.159 mo(EMU)sh317.78 73.987 mo(DIGI)sh317.78 55.9007 mo(ANDI)sh317.78 128.246 mo(KIWI)sh317.78 92.0732 mo(CASS)sh317.78 164.418 mo(RHEA)sh240.561 97.373 mo(0.94)sh262.634 142.589 mo(1.26)sh287.157 106.416 mo(0.97)sh302.85 70.2436 mo(1.07)sh208.123 126.764 mo(0.98)sh303.987 52.1574 mo(0.9)sh266.223 124.502 mo(0.9)sh287.157 88.3299 mo(0.95)sh198.508 93.9831 mo(0.98)sh216.038 110.939 mo(0.97)sh253.019 160.675 mo(1.02)sh248.339 61.2005 mo(0.95)shgrestore
%ADOBeginSubsetFont: IAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginZZNISJ+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/percent <1C60D8A8C9B59B433D565FD9437897EF6C0A20A0BC86AAA62292A6FD124C9B243723769C0C3409515989FE103DDB33A74FC77C1F29F2C4D69E702B9D555DD66C5E33BBE3C30244F5CC7D9AE3951FB670812055525E65D768D888B97F387C68BE7C8B54198109EEE05EC3357AC1547083E141ABCB47C00914FEE95863F0C44716AEFBC1C86D90E85F8A688F728C1A51B675F6A98DAC9EA10EAB5254EA1A1C0BD766497269DB31E1AE418F8AD50BF92A819BEE77C86BB55C52B4C443007EA9A12DB6FAD0AAF6058A9BF71F69ED394447601020CDAE5A253A45E4A0D44B8AEB6F30C226228793176CA174A0E234> |-/period <1C60D8A8C9B845C808722EC4BC14AFF8AE2E7B77E6E7C9BED6C8454E4CF0B0ACAAF01739DBE1B2A56ED6> |-/four <1C60D8A8C9B7883C47E9695598D0AF3A7007C55B549EB9B3F3F46104652844342745D2B91FB2D0F00634244F88463533B1B57C29F84779340190813A1C1D067290CD1A5A15C3546B4439E2525D45177EB37490815EF6B6C58818E7C9CDA495E2BF3E7B45D1B291D529E999804ECD42D22A6077E492DD51C0EA4F3AC647B0CA8614C7> |-/nine <1C60D8A8C9B7883CBAA92BFC2795CB489FAB13B9BB6E18181A103EC5B1E1B8B191BF9985DC765CB882D3BB429A7391E9ABEFC63A1500585FC331EAC31ED3AE6DF0951839AC3A95570CFCA4F606382A77C8150F60C2BC2EE07B6BFEEA74B5BCB1B549978D6E5BDA7FAEE8A0209BF3A3DE0B37D2771CE9D9460866923DAB9D9EA5A831A08CAABC890AF2E7ED89FF5AB09011E7F1A13FA90477058C41C6677EE1251D> |-/S <1C60D8A8C9B7CDD8432CD730264968C71FF57A8F96F0EEA4479A99F3454304C9917FEB0EC244E2CDBBD5A3DA2F7865544972DD22618B53337E4DD119B948274AAE57EB2BE86F8B6257FABBE64A7E34B7F494AB6D3A9F597D482DA6B4096EC10472A5464AD5873E6DF0804DB96FF12071F878ECA7F6E0A811E077932CB7C5415845CEE29EF4F02AAB72AFDECBC1E4D22023674B79DC16F0EC93A5E6B2A0256B8D81328883BC718AA26F0115C4C317C27D64B6D70EDE18E3764912C5FD333208> |-/b <1C60D8A8C9B7CDD8B4397BC5D546373275BA909D41337177A39F41B58C96866A4C171F786C9B49E0B845D6F92D561ED969B60685344F4B3DE87DBA038984A25C9A3BB855F4BE09D2B653E4B0E57C4942F5E843087B81EB813B74925AF65E3A479E3B2E9C034B803FE5EE7939682697FC076E59CAED8A56821B085006724DA544D253B65E7F266FF76BD33F328219> |-/h <1C60D8A8C9B7CDD8BE0229A9F7DBF0CCAE754B865B43F223DF733D11888419AC6AF60FFBD0D1CA633FE1FE2C6E1F64DDF217BE68448AE4474BFFE2D08589EBD1FCBCAE1335A3FEDD67F9E622D0FD888A8B09AE8FC7005E7EF7700206D1E054393C2C65BBBF83352EF87A969BBA10BA81D938F63206F49A1F21D525B7FB0F2CB58A4724384AE97212E8B7D8D76836611DED5BE4702DD6039379B0437C3C137D5AC9C0BC8475A5E2634B783F90F5C2F5B426852C901B080E58E24CEE> |-/i <1C60D8A8C9B845C80829510E46B066D617592C2752F4719A972C90DEABB522FDEAA3EF457E51B858973B4D0B0FBB25EFBEF1DBC7CB2D0C715C3BAB84315A0C25E75381301FF942ED170560D3DC9F01113C33FA4E643697198914D9405D4567A946F198597C5B4B842DDE84CF67B10114310ED3022D924089FBA3B4> |-/l <1C60D8A8C9B845C80829510F2B6BB6DDB6DBD81EACB6BC16C2545FA3EAD2BC6F384F7DBBF19F0060CFA1157B24C1E5ABD97E4D5EF2C31AE2D7E682D087F247A450CCBCD70D5B46AF891DDA7EAE02F47171CED31962EAE834F0D1C6F815> |-/m <1C60D8A8C9B59B43992944ED490C19A15D8735441315F95002383D7FB55CBE87771592826C484758BB609F7DA8BB17A0AD5F34356927AD6AEFDB58A28643E71533CEC1200C271AF80201C51CB23AC4E21EC48E2905B47AF54251BE0EFD9D868C76E0679EE191CAA0999955AAF990983016435DE0E01D02AE248F5D5EDBD10DD3A3DEA4A2800D6A621A3BA50BF1580431497240FD20A31D470DC52CCDE58A4C6324A0F849B194B7185D6A197C82E6492E54FB3F79F4634E1835DA3CE502B62DDEE63B11A0797EF3C321B60CE1648C96026DA5BFFF88D8ED804E6814DE911E94BA75231DCC793D2DCF52A70D33A7C8617207C4D09DDCE6DFD800E0BF281FF22E0A5D8D71AED2E5D1BC45CEA583B1> |-/p <1C60D8A8C9B7CDD8CEC3C3B22188F9EF41126D2D281C4C44EC2AF1EF95B90DBC18E5253908081A36F13D5070BDA9E68BC0AF8DC2943C2259ECB48C2E73152791A1921AE51B16FDD8412C2AE03FC791018BA479F481B152109E921299C23EA248AC46A552FE79E0C01C0A43440A1C23690B84B6E65F06457A853888879000EDD0895C00385A9914B6943436988A9D040D195F81AF07D80426B5C66F3EAF2184E92805D4F984733F31F176AD89> |-/u <1C60D8A8C9B7CDD8B4397BC5C54C67A59D54BF3E30C4F705D24054AF402519E3BE071AD7D52923E6CC431686D26A514C0341C8057C4D1AF43DBC925E2B88457377B8C53FDB1A63A50921FCB8EC4ECDCCCC14530F53D8C66EEDB79E4CC12CD217E5B4> |-/w <1C60D8A8C9B6F21D01646DC0414B82B4BEFC9DE695ABBB53C2A79E96C8525DBC55D37415CFB76275C3DF257D310FA16F508F72CB1B0DBCF21B27F8B7EB04C141611FBE8962D24C82958B164E32306E1A0AC5D96F184273A90FB5A1B68A3157D1D6DA84AD57CAB6EB3C5F2ED8EFA7C0A92589B982B65F636E4CF5A8F4324AF3D2819E488C9CE5F8696211FFF02CFCCAF69FA51F2675DAD64A48C21C81CE2F8CD1A36704997CBD2C2C90F7C7B28FBDFE131ACBBC13CC9A2521E4113E32661255DCA09F0A24BC8BA4E0E32685EC8A81572A8D87500B6C12118E2B7A825A011C835348FE53B57589F410D621A67E1522EC2721318DF0F15D03CD67DF47C423336917B34FCA6D8E3FAF6C24F1> |-/y <1C60D8A8C9B7EB086EB4A789EEF7D65C5CF25537E4A831871A743460E474E839B62979D960D0DF8D729402C0E9BC892041C72E405B3EDE1777E8AFB67B013BB74725BE41A822DD85607ADA97C255A983F1B95284EA854C329E502B1D6679A76C3656E234B70A3A17897BD8BC323FBF134D890F4AD38CC7F0D228A4F52FAA4B868CF780EF272005AAE015E30578F05476316C7691B97903C54058CA0C4045FB7EE856D968B30655F7AFA9D2A3FB08216AF66E9AAE5BE0512C0305E6C03ADE6BF70E2DA877344FC094CF43384BFF82F7> |-systemdict /gcheck known {setglobal} if end {end} ifendZZNISJ+CMR8 /Encoding getdup 37 /percent putdup 46 /period putdup 52 /four putdup 57 /nine putdup 83 /S putdup 98 /b putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 112 /p putdup 117 /u putdup 119 /w putdup 121 /y putpop%ADOEndSubsetFont
/ZZNISJ+CMR8*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 5{/.notdef}rp /four 4{/.notdef}rp /nine 25{/.notdef}rp /S /.notdef /U 11{/.notdef}rp /a /b /.notdef /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t /u /.notdef /w /.notdef /y 134{/.notdef}rp]ZZNISJ+CMR8 nfZZNISJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf168.623 177.014 mo(\(b\)Summarytreewith94.44%probability)[3.29318 4.70477 6.58484 4.70477 4.70474 7.05679 7.05676 4.2345 3.29239 7.29907 3.29318 3.30035 3.76346 6.5849 6.11621 2.35202 3.29318 7.52617 4.23447 4.2345 2.35202 4.23447 4.2345 9.87817 4.70477 3.30035 4.2345 4.70477 4.23444 4.70477 2.35202 2.35202 2.35202 3.06204 0 ]xshgsave
1.55382 307.349 mo
1.55382 188.657 li
162.523 188.657 li
162.523 307.349 li
cp
clp
31.8836 287.101 mo
30.8984 287.101 li
30.8984 244.746 li
32.4715 244.746 li
32.4715 286.314 li
31.685 286.314 li
31.685 285.527 li
31.8836 285.527 li
31.8836 287.101 li
.742188 .0366821 1 .00131226 cmyk
f
2.91847 245.533 mo
31.6849 245.533 li
31.6849 243.96 li
2.91847 243.96 li
cp
.734375 .0844727 1 .00613403 cmyk
f
149.624 231.296 mo
101.105 231.296 li
101.105 239.622 li
99.5317 239.622 li
99.5317 229.723 li
149.624 229.723 li
149.624 231.296 li
.71875 0 1 0 cmyk
f
149.624 249.519 mo
99.5317 249.519 li
99.5317 239.622 li
101.105 239.622 li
101.105 247.946 li
149.624 247.946 li
149.624 249.519 li
.736328 0 1 3.052e-05 cmyk
f
149.624 285.962 mo
50.2301 285.962 li
50.2301 269.232 li
51.8032 269.232 li
51.8032 284.389 li
149.624 284.389 li
149.624 285.962 li
.208984 .984375 1 .123047 cmyk
f
149.624 267.741 mo
55.1579 267.741 li
55.1579 253.288 li
56.731 253.288 li
56.731 266.168 li
149.624 266.168 li
149.624 267.741 li
.679688 0 1 0 cmyk
f
131.867 203.963 mo
32.4715 203.963 li
32.4715 244.746 li
30.8984 244.746 li
30.8984 202.39 li
131.867 202.39 li
131.867 203.963 li
.714844 0 1 0 cmyk
f
51.0166 270.018 mo
32.6701 270.018 li
32.6701 286.314 li
31.097 286.314 li
31.097 268.445 li
51.0166 268.445 li
51.0166 270.018 li
.740234 .0313416 1 .0010376 cmyk
f
149.624 304.185 mo
31.097 304.185 li
31.097 286.314 li
32.6701 286.314 li
32.6701 302.612 li
149.624 302.612 li
149.624 304.185 li
.726563 .147949 1 .021698 cmyk
f
149.624 213.075 mo
131.081 213.075 li
131.081 203.177 li
132.654 203.177 li
132.654 211.502 li
149.624 211.502 li
149.624 213.075 li
.634766 .303955 1 .12793 cmyk
f
149.624 194.853 mo
132.654 194.853 li
132.654 203.177 li
131.081 203.177 li
131.081 193.28 li
149.624 193.28 li
149.624 194.853 li
.679688 0 1 0 cmyk
f
55.9444 254.075 mo
51.8032 254.075 li
51.8032 269.232 li
50.2301 269.232 li
50.2301 252.502 li
55.9444 252.502 li
55.9444 254.075 li
.734375 0 1 0 cmyk
f
100.318 240.408 mo
56.731 240.408 li
56.731 253.288 li
55.1579 253.288 li
55.1579 238.835 li
100.318 238.835 li
100.318 240.408 li
.712891 0 1 0 cmyk
f
32.7449 287.101 mo
48.2028 287.101 li
48.2028 285.527 li
32.7449 285.527 li
cp
.440918 .399658 0 0 cmyk
f
.09832 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
48.2027 285.527 mo
32.7449 285.527 li
32.7449 287.101 li
48.2027 287.101 li
48.2027 285.527 li
cp
.75 .679688 .669922 .902344 cmyk
@
40.9074 245.533 mo
32.4715 245.533 li
32.4715 243.96 li
40.9074 243.96 li
40.9074 245.533 li
.440918 .399658 0 0 cmyk
f
32.4715 245.533 mo
30.8984 245.533 li
31.685 245.533 li
31.685 244.746 li
32.4715 244.746 li
32.4715 245.533 li
.8125 .415771 .498047 0 cmyk
f
31.685 245.533 mo
22.3505 245.533 li
22.3505 243.96 li
30.8984 243.96 li
30.8984 244.746 li
31.685 244.746 li
31.685 245.533 li
.808594 .443115 .498047 .00392151 cmyk
f
32.4715 244.746 mo
32.4715 244.746 li
30.8984 244.746 li
30.8984 243.96 li
32.4715 243.96 li
32.4715 244.746 li
.796875 .399902 .498047 0 cmyk
f
40.9074 243.96 mo
22.3505 243.96 li
22.3505 245.533 li
40.9074 245.533 li
40.9074 243.96 li
cp
.75 .679688 .669922 .902344 cmyk
@
58.4595 270.018 mo
51.8032 270.018 li
51.8032 268.445 li
58.4595 268.445 li
58.4595 270.018 li
.440918 .399658 0 0 cmyk
f
51.8032 270.018 mo
50.2301 270.018 li
51.0166 270.018 li
51.0166 269.232 li
51.8032 269.232 li
51.8032 270.018 li
.544922 .890625 .498047 .0588379 cmyk
f
51.0166 270.018 mo
43.151 270.018 li
43.151 268.445 li
50.2301 268.445 li
50.2301 269.232 li
51.0166 269.232 li
51.0166 270.018 li
.8125 .415771 .498047 0 cmyk
f
51.8032 269.232 mo
51.8032 269.232 li
50.2301 269.232 li
50.2301 268.445 li
51.8032 268.445 li
51.8032 269.232 li
.808594 .399902 .498047 0 cmyk
f
58.4595 268.445 mo
43.151 268.445 li
43.151 270.018 li
58.4595 270.018 li
58.4595 268.445 li
cp
.75 .679688 .669922 .902344 cmyk
@
63.4404 254.075 mo
56.731 254.075 li
56.731 252.502 li
63.4404 252.502 li
63.4404 254.075 li
50.2301 254.075 mo
48.1123 254.075 li
48.1123 252.502 li
50.2301 252.502 li
50.2301 254.075 li
.440918 .399658 0 0 cmyk
f
56.731 254.075 mo
55.1579 254.075 li
55.9444 254.075 li
55.9444 253.288 li
56.731 253.288 li
56.731 254.075 li
.78125 .399902 .498047 0 cmyk
f
55.9444 254.075 mo
50.2301 254.075 li
50.2301 252.502 li
55.1579 252.502 li
55.1579 253.288 li
55.9444 253.288 li
55.9444 254.075 li
.808594 .399902 .498047 0 cmyk
f
56.731 253.288 mo
56.731 253.288 li
55.1579 253.288 li
55.1579 252.502 li
56.731 252.502 li
56.731 253.288 li
.796875 .399902 .498047 0 cmyk
f
63.4404 252.502 mo
48.1123 252.502 li
48.1123 254.075 li
63.4404 254.075 li
63.4404 252.502 li
cp
.75 .679688 .669922 .902344 cmyk
@
134.26 203.963 mo
132.654 203.963 li
132.654 202.39 li
134.26 202.39 li
134.26 203.963 li
.440918 .399658 0 0 cmyk
f
131.081 203.963 mo
129.354 203.963 li
129.354 202.39 li
131.081 202.39 li
131.081 203.177 li
131.081 203.963 li
.796875 .399902 .498047 0 cmyk
f
131.081 203.963 mo
132.654 203.963 li
132.654 203.177 li
131.081 203.177 li
cp
.757813 .548828 .498047 .0627441 cmyk
f
131.081 203.177 mo
132.654 203.177 li
132.654 202.39 li
131.081 202.39 li
cp
.78125 .399902 .498047 0 cmyk
f
134.26 202.39 mo
129.354 202.39 li
129.354 203.963 li
134.26 203.963 li
134.26 202.39 li
cp
.75 .679688 .669922 .902344 cmyk
@
106.591 240.408 mo
101.105 240.408 li
101.105 239.622 li
100.318 239.622 li
101.105 239.622 li
101.105 238.835 li
106.591 238.835 li
106.591 240.408 li
.440918 .399658 0 0 cmyk
f
100.318 239.622 mo
101.105 239.622 li
101.105 238.835 li
100.318 238.835 li
cp
.800781 .399902 .498047 0 cmyk
f
101.105 240.408 mo
99.5317 240.408 li
100.318 240.408 li
100.318 239.622 li
101.105 239.622 li
101.105 240.408 li
.808594 .399902 .498047 0 cmyk
f
100.318 240.408 mo
94.2126 240.408 li
94.2126 238.835 li
100.318 238.835 li
100.318 239.622 li
100.318 240.408 li
.796875 .399902 .498047 0 cmyk
f
106.591 238.835 mo
94.2126 238.835 li
94.2126 240.408 li
106.591 240.408 li
106.591 238.835 li
cp
.75 .679688 .669922 .902344 cmyk
@
ZZNISI+Helvetica*1 [3.9328 0 0 -3.9328 0 0 ]msf151.59 231.886 mo(CASS)sh151.59 250.109 mo(EMU)sh151.59 304.775 mo(RHEA)sh151.59 213.665 mo(DIGI)sh151.59 286.552 mo(OST)sh151.59 195.443 mo(ANDI)sh151.59 268.331 mo(KIWI)sh27.9488 284.131 mo(0.99)sh121.136 228.327 mo(0.95)sh121.136 246.548 mo(0.97)sh37.6156 267.047 mo(0.98)sh86.9192 301.213 mo(1.02)sh136.911 210.104 mo(1.07)sh96.4857 282.993 mo(1.26)sh137.992 191.882 mo(0.9)sh49.6461 251.104 mo(0.97)sh100.031 264.77 mo(0.9)sh74.2968 237.437 mo(0.94)sh77.9406 200.994 mo(0.95)shgrestore
%ADOBeginSubsetFont: IAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginZZNISJ+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7883C479819BD474E9964F6BF369AAF487ABFE629F8A56337D176F7C9556B1CAAE607CA6285C927013D8BDE6137B6739AFDAF8D7D8B1E86BAFBB9D834592D58F996DFF88B929F1FABA7347C2BBDB5519BE210DDE834DD1DCB9A84AA77E585DFD5A86708901622F6AC3CFFFF626D8C5FD08A157C4A8F19F7F5FA2E61175441FDD6> |-/c <1C60D8A8C9B74383EF980222A6B5E458AA3D6B433D9D5D3C23E2026B269887927B3DF12955B37A4877214D068FD3C2E5841CCCB4F446BFDB874487058C31D1724E4656920FAD5D552FDF1DCF11E462BE0C50EDA119ACB5BBAE5A80C48C80CE43B1E11AB874B2CB3CF1346235562729371E56E3> |-systemdict /gcheck known {setglobal} if end {end} ifendZZNISJ+CMR8 /Encoding getdup 50 /two putdup 99 /c putpop%ADOEndSubsetFont
/ZZNISJ+CMR8*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 3{/.notdef}rp /two /.notdef /four 4{/.notdef}rp /nine 25{/.notdef}rp /S /.notdef /U 11{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t /u /.notdef /w /.notdef /y 134{/.notdef}rp]ZZNISJ+CMR8 nfZZNISJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf4.42882 316.727 mo(\(c\)Summarytreewith4.24%probability)[3.29318 3.76347 6.58484 4.70476 4.70477 7.05678 7.05678 4.23447 3.2924 7.29906 3.2932 3.30037 3.76346 6.5849 6.11621 2.35202 3.29318 7.52617 4.23448 2.35202 4.23447 4.2345 9.87819 4.70476 3.30038 4.23447 4.70474 4.2345 4.70477 2.35199 2.35205 2.35199 3.06207 0 ]xshgsave
168.336 303.462 mo
168.336 185.106 li
329.272 185.106 li
329.272 303.462 li
cp
clp
1.6536 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
315.713 226.971 mo
198.431 226.971 li
198.431 213.405 li
.726563 .147949 1 .021698 cmyk
@
315.713 245.884 mo
267.49 245.884 li
267.49 254.1 li
265.836 254.1 li
265.836 244.23 li
315.713 244.23 li
315.713 245.884 li
.71875 0 1 0 cmyk
f
169.77 249.276 mo
198.386 249.276 li
198.386 247.622 li
169.77 247.622 li
cp
.734375 .0844727 1 .00613403 cmyk
f
222.522 268.491 mo
218.444 268.491 li
218.444 283.491 li
216.79 283.491 li
216.79 266.837 li
222.522 266.837 li
222.522 268.491 li
.734375 0 1 0 cmyk
f
315.713 263.97 mo
265.836 263.97 li
265.836 254.1 li
267.49 254.1 li
267.49 262.317 li
315.713 262.317 li
315.713 263.97 li
.736328 0 1 3.052e-05 cmyk
f
266.663 254.927 mo
223.349 254.927 li
223.349 267.664 li
221.695 267.664 li
221.695 253.274 li
266.663 253.274 li
266.663 254.927 li
.712891 0 1 0 cmyk
f
217.617 284.318 mo
197.559 284.318 li
197.559 248.449 li
199.213 248.449 li
199.213 282.664 li
217.617 282.664 li
217.617 284.318 li
.740234 .0313416 1 .0010376 cmyk
f
198.431 214.232 mo
198.386 214.232 li
198.386 213.405 li
199.213 213.405 li
199.213 248.449 li
197.559 248.449 li
197.559 212.578 li
198.431 212.578 li
198.431 214.232 li
.740234 .0375366 1 .00137329 cmyk
f
315.713 282.056 mo
221.695 282.056 li
221.695 267.664 li
223.349 267.664 li
223.349 280.403 li
315.713 280.403 li
315.713 282.056 li
.679688 0 1 0 cmyk
f
315.713 209.711 mo
297.221 209.711 li
297.221 199.842 li
298.875 199.842 li
298.875 208.058 li
315.713 208.058 li
315.713 209.711 li
.634766 .303955 1 .12793 cmyk
f
315.713 191.625 mo
298.875 191.625 li
298.875 199.842 li
297.221 199.842 li
297.221 189.972 li
315.713 189.972 li
315.713 191.625 li
.679688 0 1 0 cmyk
f
315.713 300.143 mo
216.79 300.143 li
216.79 283.491 li
218.444 283.491 li
218.444 298.489 li
315.713 298.489 li
315.713 300.143 li
.208984 .984375 1 .123047 cmyk
f
298.048 200.668 mo
199.258 200.668 li
199.258 213.405 li
197.605 213.405 li
197.605 199.015 li
298.048 199.015 li
298.048 200.668 li
.714844 0 1 0 cmyk
f
272.903 254.927 mo
267.49 254.927 li
267.49 254.1 li
266.663 254.1 li
267.49 254.1 li
267.49 253.274 li
272.903 253.274 li
272.903 254.927 li
.440918 .399658 0 0 cmyk
f
266.663 254.1 mo
267.49 254.1 li
267.49 253.274 li
266.663 253.274 li
cp
.800781 .399902 .498047 0 cmyk
f
267.49 254.927 mo
265.836 254.927 li
266.663 254.927 li
266.663 254.1 li
267.49 254.1 li
267.49 254.927 li
.808594 .399902 .498047 0 cmyk
f
266.663 254.927 mo
260.59 254.927 li
260.59 253.274 li
266.663 253.274 li
266.663 254.1 li
266.663 254.927 li
.796875 .399902 .498047 0 cmyk
f
.10335 lw
2 lc
272.903 253.274 mo
260.59 253.274 li
260.59 254.927 li
272.903 254.927 li
272.903 253.274 li
cp
.75 .679688 .669922 .902344 cmyk
@
225.021 284.318 mo
218.444 284.318 li
218.444 283.491 li
217.617 283.491 li
218.444 283.491 li
218.444 282.664 li
225.021 282.664 li
225.021 284.318 li
.440918 .399658 0 0 cmyk
f
217.617 283.491 mo
218.444 283.491 li
218.444 282.664 li
217.617 282.664 li
cp
.808594 .399902 .498047 0 cmyk
f
216.79 284.318 mo
209.794 284.318 li
209.794 282.664 li
217.617 282.664 li
217.617 283.491 li
216.79 283.491 li
216.79 284.318 li
.8125 .415771 .498047 0 cmyk
f
218.444 284.318 mo
216.79 284.318 li
216.79 283.491 li
218.444 283.491 li
218.444 284.318 li
.544922 .890625 .498047 .0588379 cmyk
f
225.021 282.664 mo
209.794 282.664 li
209.794 284.318 li
225.021 284.318 li
225.021 282.664 li
cp
.75 .679688 .669922 .902344 cmyk
@
202.268 214.232 mo
220.253 214.232 li
220.253 212.578 li
202.268 212.578 li
cp
.440918 .399658 0 0 cmyk
f
220.253 212.578 mo
202.268 212.578 li
202.268 214.232 li
220.253 214.232 li
220.253 212.578 li
cp
.75 .679688 .669922 .902344 cmyk
@
207.561 249.276 mo
199.213 249.276 li
199.213 247.622 li
207.561 247.622 li
207.561 249.276 li
.440918 .399658 0 0 cmyk
f
197.559 249.276 mo
189.103 249.276 li
189.103 247.622 li
197.559 247.622 li
197.559 248.449 li
197.559 249.276 li
.808594 .443115 .498047 .00392151 cmyk
f
197.559 249.276 mo
199.213 249.276 li
199.213 248.449 li
197.559 248.449 li
cp
.8125 .415771 .498047 0 cmyk
f
197.559 248.449 mo
199.213 248.449 li
199.213 247.622 li
197.559 247.622 li
cp
.8125 .419678 .498047 0 cmyk
f
207.561 247.622 mo
189.103 247.622 li
189.103 249.276 li
207.561 249.276 li
207.561 247.622 li
cp
.75 .679688 .669922 .902344 cmyk
@
229.978 268.491 mo
223.349 268.491 li
223.349 267.664 li
222.522 267.664 li
223.349 267.664 li
223.349 266.837 li
229.978 266.837 li
229.978 268.491 li
216.79 268.491 mo
214.73 268.491 li
214.73 266.837 li
216.79 266.837 li
216.79 268.491 li
.440918 .399658 0 0 cmyk
f
221.695 268.491 mo
216.79 268.491 li
216.79 266.837 li
221.695 266.837 li
221.695 267.664 li
222.522 267.664 li
221.695 267.664 li
221.695 268.491 li
.808594 .399902 .498047 0 cmyk
f
223.349 267.664 mo
221.695 267.664 li
221.695 266.837 li
223.349 266.837 li
223.349 267.664 li
.796875 .399902 .498047 0 cmyk
f
223.349 268.491 mo
221.695 268.491 li
221.695 267.664 li
223.349 267.664 li
223.349 268.491 li
.78125 .399902 .498047 0 cmyk
f
229.978 266.837 mo
214.73 266.837 li
214.73 268.491 li
229.978 268.491 li
229.978 266.837 li
cp
.75 .679688 .669922 .902344 cmyk
@
300.43 200.668 mo
298.875 200.668 li
298.875 199.015 li
300.43 199.015 li
300.43 200.668 li
.440918 .399658 0 0 cmyk
f
298.875 200.668 mo
297.221 200.668 li
298.048 200.668 li
298.048 199.842 li
298.875 199.842 li
298.875 200.668 li
.757813 .548828 .498047 .0627441 cmyk
f
298.048 199.842 mo
298.875 199.842 li
298.875 199.015 li
298.048 199.015 li
cp
.78125 .399902 .498047 0 cmyk
f
298.048 200.668 mo
295.549 200.668 li
295.549 199.015 li
298.048 199.015 li
298.048 199.842 li
298.048 200.668 li
.796875 .399902 .498047 0 cmyk
f
300.43 199.015 mo
295.549 199.015 li
295.549 200.668 li
300.43 200.668 li
300.43 199.015 li
cp
.75 .679688 .669922 .902344 cmyk
@
ZZNISI+Helvetica*1 [4.134 0 0 -4.134 0 0 ]msf317.78 264.59 mo(EMU)sh317.78 228.418 mo(RHEA)sh317.78 282.677 mo(KIWI)sh317.78 210.332 mo(DIGI)sh317.78 246.504 mo(CASS)sh317.78 192.245 mo(ANDI)sh317.78 300.763 mo(OST)sh287.157 260.847 mo(0.97)sh240.561 251.804 mo(0.94)sh203.971 281.195 mo(0.98)sh253.041 224.674 mo(1.02)sh194.378 211.111 mo(0.99)sh266.223 278.933 mo(0.9)sh302.85 206.588 mo(1.07)sh287.157 242.761 mo(0.95)sh303.987 188.502 mo(0.9)sh262.634 297.02 mo(1.26)sh216.038 265.37 mo(0.97)sh244.209 197.545 mo(0.95)shgrestore
%ADOBeginSubsetFont: IAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginZZNISJ+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7883C47E9695A643EC7CDC9D492AB150D29B838BCDE529851B4F36139BB3C5556B7F7E4934494C8CA669B61323ACA68A6240E429D123FC3286EBB7794C68A02175F48138D7512A6C24D04FF2F8E1915AEBF24AD4C9B5E652D787177BE307207126057745DD2D6A7D78294> |-/three <1C60D8A8C9B7883CBAA92B92A60ED97CC7706D34A36348BC2B93805C7C1833580FAA27E95855649C4EE0492E1681D62AEDB7EC0D4D44FE91FF7AD4665FD8D6994E56FB00B47353D8538086D2C46021ADFB3F80264F6C2EF23799D21E81ACDE63FE62C97F7BE27D7DCE3B9BAF5B096FE9F9E10574C4FE3C149B03DD0A59DE10D784DCCBFDFC6D3C5399775DC28DB91A04691B5B8F3D1C009DFAB49BB818D90EA7C1> |-systemdict /gcheck known {setglobal} if end {end} ifendZZNISJ+CMR8 /Encoding getdup 49 /one putdup 51 /three putpop%ADOEndSubsetFont
/ZZNISJ+CMR8*1 [37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four 4{/.notdef}rp /nine 25{/.notdef}rp /S /.notdef /U 11{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t /u /.notdef /w /.notdef /y 134{/.notdef}rp]ZZNISJ+CMR8 nfZZNISJ+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf170.74 316.727 mo(\(d\)Summarytreewith1.32%probability)[3.29318 4.70477 6.58484 4.70477 4.70474 7.05679 7.05676 4.2345 3.29239 7.29907 3.29318 3.30035 3.76346 6.5849 6.11621 2.35202 3.29318 7.52617 4.23447 2.35202 4.2345 4.23447 9.8782 4.70474 3.30038 4.23447 4.70477 4.2345 4.70474 2.35202 2.35199 2.35205 3.06204 0 ]xsh%ADOBeginSubsetFont: GAAAAA+CMSSBX10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginZZNISH+CMSSBX10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/fi <1C60D8A8C9B7F1D1CCE9157EBF54480406E10A7E10B0D980B3368D5ABB663B4BB3B4F1D5CAA7B3AA0B8060A197ADAE7F859B9CA67799D73255573BEB14BF481E010A67AD2CDA2886F02DED09F3D703E733C35E2BCE29D9DDB9A9E4159DFF37102B173CCA2F542D814766799A511CEEDAC04B54531D6E4F3904362306A8FD4AD1666F69A85546B16D5DCCBA40118673FB69927A385FACB93738640E55D0673F213F93719F1ACFEE4951DDF5AD05F4FE703D873B99DB1A9ADEF115918CBD4044> |-/period <1C60D8A8C9B83BB81FFC85D8C430E7BCF8524CCDAB1983F2507E71A2F2D225837C8CA436F03EA8FFF5B6C46E40FC9B3D> |-/one <1C60D8A8C9B795A0CD6BCD21B40205F6F7BA65C738D282953681BF51859DC859EB177150154F0E13E86B5C92A79F1E2BB1E30C10719657DE6A0E40F3D074BE07DBDA4DC7BFCD0099861FED004AA46F2B2C2C3870E8553A9E2F3F4C154B0F4494E5> |-/I <1C60D8A8C9B820E2A23B85C20BB14C125485125FD5CE122E1637123A008770F13F4457DBB65D352ED60FA7C49762737648D16A0BE9> |-/a <1C60D8A8C9B78E05922DFD3AE291311EDDA978D554F833EEF8F0AA38DBEBDD2326AC4D55C915CC4853AB84A252602DE5ACB2665E160DD4BB46E9D53F2A68651B0C69DBF0732FE864448E65EB2681EABE008B59298BC974F7827B008BDB4F25502248403B4385866E6A60C4677AF7C7EBD2C241081B3007E2FA1E8723AC2349CB5A58C2CCAEA20DF8EDDBF41CA7FF22> |-/d <1C60D8A8C9B7EA3ACC5F84A681003B24F7AD6AFCB8B6D0A94DE54D7736139F415663E7DF59C6F49E254D542748A68404E627A35A6BB8088DF1C706F876F5E30D3DC586347DE21D214E3923A7C410E16616475DEA4BAE6CC172F9D1A1B3C3E9598403B24D8253EE073F9CE2324ECA2AAF52F87ED614CFA062938C1818E2D1A7> |-/f <1C60D8A8C9B81A14E486F8107B50D0AAB5F1D93A35084C2FB4DA179485427863AB77C86FECEE6BFAF9BFBFB23B64464B6BB05FCA0735244759DC97D8F9400438F10484A7571776B4BF78100CA1EE288CB94BAB833E94F4018B0254DEA35C6F2ACC0F1180D758DC74DC0996EE9E4DDA51E4F5C5D69E813AA310> |-/l <1C60D8A8C9B86D0BB6F0C220BD17AE25E52B5C8BC8C8352AC107D89DB447CBC0A996CFEFD15F3767851035BB7D4DB611E7C642A252> |-/m <1C60D8A8C9B697A21CD9708A8EF274ED5B63D49ADE9CD9358D034A7CC0B07E3D7CEDFECA555A1D66EC37F3721E7DD8F819458701C650198082476B0B34A3ED3978C66D6871967F179A8C2AACB60DA36E361FF4B32768D76445ACE108FCEDE24899F841D68671479109B3C1A29703C9678C9BD62702416E199A41EE2A389BCF398FFB9995C07065A6F0F1CA4607859CDA1127EC4E65A3AFFCB5BC07> |-/n <1C60D8A8C9B7EA3AC724EF1810EE8C07BEFD9AE558769FDDACC5CE9B7CB1DA292BBECD43432953BFFAD39C3DAC8A57A17EC79F202614CF5DA26BECB60CCCC4AE1E9A85925FC2B584F3E57C1BBC79422AD5EFC1A7284C83096266DC7A6752CE38C1EF688D38BA> |-/o <1C60D8A8C9B795A0C6CA2FEE45CC0BDF284E9A10EF994540F43E7FE6C18A73ADB6D1DBAEA1432EBE4B5650DEA98F6797CE2CD6C16CA6486493C77240BDB90EF8299E735FF86F1EDF0C5FF78B10C9F618CA6DB575D2C97C> |-/p <1C60D8A8C9B7EA3AB7CB5098A9AF9919CD029A9EC5584D90D56EF7750C158D51BEA5BB774752EB88993492A11073B980E5B8C1BD8C2533E15033B1A311957C1FBA334DE9CB9A9BDDC2206BC53608FCE474B735561DBE18691BC29A2FEEE0B4E21C6D9F8C5F705241D53F60CB8FA83DD7DD83AFCD9D1CCDB037C941770BF473> |-/t <1C60D8A8C9B70721B85BA02CA2F462D02F8BDD0DEECBB73445DD0AEDF52F02DD194D7D2A0E70ED45A3D58F50647037BD9AF8A17F8C8C66C1D153933372A8D7327D6640B2AAACF33E74C1F50F6B2E935040D7E68EB51901A559845994CFB578F61F7B64B73647F642F01EF039AAE93E8DC0930206B9105A46B40B07CBD46E406F97> |-/x <1C60D8A8C9B7A73DC573E0F2B44234B6633A0180BFD84436F1435F5D6A50AABCF342B0EA90069F4D652D0BC42A14F96CA76D51C978050B68D3BEA345FB5D19C3923431FB35815B7DFD2842C7B2F479872B1086692D0E1D85C8BFCA71949F42A85431C570A2F29D98F24712FDC8DB3E295F48765E5D6D780058D545F61AA87B1C01AF2B968D71EA2DF744C5558CD9CF1A> |-systemdict /gcheck known {setglobal} if end {end} ifendZZNISH+CMSSBX10 /Encoding getdup 12 /fi putdup 46 /period putdup 49 /one putdup 73 /I putdup 97 /a putdup 100 /d putdup 102 /f putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 116 /t putdup 120 /x putpop%ADOEndSubsetFont
/ZZNISH+CMSSBX10*1 [12{/.notdef}rp /fi 33{/.notdef}rp /period 2{/.notdef}rp /one 20{/.notdef}rp /F 2{/.notdef}rp /I 23{/.notdef}rp /a 2{/.notdef}rp /d /e /f /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u 2{/.notdef}rp /x 135{/.notdef}rp]ZZNISH+CMSSBX10 nfZZNISH+CMSSBX10*1 [7.9701 0 0 -7.9701 0 0 ]msf-8.96817 336.21 mo(Figure1Illustrationofsamplinga\014xedunrootedtree.)[4.87053 2.03716 4.38358 4.47198 2.96642 6.99849 8.61571 2.63489 2.03716 2.03716 4.472 3.36104 3.22156 2.96642 4.18425 3.22156 2.03717 4.38358 7.38905 4.38358 5.60382 3.36104 4.18427 6.90768 4.47198 2.03716 2.03716 4.472 7.30861 7.1013 4.67131 3.98508 4.07343 7.39703 4.47198 4.47202 2.9664 4.63068 4.38354 3.22156 4.07349 7.38904 3.22156 2.9664 4.07346 4.07349 0 ]xsh%ADOBeginSubsetFont: FAAAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginZZNISG+CMSS8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/percent <1C60D8A8C9B59B433D3C90AEBF678C2CC82FCCB250D2A7B2483C425156E60284BEA5AD175FD102451A39EC2DA35C0928E43C931E523CCBFF014C44CAD4FF1B3DD033B0CEF5DF53F476A004044796EEAFB7E1ADAD4CA1B7CBBD6C7D774C46832E8172B750B7A8DF99D77CC5ABA3A12F53946C2718A44D0810EA9B95575DC0F514116E3E0BC05644F685D765A6909FFB2436578A9AFDBD36A5F842C3494741FA553C6DAD64ED0FA707463561AF6F23C754044A4083777105BF7196042444C35CD3081F31CA8AE32C9793082A3DE25D36D6EB2CB346D1D142D4> |-/period <1C60D8A8C9B845C80860AB44A338CC6083B186B062A47301A0A0> |-/five <1C60D8A8C9B7883CBACD30F911D8EADBA8A4CA69B0974D719BE478FAD94FAB1CED5FF4BDE6D0C321D01E1F6787459C611C8E163D1A471CCC45A024560EF8D9E7884068AD76612CFF18DD5FD045510003EA333507CB470A02A091449E488A5744150C6698038487> |-/nine <1C60D8A8C9B7883CBACD30F9B872676EB842292BDEF11E3B363F736459EBA871FEAABC60F31708CDE2830680E85D3C6A47F799DDF25FBAA7A19E4AF979352C0CE441A0CCBDE9468FC3ACB293E8BB4C55CE94E04E6C1E8B5D71C80B3DDCFF11876F5DB328DFB0F467DAACC4254002EDEFCAC444F81BAB9E75B0EBE587039EA4C20A5B82B67A5386AFA94A60BBE019AC581F44351BBFAAA70C> |-/A <1C60D8A8C9B639EEFA1D194936F6EBA7B815AB493FFDCA39733B61409929EAB2745BE5390B96B13B7950F2C570F94C24E565B99F7E19202657D0FC8B088B> |-/H <1C60D8A8C9B6E3FA234D59C969574EB17B7C2D22FDBAF7CA9A23F59E616F22605C4324A7FBC0AAF2ADDE6F3204CFA1D279648F82F5CA5CF2F5978AFF5A94> |-/T <1C60D8A8C9B6086D55E350F19C964A8302560C1F73991160546912E7BCDF46205AC02AF91A569A2BA0C975A11F68D3B11768FFFF8BFB264853019690F276> |-/bracketleft <1C60D8A8C9B83776083331881C27613849674394617B39F9D56F31556E7C4E39BC45DF2928DFE6B80E297D> |-/bracketright <1C60D8A8C9B83776083331881C27613848E0EC6B158A97D4BF39C1302D646FD1C3FE9C2EA478AD2E5C633C01> |-/b <1C60D8A8C9B79747360C002C3D6F2D9BB4E47DEDD47F2659F9D3A4DE19EB672178309A405864116AFEA263FE2E458B702A41E0814C62280DFCC0292C1730F1E0E2C09167AFEC73572ADA32E42B33ED063E8163077A2AEE74DA884B6B8D277A7A14EE8FFE404C4D1B0554B2> |-/c <1C60D8A8C9B74383EFE2AED1D20DB94D25F65EA0DDCFCFB4A826D66997A391AF5D7A5B5FBB73D056E81114D01C5FE3ACFCCA4AA70FA75F3348C80CC8851720B7369EF1022939925699461F8805AE42EB5D6DBB> |-/i <1C60D8A8C9B86FAE6A72F95D40DFC0014093276B4B8451DBCAF1A4FF565363ABB851E8B0984AFAFDEA481FD7589BA4> |-/l <1C60D8A8C9B86FAE6A72F95C980400B16FB0876AC9DC237314DDD8191AEDCEE6> |-/p <1C60D8A8C9B797474C287A4E3426F7D00160DB7662802710EA0B74461C1FDDEB5FE25ED7009FBC774DF7B12B98483980DD0D5E92478DD19AFED35526B5151EA54DBB3226080C4395A7204FCE5C472B4B66950AC17BA4BEBD3BF90B6B1876D2F201D639938EE868> |-/s <1C60D8A8C9B704CCCD10E3D8345FD533ED38163C3E3BB669B7A294C1DBDDF78275A299FF2227F844370DB83C3EFAAEEDA78F237317918CE17D2489E24998738E3756354592FE28D229BC7EEAAC44E9AAC80ED39081CF46F30A90D57A1062439E799BFA68E8398A84FBF51768B0BE7E6AC49320A4AE84C1ABCE09E7D14E86ED999DE409BA9B> |-/t <1C60D8A8C9B73CE4EC707BC46A795703EF93C6DD177A176EE2932471CE64A8C7700DD5273257B4E2D2B768B86B901C4181D904BB6A7160DDF98737657E89E2C9F3A73E578F66399E91763BB76446352CFAC8> |-/v <1C60D8A8C9B752AB37239F287B04E3FBBB47E1A0182BC37D9A96F297522F843D8577342896E12EF8BD3640108E44ECA66B180D66AE3BCA> |-systemdict /gcheck known {setglobal} if end {end} ifendZZNISG+CMSS8 /Encoding getdup 37 /percent putdup 46 /period putdup 53 /five putdup 57 /nine putdup 65 /A putdup 72 /H putdup 84 /T putdup 91 /bracketleft putdup 93 /bracketright putdup 98 /b putdup 99 /c putdup 105 /i putdup 108 /l putdup 112 /p putdup 115 /s putdup 116 /t putdup 118 /v putpop%ADOEndSubsetFont
/ZZNISG+CMSS8*1 [37{/.notdef}rp /percent 8{/.notdef}rp /period 3{/.notdef}rp /two 2{/.notdef}rp /five 3{/.notdef}rp /nine 7{/.notdef}rp /A 2{/.notdef}rp /D 3{/.notdef}rp /H 7{/.notdef}rp /P 3{/.notdef}rp /T 5{/.notdef}rp /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v 137{/.notdef}rp]ZZNISG+CMSS8 nfZZNISG+CMSS8*1 [7.9701 0 0 -7.9701 0 0 ]msf194.522 336.21 mo(Theunrootedtreeisobtainedfromthe)[5.78384 4.37241 6.58487 4.37241 4.37238 2.89233 4.4736 4.23447 3.05811 3.76349 7.19379 3.05811 2.89236 3.76346 6.58488 2.02036 6.06766 4.2345 4.37238 3.05811 4.06799 2.02039 4.37238 3.76349 7.19379 2.58795 2.89236 4.23447 9.54657 3.05811 4.37238 0 ]xsh-8.96817 345.176 mo(ratitesdataset[)[2.89235 4.06799 3.05811 2.02037 3.05811 3.76347 6.06766 4.37239 4.06799 3.05811 6.8894 3.24625 3.76347 5.8875 0 ]xsh%ADOBeginSubsetFont: MAAAAA+CMBX8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /MAAAAA+CMBX8 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMBX8.) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 63 /question putdef/FontBBox {-59 -250 1235 750} defendsystemdict begindup /Private14 dict dup begin/|- {def} def/| {put} def/BlueValues [-14 0 444 455 658 676 686 700] def/OtherBlues [-202 -194] def/BlueScale 0.04379 def/StdHW [52] def/StdVW [122] def/StemSnapH [42 52] def/StemSnapV [122 149] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/question <1C60D8A8C9B7F94240FDE6339208D24CA771BAF2ED32763754FD9A81100FE62E3E7DA959076393BA29E5845C8F36FDAFAE1EC324F55580B737E556F9AB2BCFA74CD57BE5DD7DA46C7A52DCABECC19B59C33E3A87D14B6EF0493B2FC6ABDF5E7FCC7A5A89B7E0AC28ED71D8E86BC7BCAA5B666A75E86375734AA2F19E369D3BCD8474C383987FA13E5365E99C9689F68DEB43A9A1E0FAA6B988DBA73F25C7> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/ZZNISK+CMBX8 /MAAAAA+CMBX8 findfont ct_VMDictPut/ZZNISK+CMBX8*1 [63{/.notdef}rp /question 192{/.notdef}rp]ZZNISK+CMBX8 nfZZNISK+CMBX8*1 [7.9701 0 0 -7.9701 0 0 ]msf49.7038 345.176 mo(?)shZZNISG+CMSS8*1 [7.9701 0 0 -7.9701 0 0 ]msf54.3148 345.176 mo(].Thecolourofbranchesfromgreentoredindicatestheratesincreasingfrom)[2.4628 5.17343 5.78384 4.37241 6.58488 3.76346 4.23448 2.02039 4.23447 4.37241 5.72173 4.22652 5.41733 4.13329 2.89235 4.06799 4.37238 3.76349 4.37238 3.76349 6.06763 2.58795 2.89236 4.23447 9.54657 4.23447 2.89236 3.76346 3.76346 7.19382 3.05811 7.06387 2.89233 3.76349 7.19379 2.02039 4.37238 4.37238 2.02039 3.76349 4.06799 3.05811 3.76346 6.06766 3.05811 4.37238 6.58488 2.89233 4.06799 3.05811 3.76349 6.06766 2.02036 4.37241 3.76346 2.89236 3.76346 4.06799 3.24625 2.02039 4.37241 7.06384 2.57999 2.89236 4.23447 0 ]xsh-8.96817 354.142 mo(smalltolarge.Thebluebarsatrepresentsthe95%HPDofthenodetimes.Andthenumbers)[3.24625 6.72513 4.06799 2.02037 4.8418 3.05811 7.05591 2.02037 3.83685 2.89235 4.23448 3.76347 5.17343 5.78384 4.37239 6.58488 4.37238 2.02039 4.37239 6.58488 4.37239 3.83685 2.89235 6.06766 4.06799 5.87952 2.89236 3.76346 4.14127 2.89233 3.76346 3.24625 3.76346 4.37241 3.05811 6.06766 3.05811 4.37241 6.58487 4.2345 4.23447 9.8782 5.97757 5.41013 8.93762 4.2345 5.40936 3.05811 4.37238 6.59286 4.37241 4.46558 4.37241 6.58487 3.05811 2.02039 6.72516 3.76343 3.24626 5.1734 5.6452 4.38037 7.19379 3.05817 4.37238 6.5849 4.37238 4.37238 6.72516 4.60352 3.76343 2.8924 0 ]xsh-8.96817 363.109 mo(besidesthebluebarsaretheposteriorvaluesatthecorrespondingnodes.)[4.6115 3.76347 3.24623 2.02039 4.37239 3.76346 6.06767 3.05811 4.37239 6.58488 4.37239 2.02037 4.37239 6.58488 4.37239 3.83685 2.89235 6.06766 3.82889 2.89236 6.58487 3.05811 4.37241 6.59285 4.60353 4.23447 3.24625 3.05811 3.76349 2.89233 2.02037 4.00336 5.71376 3.90213 4.06796 2.02039 4.37241 3.76343 6.06769 4.06799 5.87952 3.05811 4.37238 6.5849 3.76349 4.00333 2.89236 2.89233 3.76349 3.24622 4.60352 4.2345 4.37238 4.37241 2.02036 4.37241 7.05588 4.37241 4.4736 4.37238 3.76349 3.24628 0 ]xsh.249 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
-15.4442 -6.69653 mo
344.705 -6.69653 li
/1 
[/DeviceCMYK] /CSA add_res
1 .866178 .330022 .22681 cmyk
@
-15.3192 371.01 mo
-15.3192 -6.6955 li
@
344.581 371.01 mo
344.581 -6.6955 li
@
-15.4442 371.01 mo
344.705 371.01 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/ZZNISI+Helvetica*1 uf/ZZNISI+Helvetica uf/HAAAAA+Helvetica uf/ZZNISJ+CMR8*1 uf/ZZNISJ+CMR8 uf/IAAAAA+CMR8 uf/ZZNISK+CMBX8*1 uf/ZZNISK+CMBX8 uf/MAAAAA+CMBX8 uf/ZZNISG+CMSS8*1 uf/ZZNISG+CMSS8 uf/FAAAAA+CMSS8 uf/ZZNISH+CMSSBX10*1 uf/ZZNISH+CMSSBX10 uf/GAAAAA+CMSSBX10 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
